; ModuleID = 'thttpd.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.throttletab = type { i8*, i64, i64, i64, i64, i32 }
%struct.httpd_server = type { i8*, i8*, i16, i8*, i32, i32, i8*, i8*, i32, i8*, i32, i32, i32, %struct._IO_FILE*, i32, i32, i32, i8*, i8*, i32 }
%struct.connecttab = type { i32, i32, %struct.httpd_conn*, [10 x i32], i32, i64, i64, i64, i64, %struct.TimerStruct*, %struct.TimerStruct*, i64, i64, i64, i64 }
%struct.httpd_conn = type { i32, %struct.httpd_server*, %union.httpd_sockaddr, i8*, i64, i64, i64, i32, i32, i32, i64, i64, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8*, i8*, i32, i32, i32, i32, i64, i64, i32, i32, %struct.stat, i32, i8* }
%union.httpd_sockaddr = type { %struct.sockaddr_storage }
%struct.sockaddr_storage = type { i16, i64, [112 x i8] }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.TimerStruct = type { void (i8*, %struct.timeval*)*, %union.ClientData, i64, i32, %struct.timeval, %struct.TimerStruct*, %struct.TimerStruct*, i32 }
%union.ClientData = type { i8* }
%struct.timeval = type { i64, i64 }
%struct.mime_entry = type { i8*, i64, i8*, i64 }
%struct.pollfd = type { i32, i16, i16 }
%struct.MapStruct = type { i64, i64, i64, i64, i32, i64, i8*, i32, i32, %struct.MapStruct* }
%struct.strlong = type { i8*, i64 }
%struct.passwd = type { i8*, i8*, i32, i32, i8*, i8*, i8* }
%struct.timezone = type { i32, i32 }
%struct.iovec = type { i8*, i64 }
%struct.addrinfo = type { i32, i32, i32, i32, i32, %struct.sockaddr*, i8*, %struct.addrinfo* }
%struct.sockaddr = type { i16, [14 x i8] }
%struct.in6_addr = type { %union.anon }
%union.anon = type { [4 x i32] }
%struct.sockaddr_in6 = type { i16, i16, i32, %struct.in6_addr, i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.__dirstream = type opaque
%struct.dirent = type { i64, i64, i16, i8, [256 x i8] }
%struct.rlimit = type { i64, i64 }

@terminate = internal global i32 0, align 4
@argv0 = internal global i8* null, align 8
@.str = private unnamed_addr constant [29 x i8] c"can't find any valid address\00", align 1
@stderr = external global %struct._IO_FILE*
@.str1 = private unnamed_addr constant [34 x i8] c"%s: can't find any valid address\0A\00", align 1
@numthrottles = internal global i32 0, align 4
@maxthrottles = internal global i32 0, align 4
@throttles = internal global %struct.throttletab* null, align 8
@throttlefile = internal global i8* null, align 8
@user = internal global i8* null, align 8
@.str2 = private unnamed_addr constant [23 x i8] c"unknown user - '%.80s'\00", align 1
@.str3 = private unnamed_addr constant [25 x i8] c"%s: unknown user - '%s'\0A\00", align 1
@logfile = internal global i8* null, align 8
@.str4 = private unnamed_addr constant [10 x i8] c"/dev/null\00", align 1
@no_log = internal global i32 0, align 4
@.str5 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@stdout = external global %struct._IO_FILE*
@.str6 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str7 = private unnamed_addr constant [11 x i8] c"%.80s - %m\00", align 1
@.str8 = private unnamed_addr constant [67 x i8] c"logfile is not an absolute path, you may not be able to re-open it\00", align 1
@.str9 = private unnamed_addr constant [72 x i8] c"%s: logfile is not an absolute path, you may not be able to re-open it\0A\00", align 1
@.str10 = private unnamed_addr constant [20 x i8] c"fchown logfile - %m\00", align 1
@.str11 = private unnamed_addr constant [15 x i8] c"fchown logfile\00", align 1
@dir = internal global i8* null, align 8
@.str12 = private unnamed_addr constant [11 x i8] c"chdir - %m\00", align 1
@.str13 = private unnamed_addr constant [6 x i8] c"chdir\00", align 1
@.str14 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@debug = internal global i32 0, align 4
@stdin = external global %struct._IO_FILE*
@.str15 = private unnamed_addr constant [12 x i8] c"daemon - %m\00", align 1
@pidfile = internal global i8* null, align 8
@.str16 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str17 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@max_connects = internal global i32 0, align 4
@.str18 = private unnamed_addr constant [31 x i8] c"fdwatch initialization failure\00", align 1
@do_chroot = internal global i32 0, align 4
@.str19 = private unnamed_addr constant [12 x i8] c"chroot - %m\00", align 1
@.str20 = private unnamed_addr constant [7 x i8] c"chroot\00", align 1
@.str21 = private unnamed_addr constant [74 x i8] c"logfile is not within the chroot tree, you will not be able to re-open it\00", align 1
@.str22 = private unnamed_addr constant [79 x i8] c"%s: logfile is not within the chroot tree, you will not be able to re-open it\0A\00", align 1
@.str23 = private unnamed_addr constant [18 x i8] c"chroot chdir - %m\00", align 1
@.str24 = private unnamed_addr constant [13 x i8] c"chroot chdir\00", align 1
@data_dir = internal global i8* null, align 8
@.str25 = private unnamed_addr constant [20 x i8] c"data_dir chdir - %m\00", align 1
@.str26 = private unnamed_addr constant [15 x i8] c"data_dir chdir\00", align 1
@got_hup = internal global i32 0, align 4
@got_usr1 = internal global i32 0, align 4
@watchdog_flag = internal global i32 0, align 4
@hostname = internal global i8* null, align 8
@port = internal global i16 0, align 2
@cgi_pattern = internal global i8* null, align 8
@cgi_limit = internal global i32 0, align 4
@charset = internal global i8* null, align 8
@p3p = internal global i8* null, align 8
@max_age = internal global i32 0, align 4
@no_symlink_check = internal global i32 0, align 4
@do_vhost = internal global i32 0, align 4
@do_global_passwd = internal global i32 0, align 4
@url_pattern = internal global i8* null, align 8
@local_pattern = internal global i8* null, align 8
@no_empty_referrers = internal global i32 0, align 4
@hs = internal global %struct.httpd_server* null, align 8
@.str27 = private unnamed_addr constant [30 x i8] c"tmr_create(occasional) failed\00", align 1
@.str28 = private unnamed_addr constant [24 x i8] c"tmr_create(idle) failed\00", align 1
@.str29 = private unnamed_addr constant [36 x i8] c"tmr_create(update_throttles) failed\00", align 1
@.str30 = private unnamed_addr constant [30 x i8] c"tmr_create(show_stats) failed\00", align 1
@stats_time = internal global i64 0, align 8
@start_time = internal global i64 0, align 8
@stats_connections = internal global i64 0, align 8
@stats_bytes = internal global i64 0, align 8
@stats_simultaneous = internal global i32 0, align 4
@.str31 = private unnamed_addr constant [15 x i8] c"setgroups - %m\00", align 1
@.str32 = private unnamed_addr constant [12 x i8] c"setgid - %m\00", align 1
@.str33 = private unnamed_addr constant [16 x i8] c"initgroups - %m\00", align 1
@.str34 = private unnamed_addr constant [12 x i8] c"setuid - %m\00", align 1
@.str35 = private unnamed_addr constant [58 x i8] c"started as root without requesting chroot(), warning only\00", align 1
@connects = internal global %struct.connecttab* null, align 8
@.str36 = private unnamed_addr constant [38 x i8] c"out of memory allocating a connecttab\00", align 1
@first_free_connect = internal global i32 0, align 4
@num_connects = internal global i32 0, align 4
@httpd_conn_count = internal global i32 0, align 4
@.str37 = private unnamed_addr constant [13 x i8] c"fdwatch - %m\00", align 1
@.str38 = private unnamed_addr constant [8 x i8] c"exiting\00", align 1
@.str39 = private unnamed_addr constant [39 x i8] c"up %ld seconds, stats for %ld seconds:\00", align 1
@.str40 = private unnamed_addr constant [104 x i8] c"  thttpd - %ld connections (%g/sec), %d max simultaneous, %lld bytes (%g/sec), %d httpd_conns allocated\00", align 1
@.str41 = private unnamed_addr constant [35 x i8] c"%.80s connection timed out reading\00", align 1
@.str42 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str43 = private unnamed_addr constant [35 x i8] c"%.80s connection timed out sending\00", align 1
@.str44 = private unnamed_addr constant [33 x i8] c"replacing non-null linger_timer!\00", align 1
@.str45 = private unnamed_addr constant [43 x i8] c"tmr_create(linger_clear_connection) failed\00", align 1
@.str46 = private unnamed_addr constant [70 x i8] c"throttle #%d '%.80s' rate %ld greatly exceeding limit %ld; %d sending\00", align 1
@.str47 = private unnamed_addr constant [62 x i8] c"throttle #%d '%.80s' rate %ld exceeding limit %ld; %d sending\00", align 1
@.str48 = private unnamed_addr constant [65 x i8] c"throttle #%d '%.80s' rate %ld lower than minimum %ld; %d sending\00", align 1
@.str49 = private unnamed_addr constant [33 x i8] c"replacing non-null wakeup_timer!\00", align 1
@.str50 = private unnamed_addr constant [37 x i8] c"tmr_create(wakeup_connection) failed\00", align 1
@.str51 = private unnamed_addr constant [25 x i8] c"write - %m sending %.80s\00", align 1
@.str52 = private unnamed_addr constant [56 x i8] c"throttle sending count was negative - shouldn't happen!\00", align 1
@.str53 = private unnamed_addr constant [22 x i8] c"too many connections!\00", align 1
@.str54 = private unnamed_addr constant [36 x i8] c"the connects free list is messed up\00", align 1
@.str55 = private unnamed_addr constant [39 x i8] c"out of memory allocating an httpd_conn\00", align 1
@.str56 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str57 = private unnamed_addr constant [20 x i8] c" %4900[^ \09] %ld-%ld\00", align 1
@.str58 = private unnamed_addr constant [16 x i8] c" %4900[^ \09] %ld\00", align 1
@.str59 = private unnamed_addr constant [33 x i8] c"unparsable line in %.80s - %.80s\00", align 1
@.str60 = private unnamed_addr constant [38 x i8] c"%s: unparsable line in %.80s - %.80s\0A\00", align 1
@.str61 = private unnamed_addr constant [3 x i8] c"|/\00", align 1
@.str62 = private unnamed_addr constant [39 x i8] c"out of memory allocating a throttletab\00", align 1
@.str63 = private unnamed_addr constant [44 x i8] c"%s: out of memory allocating a throttletab\0A\00", align 1
@.str64 = private unnamed_addr constant [31 x i8] c"out of memory copying a string\00", align 1
@.str65 = private unnamed_addr constant [36 x i8] c"%s: out of memory copying a string\0A\00", align 1
@.str66 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str67 = private unnamed_addr constant [26 x i8] c"getaddrinfo %.80s - %.80s\00", align 1
@.str68 = private unnamed_addr constant [25 x i8] c"%s: getaddrinfo %s - %s\0A\00", align 1
@.str69 = private unnamed_addr constant [39 x i8] c"%.80s - sockaddr too small (%lu < %lu)\00", align 1
@.str70 = private unnamed_addr constant [7 x i8] c"nobody\00", align 1
@.str71 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str72 = private unnamed_addr constant [3 x i8] c"-V\00", align 1
@.str73 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str74 = private unnamed_addr constant [22 x i8] c"thttpd/2.27 19Oct2015\00", align 1
@.str75 = private unnamed_addr constant [3 x i8] c"-C\00", align 1
@.str76 = private unnamed_addr constant [3 x i8] c"-p\00", align 1
@.str77 = private unnamed_addr constant [3 x i8] c"-d\00", align 1
@.str78 = private unnamed_addr constant [3 x i8] c"-r\00", align 1
@.str79 = private unnamed_addr constant [5 x i8] c"-nor\00", align 1
@.str80 = private unnamed_addr constant [4 x i8] c"-dd\00", align 1
@.str81 = private unnamed_addr constant [3 x i8] c"-s\00", align 1
@.str82 = private unnamed_addr constant [5 x i8] c"-nos\00", align 1
@.str83 = private unnamed_addr constant [3 x i8] c"-u\00", align 1
@.str84 = private unnamed_addr constant [3 x i8] c"-c\00", align 1
@.str85 = private unnamed_addr constant [3 x i8] c"-t\00", align 1
@.str86 = private unnamed_addr constant [3 x i8] c"-h\00", align 1
@.str87 = private unnamed_addr constant [3 x i8] c"-l\00", align 1
@.str88 = private unnamed_addr constant [3 x i8] c"-v\00", align 1
@.str89 = private unnamed_addr constant [5 x i8] c"-nov\00", align 1
@.str90 = private unnamed_addr constant [3 x i8] c"-g\00", align 1
@.str91 = private unnamed_addr constant [5 x i8] c"-nog\00", align 1
@.str92 = private unnamed_addr constant [3 x i8] c"-i\00", align 1
@.str93 = private unnamed_addr constant [3 x i8] c"-T\00", align 1
@.str94 = private unnamed_addr constant [3 x i8] c"-P\00", align 1
@.str95 = private unnamed_addr constant [3 x i8] c"-M\00", align 1
@.str96 = private unnamed_addr constant [3 x i8] c"-D\00", align 1
@.str97 = private unnamed_addr constant [219 x i8] c"usage:  %s [-C configfile] [-p port] [-d dir] [-r|-nor] [-dd data_dir] [-s|-nos] [-v|-nov] [-g|-nog] [-u user] [-c cgipat] [-t throttles] [-h host] [-l logfile] [-i pidfile] [-T charset] [-P P3P] [-M maxage] [-V] [-D]\0A\00", align 1
@.str98 = private unnamed_addr constant [5 x i8] c" \09\0A\0D\00", align 1
@.str99 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@.str100 = private unnamed_addr constant [5 x i8] c"port\00", align 1
@.str101 = private unnamed_addr constant [4 x i8] c"dir\00", align 1
@.str102 = private unnamed_addr constant [9 x i8] c"nochroot\00", align 1
@.str103 = private unnamed_addr constant [9 x i8] c"data_dir\00", align 1
@.str104 = private unnamed_addr constant [15 x i8] c"nosymlinkcheck\00", align 1
@.str105 = private unnamed_addr constant [13 x i8] c"symlinkcheck\00", align 1
@.str106 = private unnamed_addr constant [5 x i8] c"user\00", align 1
@.str107 = private unnamed_addr constant [7 x i8] c"cgipat\00", align 1
@.str108 = private unnamed_addr constant [9 x i8] c"cgilimit\00", align 1
@.str109 = private unnamed_addr constant [7 x i8] c"urlpat\00", align 1
@.str110 = private unnamed_addr constant [16 x i8] c"noemptyreferers\00", align 1
@.str111 = private unnamed_addr constant [17 x i8] c"noemptyreferrers\00", align 1
@.str112 = private unnamed_addr constant [9 x i8] c"localpat\00", align 1
@.str113 = private unnamed_addr constant [10 x i8] c"throttles\00", align 1
@.str114 = private unnamed_addr constant [5 x i8] c"host\00", align 1
@.str115 = private unnamed_addr constant [8 x i8] c"logfile\00", align 1
@.str116 = private unnamed_addr constant [6 x i8] c"vhost\00", align 1
@.str117 = private unnamed_addr constant [8 x i8] c"novhost\00", align 1
@.str118 = private unnamed_addr constant [13 x i8] c"globalpasswd\00", align 1
@.str119 = private unnamed_addr constant [15 x i8] c"noglobalpasswd\00", align 1
@.str120 = private unnamed_addr constant [8 x i8] c"pidfile\00", align 1
@.str121 = private unnamed_addr constant [8 x i8] c"charset\00", align 1
@.str122 = private unnamed_addr constant [4 x i8] c"p3p\00", align 1
@.str123 = private unnamed_addr constant [8 x i8] c"max_age\00", align 1
@.str124 = private unnamed_addr constant [32 x i8] c"%s: unknown config option '%s'\0A\00", align 1
@.str125 = private unnamed_addr constant [34 x i8] c"%s: value required for %s option\0A\00", align 1
@.str126 = private unnamed_addr constant [37 x i8] c"%s: no value required for %s option\0A\00", align 1
@.str127 = private unnamed_addr constant [19 x i8] c"re-opening logfile\00", align 1
@.str128 = private unnamed_addr constant [22 x i8] c"re-opening %.80s - %m\00", align 1
@.str129 = private unnamed_addr constant [5 x i8] c"/tmp\00", align 1
@.str130 = private unnamed_addr constant [16 x i8] c"child wait - %m\00", align 1
@.str131 = private unnamed_addr constant [25 x i8] c"exiting due to signal %d\00", align 1
@httpd_initialize.ghnbuf = internal global [256 x i8] zeroinitializer, align 16
@.str132 = private unnamed_addr constant [41 x i8] c"out of memory allocating an httpd_server\00", align 1
@.str1133 = private unnamed_addr constant [31 x i8] c"out of memory copying hostname\00", align 1
@.str2134 = private unnamed_addr constant [34 x i8] c"out of memory copying cgi_pattern\00", align 1
@.str3135 = private unnamed_addr constant [3 x i8] c"|/\00", align 1
@.str4136 = private unnamed_addr constant [26 x i8] c"out of memory copying cwd\00", align 1
@.str5137 = private unnamed_addr constant [34 x i8] c"out of memory copying url_pattern\00", align 1
@.str6138 = private unnamed_addr constant [36 x i8] c"out of memory copying local_pattern\00", align 1
@.str7139 = private unnamed_addr constant [26 x i8] c"%.80s starting on port %d\00", align 1
@.str8140 = private unnamed_addr constant [22 x i8] c"thttpd/2.27 19Oct2015\00", align 1
@.str9141 = private unnamed_addr constant [33 x i8] c"%.80s starting on %.80s, port %d\00", align 1
@.str10142 = private unnamed_addr constant [12 x i8] c"Bad Request\00", align 1
@httpd_err400title = internal global i8* getelementptr inbounds ([12 x i8]* @.str10142, i32 0, i32 0), align 8
@.str11145 = private unnamed_addr constant [69 x i8] c"Your request has bad syntax or is inherently impossible to satisfy.\0A\00", align 1
@httpd_err400form = internal global i8* getelementptr inbounds ([69 x i8]* @.str11145, i32 0, i32 0), align 8
@.str12148 = private unnamed_addr constant [16 x i8] c"Request Timeout\00", align 1
@httpd_err408title = internal global i8* getelementptr inbounds ([16 x i8]* @.str12148, i32 0, i32 0), align 8
@.str13151 = private unnamed_addr constant [54 x i8] c"No request appeared within a reasonable time period.\0A\00", align 1
@httpd_err408form = internal global i8* getelementptr inbounds ([54 x i8]* @.str13151, i32 0, i32 0), align 8
@.str14154 = private unnamed_addr constant [31 x i8] c"Service Temporarily Overloaded\00", align 1
@httpd_err503title = internal global i8* getelementptr inbounds ([31 x i8]* @.str14154, i32 0, i32 0), align 8
@.str15157 = private unnamed_addr constant [79 x i8] c"The requested URL '%.80s' is temporarily overloaded.  Please try again later.\0A\00", align 1
@httpd_err503form = internal global i8* getelementptr inbounds ([79 x i8]* @.str15157, i32 0, i32 0), align 8
@sub_process = internal global i32 0, align 4
@str_alloc_count = internal global i32 0, align 4
@str_alloc_size = internal global i64 0, align 8
@.str16160 = private unnamed_addr constant [49 x i8] c"out of memory reallocating a string to %ld bytes\00", align 1
@.str17161 = private unnamed_addr constant [17 x i8] c"%s/%s/err%d.html\00", align 1
@.str18162 = private unnamed_addr constant [7 x i8] c"errors\00", align 1
@.str19163 = private unnamed_addr constant [14 x i8] c"%s/err%d.html\00", align 1
@.str20164 = private unnamed_addr constant [4 x i8] c"GET\00", align 1
@.str21165 = private unnamed_addr constant [5 x i8] c"HEAD\00", align 1
@.str22166 = private unnamed_addr constant [5 x i8] c"POST\00", align 1
@.str23167 = private unnamed_addr constant [8 x i8] c"UNKNOWN\00", align 1
@.str24168 = private unnamed_addr constant [12 x i8] c"accept - %m\00", align 1
@.str25169 = private unnamed_addr constant [24 x i8] c"unknown sockaddr family\00", align 1
@.str26170 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str27171 = private unnamed_addr constant [5 x i8] c" \09\0A\0D\00", align 1
@.str28172 = private unnamed_addr constant [9 x i8] c"HTTP/0.9\00", align 1
@.str29173 = private unnamed_addr constant [9 x i8] c"HTTP/1.0\00", align 1
@.str30174 = private unnamed_addr constant [8 x i8] c"http://\00", align 1
@err501title = internal global i8* getelementptr inbounds ([16 x i8]* @.str534, i32 0, i32 0), align 8
@err501form = internal global i8* getelementptr inbounds ([65 x i8]* @.str533, i32 0, i32 0), align 8
@.str31175 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str32176 = private unnamed_addr constant [9 x i8] c"Referer:\00", align 1
@.str33177 = private unnamed_addr constant [3 x i8] c" \09\00", align 1
@.str34178 = private unnamed_addr constant [10 x i8] c"Referrer:\00", align 1
@.str35179 = private unnamed_addr constant [12 x i8] c"User-Agent:\00", align 1
@.str36180 = private unnamed_addr constant [6 x i8] c"Host:\00", align 1
@.str37181 = private unnamed_addr constant [8 x i8] c"Accept:\00", align 1
@.str38182 = private unnamed_addr constant [32 x i8] c"%.80s way too much Accept: data\00", align 1
@.str39183 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str40184 = private unnamed_addr constant [17 x i8] c"Accept-Encoding:\00", align 1
@.str41185 = private unnamed_addr constant [41 x i8] c"%.80s way too much Accept-Encoding: data\00", align 1
@.str42186 = private unnamed_addr constant [17 x i8] c"Accept-Language:\00", align 1
@.str43187 = private unnamed_addr constant [19 x i8] c"If-Modified-Since:\00", align 1
@.str44188 = private unnamed_addr constant [23 x i8] c"unparsable time: %.80s\00", align 1
@.str45189 = private unnamed_addr constant [8 x i8] c"Cookie:\00", align 1
@.str46190 = private unnamed_addr constant [7 x i8] c"Range:\00", align 1
@.str47191 = private unnamed_addr constant [2 x i8] c"=\00", align 1
@.str48192 = private unnamed_addr constant [10 x i8] c"Range-If:\00", align 1
@.str49193 = private unnamed_addr constant [10 x i8] c"If-Range:\00", align 1
@.str50194 = private unnamed_addr constant [14 x i8] c"Content-Type:\00", align 1
@.str51195 = private unnamed_addr constant [16 x i8] c"Content-Length:\00", align 1
@.str52196 = private unnamed_addr constant [15 x i8] c"Authorization:\00", align 1
@.str53197 = private unnamed_addr constant [12 x i8] c"Connection:\00", align 1
@.str54198 = private unnamed_addr constant [11 x i8] c"keep-alive\00", align 1
@err500title = internal global i8* getelementptr inbounds ([15 x i8]* @.str531, i32 0, i32 0), align 8
@err500form = internal global i8* getelementptr inbounds ([65 x i8]* @.str530, i32 0, i32 0), align 8
@.str55199 = private unnamed_addr constant [44 x i8] c"%.80s URL \22%.80s\22 goes outside the web tree\00", align 1
@err403title = internal global i8* getelementptr inbounds ([10 x i8]* @.str526, i32 0, i32 0), align 8
@.str56200 = private unnamed_addr constant [95 x i8] c"The requested URL '%.80s' resolves to a file outside the permitted web server directory tree.\0A\00", align 1
@httpd_ntoa.str = internal global [200 x i8] zeroinitializer, align 16
@.str57201 = private unnamed_addr constant [8 x i8] c"::ffff:\00", align 1
@.str58202 = private unnamed_addr constant [60 x i8] c"  libhttpd - %d strings allocated, %lu bytes (%g bytes/str)\00", align 1
@.str59203 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str60204 = private unnamed_addr constant [14 x i8] c"/%.100s%.200s\00", align 1
@.str61205 = private unnamed_addr constant [7 x i8] c"%.200s\00", align 1
@.str62206 = private unnamed_addr constant [5 x i8] c"%lld\00", align 1
@.str63207 = private unnamed_addr constant [18 x i8] c"%d/%b/%Y:%H:%M:%S\00", align 1
@.str64208 = private unnamed_addr constant [10 x i8] c"%s %c%04d\00", align 1
@.str65209 = private unnamed_addr constant [65 x i8] c"%.80s - %.80s [%s] \22%.80s %.300s %.80s\22 %d %s \22%.200s\22 \22%.200s\22\0A\00", align 1
@.str66210 = private unnamed_addr constant [59 x i8] c"%.80s - %.80s \22%.80s %.200s %.80s\22 %d %s \22%.200s\22 \22%.200s\22\00", align 1
@really_start_request.indexname = internal global i8* null, align 8
@really_start_request.maxindexname = internal global i64 0, align 8
@really_start_request.index_names = internal global [6 x i8*] [i8* getelementptr inbounds ([11 x i8]* @.str67211, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str68212, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str69213, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str70214, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str71215, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str72216, i32 0, i32 0)], align 16
@.str67211 = private unnamed_addr constant [11 x i8] c"index.html\00", align 1
@.str68212 = private unnamed_addr constant [10 x i8] c"index.htm\00", align 1
@.str69213 = private unnamed_addr constant [12 x i8] c"index.xhtml\00", align 1
@.str70214 = private unnamed_addr constant [10 x i8] c"index.xht\00", align 1
@.str71215 = private unnamed_addr constant [12 x i8] c"Default.htm\00", align 1
@.str72216 = private unnamed_addr constant [10 x i8] c"index.cgi\00", align 1
@really_start_request.dirname = internal global i8* null, align 8
@really_start_request.maxdirname = internal global i64 0, align 8
@.str73217 = private unnamed_addr constant [56 x i8] c"%.80s URL \22%.80s\22 resolves to a non world-readable file\00", align 1
@.str74218 = private unnamed_addr constant [74 x i8] c"The requested URL '%.80s' resolves to a file that is not world-readable.\0A\00", align 1
@err404title = internal global i8* getelementptr inbounds ([10 x i8]* @.str521, i32 0, i32 0), align 8
@err404form = internal global i8* getelementptr inbounds ([57 x i8]* @.str520, i32 0, i32 0), align 8
@.str75219 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str76220 = private unnamed_addr constant [3 x i8] c"./\00", align 1
@.str77221 = private unnamed_addr constant [68 x i8] c"%.80s URL \22%.80s\22 tried to index a directory with indexing disabled\00", align 1
@.str78222 = private unnamed_addr constant [79 x i8] c"The requested URL '%.80s' resolves to a directory that has indexing disabled.\0A\00", align 1
@.str79223 = private unnamed_addr constant [62 x i8] c"%.80s URL \22%.80s\22 resolves to a non-world-readable index file\00", align 1
@.str80224 = private unnamed_addr constant [81 x i8] c"The requested URL '%.80s' resolves to an index file that is not world-readable.\0A\00", align 1
@.str81225 = private unnamed_addr constant [10 x i8] c".htpasswd\00", align 1
@.str82226 = private unnamed_addr constant [49 x i8] c"%.80s URL \22%.80s\22 tried to retrieve an auth file\00", align 1
@.str83227 = private unnamed_addr constant [85 x i8] c"The requested URL '%.80s' is an authorization file, retrieving it is not permitted.\0A\00", align 1
@.str84228 = private unnamed_addr constant [46 x i8] c"%.80s URL \22%.80s\22 is executable but isn't CGI\00", align 1
@.str85229 = private unnamed_addr constant [124 x i8] c"The requested URL '%.80s' resolves to a file which is marked executable but is not a CGI file; retrieving it is forbidden.\0A\00", align 1
@.str86230 = private unnamed_addr constant [45 x i8] c"%.80s URL \22%.80s\22 has pathinfo but isn't CGI\00", align 1
@.str87231 = private unnamed_addr constant [109 x i8] c"The requested URL '%.80s' resolves to a file plus CGI-style pathinfo, but the file is not a valid CGI file.\0A\00", align 1
@ok200title = internal global i8* getelementptr inbounds ([3 x i8]* @.str89233, i32 0, i32 0), align 8
@err304title = internal global i8* getelementptr inbounds ([13 x i8]* @.str88232, i32 0, i32 0), align 8
@.str88232 = private unnamed_addr constant [13 x i8] c"Not Modified\00", align 1
@.str89233 = private unnamed_addr constant [3 x i8] c"OK\00", align 1
@.str90234 = private unnamed_addr constant [26 x i8] c"%a, %d %b %Y %H:%M:%S GMT\00", align 1
@ok206title = internal global i8* getelementptr inbounds ([16 x i8]* @.str99243, i32 0, i32 0), align 8
@.str91235 = private unnamed_addr constant [114 x i8] c"%.20s %d %s\0D\0AServer: %s\0D\0AContent-Type: %s\0D\0ADate: %s\0D\0ALast-Modified: %s\0D\0AAccept-Ranges: bytes\0D\0AConnection: close\0D\0A\00", align 1
@.str92236 = private unnamed_addr constant [35 x i8] c"Cache-Control: no-cache,no-store\0D\0A\00", align 1
@.str93237 = private unnamed_addr constant [23 x i8] c"Content-Encoding: %s\0D\0A\00", align 1
@.str94238 = private unnamed_addr constant [60 x i8] c"Content-Range: bytes %lld-%lld/%lld\0D\0AContent-Length: %lld\0D\0A\00", align 1
@.str95239 = private unnamed_addr constant [23 x i8] c"Content-Length: %lld\0D\0A\00", align 1
@.str96240 = private unnamed_addr constant [10 x i8] c"P3P: %s\0D\0A\00", align 1
@.str97241 = private unnamed_addr constant [41 x i8] c"Cache-Control: max-age=%d\0D\0AExpires: %s\0D\0A\00", align 1
@.str98242 = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@.str99243 = private unnamed_addr constant [16 x i8] c"Partial Content\00", align 1
@.str100244 = private unnamed_addr constant [23 x i8] c"text/plain; charset=%s\00", align 1
@enc_tab = internal global [3 x %struct.mime_entry] [%struct.mime_entry { i8* getelementptr inbounds ([2 x i8]* @.str430, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([9 x i8]* @.str431, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8]* @.str432, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([5 x i8]* @.str433, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8]* @.str434, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8]* @.str435, i32 0, i32 0), i64 0 }], align 16
@typ_tab = internal global [193 x %struct.mime_entry] [%struct.mime_entry { i8* getelementptr inbounds ([2 x i8]* @.str102246, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8]* @.str103247, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str104248, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([29 x i8]* @.str105249, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str106250, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([29 x i8]* @.str107251, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str108252, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([29 x i8]* @.str109253, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8]* @.str110254, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8]* @.str111255, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str112256, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([13 x i8]* @.str113257, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str114258, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([13 x i8]* @.str113257, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str115259, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([13 x i8]* @.str113257, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str116260, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8]* @.str100244, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str117261, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([15 x i8]* @.str118262, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str119263, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([15 x i8]* @.str118262, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8]* @.str120264, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([12 x i8]* @.str121265, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str122266, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([16 x i8]* @.str123267, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([6 x i8]* @.str124268, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([20 x i8]* @.str125269, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str126270, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8]* @.str103247, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str127271, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([10 x i8]* @.str128272, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str129273, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([21 x i8]* @.str130274, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([6 x i8]* @.str131275, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([22 x i8]* @.str132276, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str133, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([19 x i8]* @.str134, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str135, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([27 x i8]* @.str136, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str137, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([24 x i8]* @.str138, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str139, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([27 x i8]* @.str140, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str141, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([18 x i8]* @.str142, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str143, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([21 x i8]* @.str144, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str145, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8]* @.str146, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str147, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8]* @.str146, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str148, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([15 x i8]* @.str149, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str150, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([15 x i8]* @.str149, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str151, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8]* @.str103247, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str152, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8]* @.str103247, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str153, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([19 x i8]* @.str154, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str155, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([21 x i8]* @.str156, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str157, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8]* @.str103247, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str158, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([18 x i8]* @.str159, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str160, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8]* @.str146, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str161, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8]* @.str111255, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str162, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([14 x i8]* @.str163, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str164, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8]* @.str103247, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8]* @.str165, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8]* @.str166, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str167, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8]* @.str146, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8]* @.str168, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([17 x i8]* @.str169, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str170, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([17 x i8]* @.str169, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str171, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([17 x i8]* @.str169, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str172, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([17 x i8]* @.str169, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str173, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([17 x i8]* @.str169, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str174, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([10 x i8]* @.str175, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str176, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([19 x i8]* @.str177, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str178, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([18 x i8]* @.str179, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str180, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8]* @.str181, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str182, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([22 x i8]* @.str183, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str184, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([22 x i8]* @.str183, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str185, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([24 x i8]* @.str186, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str187, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([10 x i8]* @.str188, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str189, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8]* @.str190, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str191, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8]* @.str190, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8]* @.str192, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8]* @.str193, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str194, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([27 x i8]* @.str195, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str196, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8]* @.str197, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str198, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8]* @.str197, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str199, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8]* @.str197, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str200, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8]* @.str197, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8]* @.str201, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8]* @.str202, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str203, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8]* @.str204, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str205, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([37 x i8]* @.str206, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str207, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([33 x i8]* @.str208, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([6 x i8]* @.str209, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([20 x i8]* @.str210, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str211, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8]* @.str103247, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str212, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([20 x i8]* @.str213, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str214, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8]* @.str103247, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str215, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([16 x i8]* @.str216, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str217, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([24 x i8]* @.str218, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([7 x i8]* @.str219, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8]* @.str220, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8]* @.str221, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8]* @.str222, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str223, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8]* @.str224, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str225, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8]* @.str204, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str226, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8]* @.str204, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str227, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([20 x i8]* @.str228, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str229, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([15 x i8]* @.str230, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str231, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8]* @.str220, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str232, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([16 x i8]* @.str233, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([6 x i8]* @.str234, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([18 x i8]* @.str235, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str236, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8]* @.str237, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str238, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8]* @.str237, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str239, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([10 x i8]* @.str240, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str241, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8]* @.str242, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str243, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8]* @.str242, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str244, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8]* @.str242, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str245, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8]* @.str237, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8]* @.str246, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8]* @.str247, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str248, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8]* @.str224, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8]* @.str249, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([18 x i8]* @.str235, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str250, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([18 x i8]* @.str251, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8]* @.str252, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([21 x i8]* @.str130274, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([2 x i8]* @.str253, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8]* @.str103247, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str254, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([16 x i8]* @.str255, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str256, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([16 x i8]* @.str257, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str258, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([34 x i8]* @.str259, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str260, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([24 x i8]* @.str261, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str262, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([15 x i8]* @.str263, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str264, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([16 x i8]* @.str265, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str266, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8]* @.str267, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str268, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([24 x i8]* @.str269, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str270, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([10 x i8]* @.str271, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str272, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([24 x i8]* @.str273, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str274, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([24 x i8]* @.str275, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str276, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([30 x i8]* @.str277, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8]* @.str278, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8]* @.str111255, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8]* @.str279, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([16 x i8]* @.str233, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8]* @.str280, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([18 x i8]* @.str281, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str282, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([21 x i8]* @.str283, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str284, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([19 x i8]* @.str285, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str286, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([20 x i8]* @.str287, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str288, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([12 x i8]* @.str289, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8]* @.str290, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([21 x i8]* @.str283, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str291, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([20 x i8]* @.str292, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str293, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([28 x i8]* @.str294, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str295, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([20 x i8]* @.str296, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str297, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([21 x i8]* @.str298, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str299, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([26 x i8]* @.str300, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str301, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([22 x i8]* @.str302, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str303, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([22 x i8]* @.str302, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8]* @.str304, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([17 x i8]* @.str305, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str306, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([19 x i8]* @.str307, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str308, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8]* @.str224, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str309, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([22 x i8]* @.str310, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str311, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([19 x i8]* @.str312, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str313, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([19 x i8]* @.str312, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str314, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([19 x i8]* @.str312, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str315, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([19 x i8]* @.str312, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str316, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([17 x i8]* @.str317, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str318, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([17 x i8]* @.str317, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str319, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([12 x i8]* @.str121265, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8]* @.str320, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8]* @.str103247, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str321, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([27 x i8]* @.str322, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str323, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([26 x i8]* @.str324, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str325, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([38 x i8]* @.str326, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str327, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([38 x i8]* @.str328, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str329, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([41 x i8]* @.str330, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str331, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([40 x i8]* @.str332, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([8 x i8]* @.str333, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([22 x i8]* @.str334, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([7 x i8]* @.str335, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([21 x i8]* @.str336, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str337, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([14 x i8]* @.str338, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str339, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([14 x i8]* @.str338, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str340, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([30 x i8]* @.str341, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str342, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([29 x i8]* @.str343, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str344, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([29 x i8]* @.str345, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str346, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([38 x i8]* @.str347, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str348, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([32 x i8]* @.str349, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str350, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([29 x i8]* @.str351, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str352, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([31 x i8]* @.str353, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([2 x i8]* @.str354, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([20 x i8]* @.str292, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str355, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([18 x i8]* @.str356, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str357, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([18 x i8]* @.str358, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str359, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([18 x i8]* @.str360, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str361, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([22 x i8]* @.str362, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([8 x i8]* @.str363, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([22 x i8]* @.str362, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str364, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8]* @.str365, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str366, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8]* @.str365, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8]* @.str367, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([20 x i8]* @.str292, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str368, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([20 x i8]* @.str369, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str370, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([38 x i8]* @.str371, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str372, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8]* @.str100244, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([6 x i8]* @.str373, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([20 x i8]* @.str374, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str375, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([21 x i8]* @.str376, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str377, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8]* @.str378, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8]* @.str379, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8]* @.str380, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str381, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([12 x i8]* @.str382, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str383, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([15 x i8]* @.str384, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str385, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([19 x i8]* @.str386, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([6 x i8]* @.str387, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([26 x i8]* @.str388, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8]* @.str389, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([14 x i8]* @.str390, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str391, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([15 x i8]* @.str392, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str393, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([21 x i8]* @.str394, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str395, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([17 x i8]* @.str396, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str397, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8]* @.str398, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str399, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8]* @.str400, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([6 x i8]* @.str401, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([31 x i8]* @.str402, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str403, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([15 x i8]* @.str404, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str405, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([15 x i8]* @.str406, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str407, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([21 x i8]* @.str408, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str409, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8]* @.str378, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8]* @.str410, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([26 x i8]* @.str324, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str411, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([15 x i8]* @.str412, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str413, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([16 x i8]* @.str414, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str415, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([34 x i8]* @.str416, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([6 x i8]* @.str417, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([34 x i8]* @.str416, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str418, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8]* @.str419, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str420, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([21 x i8]* @.str156, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str421, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([16 x i8]* @.str422, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str423, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([21 x i8]* @.str156, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str424, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([20 x i8]* @.str425, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str426, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([15 x i8]* @.str427, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8]* @.str428, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([16 x i8]* @.str429, i32 0, i32 0), i64 0 }], align 16
@.str101245 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str102246 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str103247 = private unnamed_addr constant [25 x i8] c"application/octet-stream\00", align 1
@.str104248 = private unnamed_addr constant [4 x i8] c"aab\00", align 1
@.str105249 = private unnamed_addr constant [29 x i8] c"application/x-authorware-bin\00", align 1
@.str106250 = private unnamed_addr constant [4 x i8] c"aam\00", align 1
@.str107251 = private unnamed_addr constant [29 x i8] c"application/x-authorware-map\00", align 1
@.str108252 = private unnamed_addr constant [4 x i8] c"aas\00", align 1
@.str109253 = private unnamed_addr constant [29 x i8] c"application/x-authorware-seg\00", align 1
@.str110254 = private unnamed_addr constant [3 x i8] c"ai\00", align 1
@.str111255 = private unnamed_addr constant [23 x i8] c"application/postscript\00", align 1
@.str112256 = private unnamed_addr constant [4 x i8] c"aif\00", align 1
@.str113257 = private unnamed_addr constant [13 x i8] c"audio/x-aiff\00", align 1
@.str114258 = private unnamed_addr constant [5 x i8] c"aifc\00", align 1
@.str115259 = private unnamed_addr constant [5 x i8] c"aiff\00", align 1
@.str116260 = private unnamed_addr constant [4 x i8] c"asc\00", align 1
@.str117261 = private unnamed_addr constant [4 x i8] c"asf\00", align 1
@.str118262 = private unnamed_addr constant [15 x i8] c"video/x-ms-asf\00", align 1
@.str119263 = private unnamed_addr constant [4 x i8] c"asx\00", align 1
@.str120264 = private unnamed_addr constant [3 x i8] c"au\00", align 1
@.str121265 = private unnamed_addr constant [12 x i8] c"audio/basic\00", align 1
@.str122266 = private unnamed_addr constant [4 x i8] c"avi\00", align 1
@.str123267 = private unnamed_addr constant [16 x i8] c"video/x-msvideo\00", align 1
@.str124268 = private unnamed_addr constant [6 x i8] c"bcpio\00", align 1
@.str125269 = private unnamed_addr constant [20 x i8] c"application/x-bcpio\00", align 1
@.str126270 = private unnamed_addr constant [4 x i8] c"bin\00", align 1
@.str127271 = private unnamed_addr constant [4 x i8] c"bmp\00", align 1
@.str128272 = private unnamed_addr constant [10 x i8] c"image/bmp\00", align 1
@.str129273 = private unnamed_addr constant [4 x i8] c"cdf\00", align 1
@.str130274 = private unnamed_addr constant [21 x i8] c"application/x-netcdf\00", align 1
@.str131275 = private unnamed_addr constant [6 x i8] c"class\00", align 1
@.str132276 = private unnamed_addr constant [22 x i8] c"application/x-java-vm\00", align 1
@.str133 = private unnamed_addr constant [5 x i8] c"cpio\00", align 1
@.str134 = private unnamed_addr constant [19 x i8] c"application/x-cpio\00", align 1
@.str135 = private unnamed_addr constant [4 x i8] c"cpt\00", align 1
@.str136 = private unnamed_addr constant [27 x i8] c"application/mac-compactpro\00", align 1
@.str137 = private unnamed_addr constant [4 x i8] c"crl\00", align 1
@.str138 = private unnamed_addr constant [24 x i8] c"application/x-pkcs7-crl\00", align 1
@.str139 = private unnamed_addr constant [4 x i8] c"crt\00", align 1
@.str140 = private unnamed_addr constant [27 x i8] c"application/x-x509-ca-cert\00", align 1
@.str141 = private unnamed_addr constant [4 x i8] c"csh\00", align 1
@.str142 = private unnamed_addr constant [18 x i8] c"application/x-csh\00", align 1
@.str143 = private unnamed_addr constant [4 x i8] c"css\00", align 1
@.str144 = private unnamed_addr constant [21 x i8] c"text/css; charset=%s\00", align 1
@.str145 = private unnamed_addr constant [4 x i8] c"dcr\00", align 1
@.str146 = private unnamed_addr constant [23 x i8] c"application/x-director\00", align 1
@.str147 = private unnamed_addr constant [4 x i8] c"dir\00", align 1
@.str148 = private unnamed_addr constant [4 x i8] c"djv\00", align 1
@.str149 = private unnamed_addr constant [15 x i8] c"image/vnd.djvu\00", align 1
@.str150 = private unnamed_addr constant [5 x i8] c"djvu\00", align 1
@.str151 = private unnamed_addr constant [4 x i8] c"dll\00", align 1
@.str152 = private unnamed_addr constant [4 x i8] c"dms\00", align 1
@.str153 = private unnamed_addr constant [4 x i8] c"doc\00", align 1
@.str154 = private unnamed_addr constant [19 x i8] c"application/msword\00", align 1
@.str155 = private unnamed_addr constant [4 x i8] c"dtd\00", align 1
@.str156 = private unnamed_addr constant [21 x i8] c"text/xml; charset=%s\00", align 1
@.str157 = private unnamed_addr constant [5 x i8] c"dump\00", align 1
@.str158 = private unnamed_addr constant [4 x i8] c"dvi\00", align 1
@.str159 = private unnamed_addr constant [18 x i8] c"application/x-dvi\00", align 1
@.str160 = private unnamed_addr constant [4 x i8] c"dxr\00", align 1
@.str161 = private unnamed_addr constant [4 x i8] c"eps\00", align 1
@.str162 = private unnamed_addr constant [4 x i8] c"etx\00", align 1
@.str163 = private unnamed_addr constant [14 x i8] c"text/x-setext\00", align 1
@.str164 = private unnamed_addr constant [4 x i8] c"exe\00", align 1
@.str165 = private unnamed_addr constant [3 x i8] c"ez\00", align 1
@.str166 = private unnamed_addr constant [25 x i8] c"application/andrew-inset\00", align 1
@.str167 = private unnamed_addr constant [4 x i8] c"fgd\00", align 1
@.str168 = private unnamed_addr constant [3 x i8] c"fh\00", align 1
@.str169 = private unnamed_addr constant [17 x i8] c"image/x-freehand\00", align 1
@.str170 = private unnamed_addr constant [4 x i8] c"fh4\00", align 1
@.str171 = private unnamed_addr constant [4 x i8] c"fh5\00", align 1
@.str172 = private unnamed_addr constant [4 x i8] c"fh7\00", align 1
@.str173 = private unnamed_addr constant [4 x i8] c"fhc\00", align 1
@.str174 = private unnamed_addr constant [4 x i8] c"gif\00", align 1
@.str175 = private unnamed_addr constant [10 x i8] c"image/gif\00", align 1
@.str176 = private unnamed_addr constant [5 x i8] c"gtar\00", align 1
@.str177 = private unnamed_addr constant [19 x i8] c"application/x-gtar\00", align 1
@.str178 = private unnamed_addr constant [4 x i8] c"hdf\00", align 1
@.str179 = private unnamed_addr constant [18 x i8] c"application/x-hdf\00", align 1
@.str180 = private unnamed_addr constant [4 x i8] c"hqx\00", align 1
@.str181 = private unnamed_addr constant [25 x i8] c"application/mac-binhex40\00", align 1
@.str182 = private unnamed_addr constant [4 x i8] c"htm\00", align 1
@.str183 = private unnamed_addr constant [22 x i8] c"text/html; charset=%s\00", align 1
@.str184 = private unnamed_addr constant [5 x i8] c"html\00", align 1
@.str185 = private unnamed_addr constant [4 x i8] c"ice\00", align 1
@.str186 = private unnamed_addr constant [24 x i8] c"x-conference/x-cooltalk\00", align 1
@.str187 = private unnamed_addr constant [4 x i8] c"ief\00", align 1
@.str188 = private unnamed_addr constant [10 x i8] c"image/ief\00", align 1
@.str189 = private unnamed_addr constant [5 x i8] c"iges\00", align 1
@.str190 = private unnamed_addr constant [11 x i8] c"model/iges\00", align 1
@.str191 = private unnamed_addr constant [4 x i8] c"igs\00", align 1
@.str192 = private unnamed_addr constant [3 x i8] c"iv\00", align 1
@.str193 = private unnamed_addr constant [23 x i8] c"application/x-inventor\00", align 1
@.str194 = private unnamed_addr constant [4 x i8] c"jar\00", align 1
@.str195 = private unnamed_addr constant [27 x i8] c"application/x-java-archive\00", align 1
@.str196 = private unnamed_addr constant [5 x i8] c"jfif\00", align 1
@.str197 = private unnamed_addr constant [11 x i8] c"image/jpeg\00", align 1
@.str198 = private unnamed_addr constant [4 x i8] c"jpe\00", align 1
@.str199 = private unnamed_addr constant [5 x i8] c"jpeg\00", align 1
@.str200 = private unnamed_addr constant [4 x i8] c"jpg\00", align 1
@.str201 = private unnamed_addr constant [3 x i8] c"js\00", align 1
@.str202 = private unnamed_addr constant [25 x i8] c"application/x-javascript\00", align 1
@.str203 = private unnamed_addr constant [4 x i8] c"kar\00", align 1
@.str204 = private unnamed_addr constant [11 x i8] c"audio/midi\00", align 1
@.str205 = private unnamed_addr constant [4 x i8] c"kml\00", align 1
@.str206 = private unnamed_addr constant [37 x i8] c"application/vnd.google-earth.kml+xml\00", align 1
@.str207 = private unnamed_addr constant [4 x i8] c"kmz\00", align 1
@.str208 = private unnamed_addr constant [33 x i8] c"application/vnd.google-earth.kmz\00", align 1
@.str209 = private unnamed_addr constant [6 x i8] c"latex\00", align 1
@.str210 = private unnamed_addr constant [20 x i8] c"application/x-latex\00", align 1
@.str211 = private unnamed_addr constant [4 x i8] c"lha\00", align 1
@.str212 = private unnamed_addr constant [4 x i8] c"loc\00", align 1
@.str213 = private unnamed_addr constant [20 x i8] c"application/xml-loc\00", align 1
@.str214 = private unnamed_addr constant [4 x i8] c"lzh\00", align 1
@.str215 = private unnamed_addr constant [4 x i8] c"m3u\00", align 1
@.str216 = private unnamed_addr constant [16 x i8] c"audio/x-mpegurl\00", align 1
@.str217 = private unnamed_addr constant [4 x i8] c"man\00", align 1
@.str218 = private unnamed_addr constant [24 x i8] c"application/x-troff-man\00", align 1
@.str219 = private unnamed_addr constant [7 x i8] c"mathml\00", align 1
@.str220 = private unnamed_addr constant [23 x i8] c"application/mathml+xml\00", align 1
@.str221 = private unnamed_addr constant [3 x i8] c"me\00", align 1
@.str222 = private unnamed_addr constant [23 x i8] c"application/x-troff-me\00", align 1
@.str223 = private unnamed_addr constant [5 x i8] c"mesh\00", align 1
@.str224 = private unnamed_addr constant [11 x i8] c"model/mesh\00", align 1
@.str225 = private unnamed_addr constant [4 x i8] c"mid\00", align 1
@.str226 = private unnamed_addr constant [5 x i8] c"midi\00", align 1
@.str227 = private unnamed_addr constant [4 x i8] c"mif\00", align 1
@.str228 = private unnamed_addr constant [20 x i8] c"application/vnd.mif\00", align 1
@.str229 = private unnamed_addr constant [5 x i8] c"mime\00", align 1
@.str230 = private unnamed_addr constant [15 x i8] c"message/rfc822\00", align 1
@.str231 = private unnamed_addr constant [4 x i8] c"mml\00", align 1
@.str232 = private unnamed_addr constant [4 x i8] c"mov\00", align 1
@.str233 = private unnamed_addr constant [16 x i8] c"video/quicktime\00", align 1
@.str234 = private unnamed_addr constant [6 x i8] c"movie\00", align 1
@.str235 = private unnamed_addr constant [18 x i8] c"video/x-sgi-movie\00", align 1
@.str236 = private unnamed_addr constant [4 x i8] c"mp2\00", align 1
@.str237 = private unnamed_addr constant [11 x i8] c"audio/mpeg\00", align 1
@.str238 = private unnamed_addr constant [4 x i8] c"mp3\00", align 1
@.str239 = private unnamed_addr constant [4 x i8] c"mp4\00", align 1
@.str240 = private unnamed_addr constant [10 x i8] c"video/mp4\00", align 1
@.str241 = private unnamed_addr constant [4 x i8] c"mpe\00", align 1
@.str242 = private unnamed_addr constant [11 x i8] c"video/mpeg\00", align 1
@.str243 = private unnamed_addr constant [5 x i8] c"mpeg\00", align 1
@.str244 = private unnamed_addr constant [4 x i8] c"mpg\00", align 1
@.str245 = private unnamed_addr constant [5 x i8] c"mpga\00", align 1
@.str246 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str247 = private unnamed_addr constant [23 x i8] c"application/x-troff-ms\00", align 1
@.str248 = private unnamed_addr constant [4 x i8] c"msh\00", align 1
@.str249 = private unnamed_addr constant [3 x i8] c"mv\00", align 1
@.str250 = private unnamed_addr constant [4 x i8] c"mxu\00", align 1
@.str251 = private unnamed_addr constant [18 x i8] c"video/vnd.mpegurl\00", align 1
@.str252 = private unnamed_addr constant [3 x i8] c"nc\00", align 1
@.str253 = private unnamed_addr constant [2 x i8] c"o\00", align 1
@.str254 = private unnamed_addr constant [4 x i8] c"oda\00", align 1
@.str255 = private unnamed_addr constant [16 x i8] c"application/oda\00", align 1
@.str256 = private unnamed_addr constant [4 x i8] c"ogg\00", align 1
@.str257 = private unnamed_addr constant [16 x i8] c"application/ogg\00", align 1
@.str258 = private unnamed_addr constant [4 x i8] c"pac\00", align 1
@.str259 = private unnamed_addr constant [34 x i8] c"application/x-ns-proxy-autoconfig\00", align 1
@.str260 = private unnamed_addr constant [4 x i8] c"pbm\00", align 1
@.str261 = private unnamed_addr constant [24 x i8] c"image/x-portable-bitmap\00", align 1
@.str262 = private unnamed_addr constant [4 x i8] c"pdb\00", align 1
@.str263 = private unnamed_addr constant [15 x i8] c"chemical/x-pdb\00", align 1
@.str264 = private unnamed_addr constant [4 x i8] c"pdf\00", align 1
@.str265 = private unnamed_addr constant [16 x i8] c"application/pdf\00", align 1
@.str266 = private unnamed_addr constant [4 x i8] c"pgm\00", align 1
@.str267 = private unnamed_addr constant [25 x i8] c"image/x-portable-graymap\00", align 1
@.str268 = private unnamed_addr constant [4 x i8] c"pgn\00", align 1
@.str269 = private unnamed_addr constant [24 x i8] c"application/x-chess-pgn\00", align 1
@.str270 = private unnamed_addr constant [4 x i8] c"png\00", align 1
@.str271 = private unnamed_addr constant [10 x i8] c"image/png\00", align 1
@.str272 = private unnamed_addr constant [4 x i8] c"pnm\00", align 1
@.str273 = private unnamed_addr constant [24 x i8] c"image/x-portable-anymap\00", align 1
@.str274 = private unnamed_addr constant [4 x i8] c"ppm\00", align 1
@.str275 = private unnamed_addr constant [24 x i8] c"image/x-portable-pixmap\00", align 1
@.str276 = private unnamed_addr constant [4 x i8] c"ppt\00", align 1
@.str277 = private unnamed_addr constant [30 x i8] c"application/vnd.ms-powerpoint\00", align 1
@.str278 = private unnamed_addr constant [3 x i8] c"ps\00", align 1
@.str279 = private unnamed_addr constant [3 x i8] c"qt\00", align 1
@.str280 = private unnamed_addr constant [3 x i8] c"ra\00", align 1
@.str281 = private unnamed_addr constant [18 x i8] c"audio/x-realaudio\00", align 1
@.str282 = private unnamed_addr constant [4 x i8] c"ram\00", align 1
@.str283 = private unnamed_addr constant [21 x i8] c"audio/x-pn-realaudio\00", align 1
@.str284 = private unnamed_addr constant [4 x i8] c"ras\00", align 1
@.str285 = private unnamed_addr constant [19 x i8] c"image/x-cmu-raster\00", align 1
@.str286 = private unnamed_addr constant [4 x i8] c"rdf\00", align 1
@.str287 = private unnamed_addr constant [20 x i8] c"application/rdf+xml\00", align 1
@.str288 = private unnamed_addr constant [4 x i8] c"rgb\00", align 1
@.str289 = private unnamed_addr constant [12 x i8] c"image/x-rgb\00", align 1
@.str290 = private unnamed_addr constant [3 x i8] c"rm\00", align 1
@.str291 = private unnamed_addr constant [5 x i8] c"roff\00", align 1
@.str292 = private unnamed_addr constant [20 x i8] c"application/x-troff\00", align 1
@.str293 = private unnamed_addr constant [4 x i8] c"rpm\00", align 1
@.str294 = private unnamed_addr constant [28 x i8] c"audio/x-pn-realaudio-plugin\00", align 1
@.str295 = private unnamed_addr constant [4 x i8] c"rss\00", align 1
@.str296 = private unnamed_addr constant [20 x i8] c"application/rss+xml\00", align 1
@.str297 = private unnamed_addr constant [4 x i8] c"rtf\00", align 1
@.str298 = private unnamed_addr constant [21 x i8] c"text/rtf; charset=%s\00", align 1
@.str299 = private unnamed_addr constant [4 x i8] c"rtx\00", align 1
@.str300 = private unnamed_addr constant [26 x i8] c"text/richtext; charset=%s\00", align 1
@.str301 = private unnamed_addr constant [4 x i8] c"sgm\00", align 1
@.str302 = private unnamed_addr constant [22 x i8] c"text/sgml; charset=%s\00", align 1
@.str303 = private unnamed_addr constant [5 x i8] c"sgml\00", align 1
@.str304 = private unnamed_addr constant [3 x i8] c"sh\00", align 1
@.str305 = private unnamed_addr constant [17 x i8] c"application/x-sh\00", align 1
@.str306 = private unnamed_addr constant [5 x i8] c"shar\00", align 1
@.str307 = private unnamed_addr constant [19 x i8] c"application/x-shar\00", align 1
@.str308 = private unnamed_addr constant [5 x i8] c"silo\00", align 1
@.str309 = private unnamed_addr constant [4 x i8] c"sit\00", align 1
@.str310 = private unnamed_addr constant [22 x i8] c"application/x-stuffit\00", align 1
@.str311 = private unnamed_addr constant [4 x i8] c"skd\00", align 1
@.str312 = private unnamed_addr constant [19 x i8] c"application/x-koan\00", align 1
@.str313 = private unnamed_addr constant [4 x i8] c"skm\00", align 1
@.str314 = private unnamed_addr constant [4 x i8] c"skp\00", align 1
@.str315 = private unnamed_addr constant [4 x i8] c"skt\00", align 1
@.str316 = private unnamed_addr constant [4 x i8] c"smi\00", align 1
@.str317 = private unnamed_addr constant [17 x i8] c"application/smil\00", align 1
@.str318 = private unnamed_addr constant [5 x i8] c"smil\00", align 1
@.str319 = private unnamed_addr constant [4 x i8] c"snd\00", align 1
@.str320 = private unnamed_addr constant [3 x i8] c"so\00", align 1
@.str321 = private unnamed_addr constant [4 x i8] c"spl\00", align 1
@.str322 = private unnamed_addr constant [27 x i8] c"application/x-futuresplash\00", align 1
@.str323 = private unnamed_addr constant [4 x i8] c"src\00", align 1
@.str324 = private unnamed_addr constant [26 x i8] c"application/x-wais-source\00", align 1
@.str325 = private unnamed_addr constant [4 x i8] c"stc\00", align 1
@.str326 = private unnamed_addr constant [38 x i8] c"application/vnd.sun.xml.calc.template\00", align 1
@.str327 = private unnamed_addr constant [4 x i8] c"std\00", align 1
@.str328 = private unnamed_addr constant [38 x i8] c"application/vnd.sun.xml.draw.template\00", align 1
@.str329 = private unnamed_addr constant [4 x i8] c"sti\00", align 1
@.str330 = private unnamed_addr constant [41 x i8] c"application/vnd.sun.xml.impress.template\00", align 1
@.str331 = private unnamed_addr constant [4 x i8] c"stw\00", align 1
@.str332 = private unnamed_addr constant [40 x i8] c"application/vnd.sun.xml.writer.template\00", align 1
@.str333 = private unnamed_addr constant [8 x i8] c"sv4cpio\00", align 1
@.str334 = private unnamed_addr constant [22 x i8] c"application/x-sv4cpio\00", align 1
@.str335 = private unnamed_addr constant [7 x i8] c"sv4crc\00", align 1
@.str336 = private unnamed_addr constant [21 x i8] c"application/x-sv4crc\00", align 1
@.str337 = private unnamed_addr constant [4 x i8] c"svg\00", align 1
@.str338 = private unnamed_addr constant [14 x i8] c"image/svg+xml\00", align 1
@.str339 = private unnamed_addr constant [5 x i8] c"svgz\00", align 1
@.str340 = private unnamed_addr constant [4 x i8] c"swf\00", align 1
@.str341 = private unnamed_addr constant [30 x i8] c"application/x-shockwave-flash\00", align 1
@.str342 = private unnamed_addr constant [4 x i8] c"sxc\00", align 1
@.str343 = private unnamed_addr constant [29 x i8] c"application/vnd.sun.xml.calc\00", align 1
@.str344 = private unnamed_addr constant [4 x i8] c"sxd\00", align 1
@.str345 = private unnamed_addr constant [29 x i8] c"application/vnd.sun.xml.draw\00", align 1
@.str346 = private unnamed_addr constant [4 x i8] c"sxg\00", align 1
@.str347 = private unnamed_addr constant [38 x i8] c"application/vnd.sun.xml.writer.global\00", align 1
@.str348 = private unnamed_addr constant [4 x i8] c"sxi\00", align 1
@.str349 = private unnamed_addr constant [32 x i8] c"application/vnd.sun.xml.impress\00", align 1
@.str350 = private unnamed_addr constant [4 x i8] c"sxm\00", align 1
@.str351 = private unnamed_addr constant [29 x i8] c"application/vnd.sun.xml.math\00", align 1
@.str352 = private unnamed_addr constant [4 x i8] c"sxw\00", align 1
@.str353 = private unnamed_addr constant [31 x i8] c"application/vnd.sun.xml.writer\00", align 1
@.str354 = private unnamed_addr constant [2 x i8] c"t\00", align 1
@.str355 = private unnamed_addr constant [4 x i8] c"tar\00", align 1
@.str356 = private unnamed_addr constant [18 x i8] c"application/x-tar\00", align 1
@.str357 = private unnamed_addr constant [4 x i8] c"tcl\00", align 1
@.str358 = private unnamed_addr constant [18 x i8] c"application/x-tcl\00", align 1
@.str359 = private unnamed_addr constant [4 x i8] c"tex\00", align 1
@.str360 = private unnamed_addr constant [18 x i8] c"application/x-tex\00", align 1
@.str361 = private unnamed_addr constant [5 x i8] c"texi\00", align 1
@.str362 = private unnamed_addr constant [22 x i8] c"application/x-texinfo\00", align 1
@.str363 = private unnamed_addr constant [8 x i8] c"texinfo\00", align 1
@.str364 = private unnamed_addr constant [4 x i8] c"tif\00", align 1
@.str365 = private unnamed_addr constant [11 x i8] c"image/tiff\00", align 1
@.str366 = private unnamed_addr constant [5 x i8] c"tiff\00", align 1
@.str367 = private unnamed_addr constant [3 x i8] c"tr\00", align 1
@.str368 = private unnamed_addr constant [4 x i8] c"tsp\00", align 1
@.str369 = private unnamed_addr constant [20 x i8] c"application/dsptype\00", align 1
@.str370 = private unnamed_addr constant [4 x i8] c"tsv\00", align 1
@.str371 = private unnamed_addr constant [38 x i8] c"text/tab-separated-values; charset=%s\00", align 1
@.str372 = private unnamed_addr constant [4 x i8] c"txt\00", align 1
@.str373 = private unnamed_addr constant [6 x i8] c"ustar\00", align 1
@.str374 = private unnamed_addr constant [20 x i8] c"application/x-ustar\00", align 1
@.str375 = private unnamed_addr constant [4 x i8] c"vcd\00", align 1
@.str376 = private unnamed_addr constant [21 x i8] c"application/x-cdlink\00", align 1
@.str377 = private unnamed_addr constant [5 x i8] c"vrml\00", align 1
@.str378 = private unnamed_addr constant [11 x i8] c"model/vrml\00", align 1
@.str379 = private unnamed_addr constant [3 x i8] c"vx\00", align 1
@.str380 = private unnamed_addr constant [23 x i8] c"video/x-rad-screenplay\00", align 1
@.str381 = private unnamed_addr constant [4 x i8] c"wav\00", align 1
@.str382 = private unnamed_addr constant [12 x i8] c"audio/x-wav\00", align 1
@.str383 = private unnamed_addr constant [4 x i8] c"wax\00", align 1
@.str384 = private unnamed_addr constant [15 x i8] c"audio/x-ms-wax\00", align 1
@.str385 = private unnamed_addr constant [5 x i8] c"wbmp\00", align 1
@.str386 = private unnamed_addr constant [19 x i8] c"image/vnd.wap.wbmp\00", align 1
@.str387 = private unnamed_addr constant [6 x i8] c"wbxml\00", align 1
@.str388 = private unnamed_addr constant [26 x i8] c"application/vnd.wap.wbxml\00", align 1
@.str389 = private unnamed_addr constant [3 x i8] c"wm\00", align 1
@.str390 = private unnamed_addr constant [14 x i8] c"video/x-ms-wm\00", align 1
@.str391 = private unnamed_addr constant [4 x i8] c"wma\00", align 1
@.str392 = private unnamed_addr constant [15 x i8] c"audio/x-ms-wma\00", align 1
@.str393 = private unnamed_addr constant [4 x i8] c"wmd\00", align 1
@.str394 = private unnamed_addr constant [21 x i8] c"application/x-ms-wmd\00", align 1
@.str395 = private unnamed_addr constant [4 x i8] c"wml\00", align 1
@.str396 = private unnamed_addr constant [17 x i8] c"text/vnd.wap.wml\00", align 1
@.str397 = private unnamed_addr constant [5 x i8] c"wmlc\00", align 1
@.str398 = private unnamed_addr constant [25 x i8] c"application/vnd.wap.wmlc\00", align 1
@.str399 = private unnamed_addr constant [5 x i8] c"wmls\00", align 1
@.str400 = private unnamed_addr constant [23 x i8] c"text/vnd.wap.wmlscript\00", align 1
@.str401 = private unnamed_addr constant [6 x i8] c"wmlsc\00", align 1
@.str402 = private unnamed_addr constant [31 x i8] c"application/vnd.wap.wmlscriptc\00", align 1
@.str403 = private unnamed_addr constant [4 x i8] c"wmv\00", align 1
@.str404 = private unnamed_addr constant [15 x i8] c"video/x-ms-wmv\00", align 1
@.str405 = private unnamed_addr constant [4 x i8] c"wmx\00", align 1
@.str406 = private unnamed_addr constant [15 x i8] c"video/x-ms-wmx\00", align 1
@.str407 = private unnamed_addr constant [4 x i8] c"wmz\00", align 1
@.str408 = private unnamed_addr constant [21 x i8] c"application/x-ms-wmz\00", align 1
@.str409 = private unnamed_addr constant [4 x i8] c"wrl\00", align 1
@.str410 = private unnamed_addr constant [5 x i8] c"wsrc\00", align 1
@.str411 = private unnamed_addr constant [4 x i8] c"wvx\00", align 1
@.str412 = private unnamed_addr constant [15 x i8] c"video/x-ms-wvx\00", align 1
@.str413 = private unnamed_addr constant [4 x i8] c"xbm\00", align 1
@.str414 = private unnamed_addr constant [16 x i8] c"image/x-xbitmap\00", align 1
@.str415 = private unnamed_addr constant [4 x i8] c"xht\00", align 1
@.str416 = private unnamed_addr constant [34 x i8] c"application/xhtml+xml; charset=%s\00", align 1
@.str417 = private unnamed_addr constant [6 x i8] c"xhtml\00", align 1
@.str418 = private unnamed_addr constant [4 x i8] c"xls\00", align 1
@.str419 = private unnamed_addr constant [25 x i8] c"application/vnd.ms-excel\00", align 1
@.str420 = private unnamed_addr constant [4 x i8] c"xml\00", align 1
@.str421 = private unnamed_addr constant [4 x i8] c"xpm\00", align 1
@.str422 = private unnamed_addr constant [16 x i8] c"image/x-xpixmap\00", align 1
@.str423 = private unnamed_addr constant [4 x i8] c"xsl\00", align 1
@.str424 = private unnamed_addr constant [4 x i8] c"xwd\00", align 1
@.str425 = private unnamed_addr constant [20 x i8] c"image/x-xwindowdump\00", align 1
@.str426 = private unnamed_addr constant [4 x i8] c"xyz\00", align 1
@.str427 = private unnamed_addr constant [15 x i8] c"chemical/x-xyz\00", align 1
@.str428 = private unnamed_addr constant [4 x i8] c"zip\00", align 1
@.str429 = private unnamed_addr constant [16 x i8] c"application/zip\00", align 1
@.str430 = private unnamed_addr constant [2 x i8] c"Z\00", align 1
@.str431 = private unnamed_addr constant [9 x i8] c"compress\00", align 1
@.str432 = private unnamed_addr constant [3 x i8] c"gz\00", align 1
@.str433 = private unnamed_addr constant [5 x i8] c"gzip\00", align 1
@.str434 = private unnamed_addr constant [3 x i8] c"uu\00", align 1
@.str435 = private unnamed_addr constant [11 x i8] c"x-uuencode\00", align 1
@.str436 = private unnamed_addr constant [10 x i8] c"fork - %m\00", align 1
@.str437 = private unnamed_addr constant [41 x i8] c"spawned CGI process %d for file '%.200s'\00", align 1
@.str438 = private unnamed_addr constant [34 x i8] c"tmr_create(cgi_kill child) failed\00", align 1
@.str439 = private unnamed_addr constant [22 x i8] c"killed CGI process %d\00", align 1
@.str440 = private unnamed_addr constant [29 x i8] c"tmr_create(cgi_kill2) failed\00", align 1
@.str441 = private unnamed_addr constant [27 x i8] c"hard-killed CGI process %d\00", align 1
@.str442 = private unnamed_addr constant [10 x i8] c"pipe - %m\00", align 1
@.str443 = private unnamed_addr constant [5 x i8] c"nph-\00", align 1
@.str444 = private unnamed_addr constant [18 x i8] c"execve %.80s - %m\00", align 1
@.str445 = private unnamed_addr constant [5 x i8] c"\0D\0A\0D\0A\00", align 1
@.str446 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str447 = private unnamed_addr constant [6 x i8] c"HTTP/\00", align 1
@.str448 = private unnamed_addr constant [10 x i8] c"Location:\00", align 1
@.str449 = private unnamed_addr constant [8 x i8] c"Status:\00", align 1
@err302title = internal global i8* getelementptr inbounds ([6 x i8]* @.str454, i32 0, i32 0), align 8
@err401title = internal global i8* getelementptr inbounds ([13 x i8]* @.str453, i32 0, i32 0), align 8
@err451title = internal global i8* getelementptr inbounds ([30 x i8]* @.str452, i32 0, i32 0), align 8
@.str450 = private unnamed_addr constant [10 x i8] c"Something\00", align 1
@.str451 = private unnamed_addr constant [17 x i8] c"HTTP/1.0 %d %s\0D\0A\00", align 1
@.str452 = private unnamed_addr constant [30 x i8] c"Unavailable For Legal Reasons\00", align 1
@.str453 = private unnamed_addr constant [13 x i8] c"Unauthorized\00", align 1
@.str454 = private unnamed_addr constant [6 x i8] c"Found\00", align 1
@make_envp.envp = internal global [50 x i8*] zeroinitializer, align 16
@.str455 = private unnamed_addr constant [8 x i8] c"PATH=%s\00", align 1
@.str456 = private unnamed_addr constant [38 x i8] c"/usr/local/bin:/usr/ucb:/bin:/usr/bin\00", align 1
@.str457 = private unnamed_addr constant [19 x i8] c"SERVER_SOFTWARE=%s\00", align 1
@.str458 = private unnamed_addr constant [15 x i8] c"SERVER_NAME=%s\00", align 1
@.str459 = private unnamed_addr constant [26 x i8] c"GATEWAY_INTERFACE=CGI/1.1\00", align 1
@.str460 = private unnamed_addr constant [19 x i8] c"SERVER_PROTOCOL=%s\00", align 1
@.str461 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str462 = private unnamed_addr constant [15 x i8] c"SERVER_PORT=%s\00", align 1
@.str463 = private unnamed_addr constant [18 x i8] c"REQUEST_METHOD=%s\00", align 1
@.str464 = private unnamed_addr constant [14 x i8] c"PATH_INFO=/%s\00", align 1
@.str465 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str466 = private unnamed_addr constant [19 x i8] c"PATH_TRANSLATED=%s\00", align 1
@.str467 = private unnamed_addr constant [16 x i8] c"SCRIPT_NAME=/%s\00", align 1
@.str468 = private unnamed_addr constant [16 x i8] c"QUERY_STRING=%s\00", align 1
@.str469 = private unnamed_addr constant [15 x i8] c"REMOTE_ADDR=%s\00", align 1
@.str470 = private unnamed_addr constant [16 x i8] c"HTTP_REFERER=%s\00", align 1
@.str471 = private unnamed_addr constant [17 x i8] c"HTTP_REFERRER=%s\00", align 1
@.str472 = private unnamed_addr constant [19 x i8] c"HTTP_USER_AGENT=%s\00", align 1
@.str473 = private unnamed_addr constant [15 x i8] c"HTTP_ACCEPT=%s\00", align 1
@.str474 = private unnamed_addr constant [24 x i8] c"HTTP_ACCEPT_ENCODING=%s\00", align 1
@.str475 = private unnamed_addr constant [24 x i8] c"HTTP_ACCEPT_LANGUAGE=%s\00", align 1
@.str476 = private unnamed_addr constant [15 x i8] c"HTTP_COOKIE=%s\00", align 1
@.str477 = private unnamed_addr constant [16 x i8] c"CONTENT_TYPE=%s\00", align 1
@.str478 = private unnamed_addr constant [13 x i8] c"HTTP_HOST=%s\00", align 1
@.str479 = private unnamed_addr constant [4 x i8] c"%lu\00", align 1
@.str480 = private unnamed_addr constant [18 x i8] c"CONTENT_LENGTH=%s\00", align 1
@.str481 = private unnamed_addr constant [15 x i8] c"REMOTE_USER=%s\00", align 1
@.str482 = private unnamed_addr constant [13 x i8] c"AUTH_TYPE=%s\00", align 1
@.str483 = private unnamed_addr constant [6 x i8] c"Basic\00", align 1
@.str484 = private unnamed_addr constant [3 x i8] c"TZ\00", align 1
@.str485 = private unnamed_addr constant [6 x i8] c"TZ=%s\00", align 1
@.str486 = private unnamed_addr constant [15 x i8] c"CGI_PATTERN=%s\00", align 1
@build_env.buf = internal global i8* null, align 8
@build_env.maxbuf = internal global i64 0, align 8
@.str487 = private unnamed_addr constant [43 x i8] c"out of memory copying environment variable\00", align 1
@ls.maxnames = internal global i32 0, align 4
@ls.names = internal global i8* null, align 8
@ls.nameptrs = internal global i8** null, align 8
@ls.name = internal global i8* null, align 8
@ls.maxname = internal global i64 0, align 8
@ls.rname = internal global i8* null, align 8
@ls.maxrname = internal global i64 0, align 8
@ls.encrname = internal global i8* null, align 8
@ls.maxencrname = internal global i64 0, align 8
@.str488 = private unnamed_addr constant [19 x i8] c"opendir %.80s - %m\00", align 1
@.str489 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str490 = private unnamed_addr constant [12 x i8] c"fdopen - %m\00", align 1
@.str491 = private unnamed_addr constant [400 x i8] c"<!DOCTYPE html PUBLIC \22-//W3C//DTD HTML 4.01 Transitional//EN\22 \22http://www.w3.org/TR/html4/loose.dtd\22>\0A\0A<html>\0A\0A  <head>\0A    <meta http-equiv=\22Content-type\22 content=\22text/html;charset=UTF-8\22>\0A    <title>Index of %.80s</title>\0A  </head>\0A\0A  <body bgcolor=\22#99cc99\22 text=\22#000000\22 link=\22#2020ff\22 vlink=\22#4040cc\22>\0A\0A    <h2>Index of %.80s</h2>\0A\0A    <pre>\0Amode  links    bytes  last-changed  name\0A    <hr>\00", align 1
@.str492 = private unnamed_addr constant [43 x i8] c"out of memory reallocating directory names\00", align 1
@.str493 = private unnamed_addr constant [6 x i8] c"%s/%s\00", align 1
@.str494 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str495 = private unnamed_addr constant [8 x i8] c" -&gt; \00", align 1
@.str496 = private unnamed_addr constant [2 x i8] c"@\00", align 1
@.str497 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@.str498 = private unnamed_addr constant [58 x i8] c"%s %3ld  %10lld  %s  <a href=\22/%.500s%s\22>%.80s</a>%s%s%s\0A\00", align 1
@.str499 = private unnamed_addr constant [30 x i8] c"    </pre>\0A  </body>\0A</html>\0A\00", align 1
@.str500 = private unnamed_addr constant [51 x i8] c"spawned indexing process %d for directory '%.200s'\00", align 1
@.str501 = private unnamed_addr constant [31 x i8] c"tmr_create(cgi_kill ls) failed\00", align 1
@.str502 = private unnamed_addr constant [6 x i8] c"/_.-~\00", align 1
@.str503 = private unnamed_addr constant [7 x i8] c"%%%02x\00", align 1
@.str504 = private unnamed_addr constant [46 x i8] c"%.80s non-local referrer \22%.80s%.80s\22 \22%.80s\22\00", align 1
@.str505 = private unnamed_addr constant [71 x i8] c"You must supply a local referrer to get URL '%.80s' from this server.\0A\00", align 1
@really_check_referrer.refhost = internal global i8* null, align 8
@really_check_referrer.refhost_size = internal global i64 0, align 8
@.str506 = private unnamed_addr constant [3 x i8] c"//\00", align 1
@auth_check2.authpath = internal global i8* null, align 8
@auth_check2.maxauthpath = internal global i64 0, align 8
@.str507 = private unnamed_addr constant [10 x i8] c"sensitive\00", section "llvm.metadata"
@.str508 = private unnamed_addr constant [11 x i8] c"libhttpd.c\00", section "llvm.metadata"
@auth_check2.prevauthpath = internal global i8* null, align 8
@auth_check2.maxprevauthpath = internal global i64 0, align 8
@auth_check2.prevmtime = internal global i64 0, align 8
@auth_check2.prevuser = internal global i8* null, align 8
@auth_check2.maxprevuser = internal global i64 0, align 8
@auth_check2.prevcryp = internal global i8* null, align 8
@auth_check2.maxprevcryp = internal global i64 0, align 8
@.str509 = private unnamed_addr constant [7 x i8] c"Basic \00", align 1
@.str510 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str511 = private unnamed_addr constant [47 x i8] c"%.80s auth file %.80s could not be opened - %m\00", align 1
@.str512 = private unnamed_addr constant [113 x i8] c"The requested URL '%.80s' is protected by an authentication file, but the authentication file cannot be opened.\0A\00", align 1
@.str513 = private unnamed_addr constant [13 x i8] c"declassified\00", section "llvm.metadata"
@b64_decode_table = internal global [256 x i32] [i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 62, i32 -1, i32 -1, i32 -1, i32 63, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1], align 16
@send_authenticate.header = internal global i8* null, align 8
@send_authenticate.maxheader = internal global i64 0, align 8
@send_authenticate.headstr = internal global [32 x i8] c"WWW-Authenticate: Basic realm=\22\00", align 16
@.str514 = private unnamed_addr constant [8 x i8] c"%s%s\22\0D\0A\00", align 1
@err401form = internal global i8* getelementptr inbounds ([45 x i8]* @.str515, i32 0, i32 0), align 8
@.str515 = private unnamed_addr constant [45 x i8] c"Authorization required for the URL '%.80s'.\0A\00", align 1
@send_dirredirect.location = internal global i8* null, align 8
@send_dirredirect.header = internal global i8* null, align 8
@send_dirredirect.maxlocation = internal global i64 0, align 8
@send_dirredirect.maxheader = internal global i64 0, align 8
@send_dirredirect.headstr = internal global [11 x i8] c"Location: \00", align 1
@.str516 = private unnamed_addr constant [7 x i8] c"%s/?%s\00", align 1
@.str517 = private unnamed_addr constant [4 x i8] c"%s/\00", align 1
@.str518 = private unnamed_addr constant [7 x i8] c"%s%s\0D\0A\00", align 1
@err302form = internal global i8* getelementptr inbounds ([28 x i8]* @.str519, i32 0, i32 0), align 8
@.str519 = private unnamed_addr constant [28 x i8] c"The actual URL is '%.80s'.\0A\00", align 1
@.str520 = private unnamed_addr constant [57 x i8] c"The requested URL '%.80s' was not found on this server.\0A\00", align 1
@.str521 = private unnamed_addr constant [10 x i8] c"Not Found\00", align 1
@.str522 = private unnamed_addr constant [4 x i8] c"/./\00", align 1
@.str523 = private unnamed_addr constant [4 x i8] c"../\00", align 1
@.str524 = private unnamed_addr constant [5 x i8] c"/../\00", align 1
@.str525 = private unnamed_addr constant [4 x i8] c"/..\00", align 1
@.str526 = private unnamed_addr constant [10 x i8] c"Forbidden\00", align 1
@expand_symlinks.checked = internal global i8* null, align 8
@expand_symlinks.rest = internal global i8* null, align 8
@expand_symlinks.maxchecked = internal global i64 0, align 8
@expand_symlinks.maxrest = internal global i64 0, align 8
@.str527 = private unnamed_addr constant [3 x i8] c"..\00", align 1
@.str528 = private unnamed_addr constant [20 x i8] c"readlink %.80s - %m\00", align 1
@.str529 = private unnamed_addr constant [27 x i8] c"too many symlinks in %.80s\00", align 1
@.str530 = private unnamed_addr constant [65 x i8] c"There was an unusual problem serving the requested URL '%.80s'.\0A\00", align 1
@.str531 = private unnamed_addr constant [15 x i8] c"Internal Error\00", align 1
@vhost_map.tempfilename = internal global i8* null, align 8
@vhost_map.maxtempfilename = internal global i64 0, align 8
@.str532 = private unnamed_addr constant [17 x i8] c"getsockname - %m\00", align 1
@.str533 = private unnamed_addr constant [65 x i8] c"The requested method '%.80s' is not implemented by this server.\0A\00", align 1
@.str534 = private unnamed_addr constant [16 x i8] c"Not Implemented\00", align 1
@.str535 = private unnamed_addr constant [74 x i8] c"    <hr>\0A\0A    <address><a href=\22%s\22>%s</a></address>\0A\0A  </body>\0A\0A</html>\0A\00", align 1
@.str536 = private unnamed_addr constant [37 x i8] c"http://www.acme.com/software/thttpd/\00", align 1
@.str537 = private unnamed_addr constant [322 x i8] c"<!DOCTYPE html PUBLIC \22-//W3C//DTD HTML 4.01 Transitional//EN\22 \22http://www.w3.org/TR/html4/loose.dtd\22>\0A\0A<html>\0A\0A  <head>\0A    <meta http-equiv=\22Content-type\22 content=\22text/html;charset=UTF-8\22>\0A    <title>%d %s</title>\0A  </head>\0A\0A  <body bgcolor=\22#cc9999\22 text=\22#000000\22 link=\22#2020ff\22 vlink=\22#4040cc\22>\0A\0A    <h2>%d %s</h2>\0A\00", align 1
@.str538 = private unnamed_addr constant [9 x i8] c"**MSIE**\00", align 1
@.str539 = private unnamed_addr constant [6 x i8] c"<!--\0A\00", align 1
@.str540 = private unnamed_addr constant [79 x i8] c"Padding so that MSIE deigns to show this error instead of its own canned one.\0A\00", align 1
@.str541 = private unnamed_addr constant [5 x i8] c"-->\0A\00", align 1
@.str542 = private unnamed_addr constant [41 x i8] c"unknown sockaddr family on listen socket\00", align 1
@.str543 = private unnamed_addr constant [18 x i8] c"socket %.80s - %m\00", align 1
@.str544 = private unnamed_addr constant [29 x i8] c"setsockopt SO_REUSEADDR - %m\00", align 1
@.str545 = private unnamed_addr constant [16 x i8] c"bind %.80s - %m\00", align 1
@.str546 = private unnamed_addr constant [19 x i8] c"fcntl F_GETFL - %m\00", align 1
@.str547 = private unnamed_addr constant [20 x i8] c"fcntl O_NDELAY - %m\00", align 1
@.str548 = private unnamed_addr constant [12 x i8] c"listen - %m\00", align 1
@llvm.global.annotations = appending global [1 x { i8*, i8*, i8*, i32 }] [{ i8*, i8*, i8*, i32 } { i8* bitcast (i32 (%struct.httpd_conn*, i8*)* @auth_check2 to i8*), i8* getelementptr inbounds ([13 x i8]* @.str513, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str508, i32 0, i32 0), i32 1022 }], section "llvm.metadata"
@nfiles = internal global i32 0, align 4
@nwatches = internal global i64 0, align 8
@fd_rw = internal global i32* null, align 8
@fd_data = internal global i8** null, align 8
@.str549 = private unnamed_addr constant [38 x i8] c"bad fd (%d) passed to fdwatch_add_fd!\00", align 1
@.str1550 = private unnamed_addr constant [38 x i8] c"bad fd (%d) passed to fdwatch_del_fd!\00", align 1
@nreturned = internal global i32 0, align 4
@next_ridx = internal global i32 0, align 4
@.str2551 = private unnamed_addr constant [40 x i8] c"bad fd (%d) passed to fdwatch_check_fd!\00", align 1
@.str3552 = private unnamed_addr constant [29 x i8] c"  fdwatch - %ld %ss (%g/sec)\00", align 1
@.str4553 = private unnamed_addr constant [5 x i8] c"poll\00", align 1
@.str5554 = private unnamed_addr constant [30 x i8] c"bad ridx (%d) in poll_get_fd!\00", align 1
@poll_rfdidx = internal global i32* null, align 8
@poll_fdidx = internal global i32* null, align 8
@.str6555 = private unnamed_addr constant [33 x i8] c"bad fdidx (%d) in poll_check_fd!\00", align 1
@pollfds = internal global %struct.pollfd* null, align 8
@npoll_fds = internal global i32 0, align 4
@.str7556 = private unnamed_addr constant [29 x i8] c"bad idx (%d) in poll_del_fd!\00", align 1
@.str8557 = private unnamed_addr constant [29 x i8] c"too many fds in poll_add_fd!\00", align 1
@.str572 = private unnamed_addr constant [10 x i8] c"stat - %m\00", align 1
@.str1573 = private unnamed_addr constant [26 x i8] c"check_hash_size() failure\00", align 1
@.str2574 = private unnamed_addr constant [10 x i8] c"open - %m\00", align 1
@free_maps = internal global %struct.MapStruct* null, align 8
@free_count = internal global i32 0, align 4
@.str3575 = private unnamed_addr constant [31 x i8] c"out of memory allocating a Map\00", align 1
@alloc_count = internal global i32 0, align 4
@.str4576 = private unnamed_addr constant [10 x i8] c"mmap - %m\00", align 1
@.str5577 = private unnamed_addr constant [19 x i8] c"add_hash() failure\00", align 1
@maps = internal global %struct.MapStruct* null, align 8
@map_count = internal global i32 0, align 4
@mapped_bytes = internal global i64 0, align 8
@.str6578 = private unnamed_addr constant [32 x i8] c"mmc_unmap failed to find entry!\00", align 1
@.str7579 = private unnamed_addr constant [43 x i8] c"mmc_unmap found zero or negative refcount!\00", align 1
@expire_age = internal global i64 600, align 8
@.str8580 = private unnamed_addr constant [92 x i8] c"  map cache - %d allocated, %d active (%lld bytes), %d free; hash size: %d; expire age: %ld\00", align 1
@hash_size = internal global i32 0, align 4
@.str9581 = private unnamed_addr constant [25 x i8] c"map counts don't add up!\00", align 1
@hash_mask = internal global i32 0, align 4
@hash_table = internal global %struct.MapStruct** null, align 8
@.str10582 = private unnamed_addr constant [12 x i8] c"munmap - %m\00", align 1
@.str11583 = private unnamed_addr constant [42 x i8] c"mmc panic - freeing all unreferenced maps\00", align 1
@timers = internal global [67 x %struct.TimerStruct*] zeroinitializer, align 16
@free_timers = internal global %struct.TimerStruct* null, align 8
@free_count594 = internal global i32 0, align 4
@active_count = internal global i32 0, align 4
@alloc_count595 = internal global i32 0, align 4
@tmr_timeout.timeout = internal global %struct.timeval zeroinitializer, align 8
@.str596 = private unnamed_addr constant [44 x i8] c"  timers - %d allocated, %d active, %d free\00", align 1
@.str1597 = private unnamed_addr constant [27 x i8] c"timer counts don't add up!\00", align 1
@JunkClientData = internal global %union.ClientData zeroinitializer, align 8
@.str617 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str620 = private unnamed_addr constant [32 x i8] c"%d-%400[a-zA-Z]-%d %d:%d:%d GMT\00", align 1
@.str1621 = private unnamed_addr constant [32 x i8] c"%d %400[a-zA-Z] %d %d:%d:%d GMT\00", align 1
@.str2622 = private unnamed_addr constant [32 x i8] c"%d:%d:%d GMT %d-%400[a-zA-Z]-%d\00", align 1
@.str3623 = private unnamed_addr constant [32 x i8] c"%d:%d:%d GMT %d %400[a-zA-Z] %d\00", align 1
@.str4624 = private unnamed_addr constant [46 x i8] c"%400[a-zA-Z], %d-%400[a-zA-Z]-%d %d:%d:%d GMT\00", align 1
@.str5625 = private unnamed_addr constant [46 x i8] c"%400[a-zA-Z], %d %400[a-zA-Z] %d %d:%d:%d GMT\00", align 1
@.str6626 = private unnamed_addr constant [45 x i8] c"%400[a-zA-Z] %400[a-zA-Z] %d %d:%d:%d GMT %d\00", align 1
@tm_to_time.monthtab = internal global [12 x i32] [i32 0, i32 31, i32 59, i32 90, i32 120, i32 151, i32 181, i32 212, i32 243, i32 273, i32 304, i32 334], align 16
@scan_wday.wday_tab = internal global [14 x %struct.strlong] [%struct.strlong { i8* getelementptr inbounds ([4 x i8]* @.str7627, i32 0, i32 0), i64 0 }, %struct.strlong { i8* getelementptr inbounds ([7 x i8]* @.str8628, i32 0, i32 0), i64 0 }, %struct.strlong { i8* getelementptr inbounds ([4 x i8]* @.str9629, i32 0, i32 0), i64 1 }, %struct.strlong { i8* getelementptr inbounds ([7 x i8]* @.str10630, i32 0, i32 0), i64 1 }, %struct.strlong { i8* getelementptr inbounds ([4 x i8]* @.str11631, i32 0, i32 0), i64 2 }, %struct.strlong { i8* getelementptr inbounds ([8 x i8]* @.str12632, i32 0, i32 0), i64 2 }, %struct.strlong { i8* getelementptr inbounds ([4 x i8]* @.str13633, i32 0, i32 0), i64 3 }, %struct.strlong { i8* getelementptr inbounds ([10 x i8]* @.str14634, i32 0, i32 0), i64 3 }, %struct.strlong { i8* getelementptr inbounds ([4 x i8]* @.str15635, i32 0, i32 0), i64 4 }, %struct.strlong { i8* getelementptr inbounds ([9 x i8]* @.str16636, i32 0, i32 0), i64 4 }, %struct.strlong { i8* getelementptr inbounds ([4 x i8]* @.str17637, i32 0, i32 0), i64 5 }, %struct.strlong { i8* getelementptr inbounds ([7 x i8]* @.str18638, i32 0, i32 0), i64 5 }, %struct.strlong { i8* getelementptr inbounds ([4 x i8]* @.str19639, i32 0, i32 0), i64 6 }, %struct.strlong { i8* getelementptr inbounds ([9 x i8]* @.str20640, i32 0, i32 0), i64 6 }], align 16
@.str7627 = private unnamed_addr constant [4 x i8] c"sun\00", align 1
@.str8628 = private unnamed_addr constant [7 x i8] c"sunday\00", align 1
@.str9629 = private unnamed_addr constant [4 x i8] c"mon\00", align 1
@.str10630 = private unnamed_addr constant [7 x i8] c"monday\00", align 1
@.str11631 = private unnamed_addr constant [4 x i8] c"tue\00", align 1
@.str12632 = private unnamed_addr constant [8 x i8] c"tuesday\00", align 1
@.str13633 = private unnamed_addr constant [4 x i8] c"wed\00", align 1
@.str14634 = private unnamed_addr constant [10 x i8] c"wednesday\00", align 1
@.str15635 = private unnamed_addr constant [4 x i8] c"thu\00", align 1
@.str16636 = private unnamed_addr constant [9 x i8] c"thursday\00", align 1
@.str17637 = private unnamed_addr constant [4 x i8] c"fri\00", align 1
@.str18638 = private unnamed_addr constant [7 x i8] c"friday\00", align 1
@.str19639 = private unnamed_addr constant [4 x i8] c"sat\00", align 1
@.str20640 = private unnamed_addr constant [9 x i8] c"saturday\00", align 1
@scan_wday.sorted = internal global i32 0, align 4
@scan_mon.mon_tab = internal global [23 x %struct.strlong] [%struct.strlong { i8* getelementptr inbounds ([4 x i8]* @.str21641, i32 0, i32 0), i64 0 }, %struct.strlong { i8* getelementptr inbounds ([8 x i8]* @.str22642, i32 0, i32 0), i64 0 }, %struct.strlong { i8* getelementptr inbounds ([4 x i8]* @.str23643, i32 0, i32 0), i64 1 }, %struct.strlong { i8* getelementptr inbounds ([9 x i8]* @.str24644, i32 0, i32 0), i64 1 }, %struct.strlong { i8* getelementptr inbounds ([4 x i8]* @.str25645, i32 0, i32 0), i64 2 }, %struct.strlong { i8* getelementptr inbounds ([6 x i8]* @.str26646, i32 0, i32 0), i64 2 }, %struct.strlong { i8* getelementptr inbounds ([4 x i8]* @.str27647, i32 0, i32 0), i64 3 }, %struct.strlong { i8* getelementptr inbounds ([6 x i8]* @.str28648, i32 0, i32 0), i64 3 }, %struct.strlong { i8* getelementptr inbounds ([4 x i8]* @.str29649, i32 0, i32 0), i64 4 }, %struct.strlong { i8* getelementptr inbounds ([4 x i8]* @.str30650, i32 0, i32 0), i64 5 }, %struct.strlong { i8* getelementptr inbounds ([5 x i8]* @.str31651, i32 0, i32 0), i64 5 }, %struct.strlong { i8* getelementptr inbounds ([4 x i8]* @.str32652, i32 0, i32 0), i64 6 }, %struct.strlong { i8* getelementptr inbounds ([5 x i8]* @.str33653, i32 0, i32 0), i64 6 }, %struct.strlong { i8* getelementptr inbounds ([4 x i8]* @.str34654, i32 0, i32 0), i64 7 }, %struct.strlong { i8* getelementptr inbounds ([7 x i8]* @.str35655, i32 0, i32 0), i64 7 }, %struct.strlong { i8* getelementptr inbounds ([4 x i8]* @.str36656, i32 0, i32 0), i64 8 }, %struct.strlong { i8* getelementptr inbounds ([10 x i8]* @.str37657, i32 0, i32 0), i64 8 }, %struct.strlong { i8* getelementptr inbounds ([4 x i8]* @.str38658, i32 0, i32 0), i64 9 }, %struct.strlong { i8* getelementptr inbounds ([8 x i8]* @.str39659, i32 0, i32 0), i64 9 }, %struct.strlong { i8* getelementptr inbounds ([4 x i8]* @.str40660, i32 0, i32 0), i64 10 }, %struct.strlong { i8* getelementptr inbounds ([9 x i8]* @.str41661, i32 0, i32 0), i64 10 }, %struct.strlong { i8* getelementptr inbounds ([4 x i8]* @.str42662, i32 0, i32 0), i64 11 }, %struct.strlong { i8* getelementptr inbounds ([9 x i8]* @.str43663, i32 0, i32 0), i64 11 }], align 16
@.str21641 = private unnamed_addr constant [4 x i8] c"jan\00", align 1
@.str22642 = private unnamed_addr constant [8 x i8] c"january\00", align 1
@.str23643 = private unnamed_addr constant [4 x i8] c"feb\00", align 1
@.str24644 = private unnamed_addr constant [9 x i8] c"february\00", align 1
@.str25645 = private unnamed_addr constant [4 x i8] c"mar\00", align 1
@.str26646 = private unnamed_addr constant [6 x i8] c"march\00", align 1
@.str27647 = private unnamed_addr constant [4 x i8] c"apr\00", align 1
@.str28648 = private unnamed_addr constant [6 x i8] c"april\00", align 1
@.str29649 = private unnamed_addr constant [4 x i8] c"may\00", align 1
@.str30650 = private unnamed_addr constant [4 x i8] c"jun\00", align 1
@.str31651 = private unnamed_addr constant [5 x i8] c"june\00", align 1
@.str32652 = private unnamed_addr constant [4 x i8] c"jul\00", align 1
@.str33653 = private unnamed_addr constant [5 x i8] c"july\00", align 1
@.str34654 = private unnamed_addr constant [4 x i8] c"aug\00", align 1
@.str35655 = private unnamed_addr constant [7 x i8] c"august\00", align 1
@.str36656 = private unnamed_addr constant [4 x i8] c"sep\00", align 1
@.str37657 = private unnamed_addr constant [10 x i8] c"september\00", align 1
@.str38658 = private unnamed_addr constant [4 x i8] c"oct\00", align 1
@.str39659 = private unnamed_addr constant [8 x i8] c"october\00", align 1
@.str40660 = private unnamed_addr constant [4 x i8] c"nov\00", align 1
@.str41661 = private unnamed_addr constant [9 x i8] c"november\00", align 1
@.str42662 = private unnamed_addr constant [4 x i8] c"dec\00", align 1
@.str43663 = private unnamed_addr constant [9 x i8] c"december\00", align 1
@scan_mon.sorted = internal global i32 0, align 4

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %cp = alloca i8*, align 8
  %pwd = alloca %struct.passwd*, align 8
  %uid = alloca i32, align 4
  %gid = alloca i32, align 4
  %cwd = alloca [4097 x i8], align 16
  %logfp = alloca %struct._IO_FILE*, align 8
  %num_ready = alloca i32, align 4
  %cnum = alloca i32, align 4
  %c = alloca %struct.connecttab*, align 8
  %hc = alloca %struct.httpd_conn*, align 8
  %sa4 = alloca %union.httpd_sockaddr, align 8
  %sa6 = alloca %union.httpd_sockaddr, align 8
  %gotv4 = alloca i32, align 4
  %gotv6 = alloca i32, align 4
  %tv = alloca %struct.timeval, align 8
  %pidfp = alloca %struct._IO_FILE*, align 8
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 8
  store i32 32767, i32* %uid, align 4
  store i32 32767, i32* %gid, align 4
  %0 = load i8*** %argv.addr, align 8
  %arrayidx = getelementptr inbounds i8** %0, i64 0
  %1 = load i8** %arrayidx, align 8
  store i8* %1, i8** @argv0, align 8
  %2 = load i8** @argv0, align 8
  %call = call i8* @strrchr(i8* %2, i32 47) #8
  store i8* %call, i8** %cp, align 8
  %3 = load i8** %cp, align 8
  %cmp = icmp ne i8* %3, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load i8** %cp, align 8
  %incdec.ptr = getelementptr inbounds i8* %4, i32 1
  store i8* %incdec.ptr, i8** %cp, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load i8** @argv0, align 8
  store i8* %5, i8** %cp, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load i8** %cp, align 8
  call void @openlog(i8* %6, i32 9, i32 24)
  %7 = load i32* %argc.addr, align 4
  %8 = load i8*** %argv.addr, align 8
  call void @parse_args(i32 %7, i8** %8)
  call void @tzset() #5
  call void @lookup_hostname(%union.httpd_sockaddr* %sa4, i64 128, i32* %gotv4, %union.httpd_sockaddr* %sa6, i64 128, i32* %gotv6)
  %9 = load i32* %gotv4, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %if.end4, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %10 = load i32* %gotv6, align 4
  %tobool1 = icmp ne i32 %10, 0
  br i1 %tobool1, label %if.end4, label %if.then2

if.then2:                                         ; preds = %lor.lhs.false
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([29 x i8]* @.str, i32 0, i32 0))
  %11 = load %struct._IO_FILE** @stderr, align 8
  %12 = load i8** @argv0, align 8
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([34 x i8]* @.str1, i32 0, i32 0), i8* %12)
  call void @exit(i32 1) #9
  unreachable

if.end4:                                          ; preds = %lor.lhs.false, %if.end
  store i32 0, i32* @numthrottles, align 4
  store i32 0, i32* @maxthrottles, align 4
  store %struct.throttletab* null, %struct.throttletab** @throttles, align 8
  %13 = load i8** @throttlefile, align 8
  %cmp5 = icmp ne i8* %13, null
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end4
  %14 = load i8** @throttlefile, align 8
  call void @read_throttlefile(i8* %14)
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %if.end4
  %call8 = call i32 @getuid() #5
  %cmp9 = icmp eq i32 %call8, 0
  br i1 %cmp9, label %if.then10, label %if.end16

if.then10:                                        ; preds = %if.end7
  %15 = load i8** @user, align 8
  %call11 = call %struct.passwd* @getpwnam(i8* %15)
  store %struct.passwd* %call11, %struct.passwd** %pwd, align 8
  %16 = load %struct.passwd** %pwd, align 8
  %cmp12 = icmp eq %struct.passwd* %16, null
  br i1 %cmp12, label %if.then13, label %if.end15

if.then13:                                        ; preds = %if.then10
  %17 = load i8** @user, align 8
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([23 x i8]* @.str2, i32 0, i32 0), i8* %17)
  %18 = load %struct._IO_FILE** @stderr, align 8
  %19 = load i8** @argv0, align 8
  %20 = load i8** @user, align 8
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([25 x i8]* @.str3, i32 0, i32 0), i8* %19, i8* %20)
  call void @exit(i32 1) #9
  unreachable

if.end15:                                         ; preds = %if.then10
  %21 = load %struct.passwd** %pwd, align 8
  %pw_uid = getelementptr inbounds %struct.passwd* %21, i32 0, i32 2
  %22 = load i32* %pw_uid, align 4
  store i32 %22, i32* %uid, align 4
  %23 = load %struct.passwd** %pwd, align 8
  %pw_gid = getelementptr inbounds %struct.passwd* %23, i32 0, i32 3
  %24 = load i32* %pw_gid, align 4
  store i32 %24, i32* %gid, align 4
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %if.end7
  %25 = load i8** @logfile, align 8
  %cmp17 = icmp ne i8* %25, null
  br i1 %cmp17, label %if.then18, label %if.else52

if.then18:                                        ; preds = %if.end16
  %26 = load i8** @logfile, align 8
  %call19 = call i32 @strcmp(i8* %26, i8* getelementptr inbounds ([10 x i8]* @.str4, i32 0, i32 0)) #8
  %cmp20 = icmp eq i32 %call19, 0
  br i1 %cmp20, label %if.then21, label %if.else22

if.then21:                                        ; preds = %if.then18
  store i32 1, i32* @no_log, align 4
  store %struct._IO_FILE* null, %struct._IO_FILE** %logfp, align 8
  br label %if.end51

if.else22:                                        ; preds = %if.then18
  %27 = load i8** @logfile, align 8
  %call23 = call i32 @strcmp(i8* %27, i8* getelementptr inbounds ([2 x i8]* @.str5, i32 0, i32 0)) #8
  %cmp24 = icmp eq i32 %call23, 0
  br i1 %cmp24, label %if.then25, label %if.else26

if.then25:                                        ; preds = %if.else22
  %28 = load %struct._IO_FILE** @stdout, align 8
  store %struct._IO_FILE* %28, %struct._IO_FILE** %logfp, align 8
  br label %if.end50

if.else26:                                        ; preds = %if.else22
  %29 = load i8** @logfile, align 8
  %call27 = call %struct._IO_FILE* @fopen(i8* %29, i8* getelementptr inbounds ([2 x i8]* @.str6, i32 0, i32 0))
  store %struct._IO_FILE* %call27, %struct._IO_FILE** %logfp, align 8
  %30 = load %struct._IO_FILE** %logfp, align 8
  %cmp28 = icmp eq %struct._IO_FILE* %30, null
  br i1 %cmp28, label %if.then29, label %if.end30

if.then29:                                        ; preds = %if.else26
  %31 = load i8** @logfile, align 8
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([11 x i8]* @.str7, i32 0, i32 0), i8* %31)
  %32 = load i8** @logfile, align 8
  call void @perror(i8* %32)
  call void @exit(i32 1) #9
  unreachable

if.end30:                                         ; preds = %if.else26
  %33 = load i8** @logfile, align 8
  %arrayidx31 = getelementptr inbounds i8* %33, i64 0
  %34 = load i8* %arrayidx31, align 1
  %conv = sext i8 %34 to i32
  %cmp32 = icmp ne i32 %conv, 47
  br i1 %cmp32, label %if.then34, label %if.end36

if.then34:                                        ; preds = %if.end30
  call void (i32, i8*, ...)* @syslog(i32 4, i8* getelementptr inbounds ([67 x i8]* @.str8, i32 0, i32 0))
  %35 = load %struct._IO_FILE** @stderr, align 8
  %36 = load i8** @argv0, align 8
  %call35 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([72 x i8]* @.str9, i32 0, i32 0), i8* %36)
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end30
  %37 = load %struct._IO_FILE** %logfp, align 8
  %call37 = call i32 @fileno(%struct._IO_FILE* %37) #5
  %call38 = call i32 (i32, i32, ...)* @fcntl(i32 %call37, i32 2, i32 1)
  %call39 = call i32 @getuid() #5
  %cmp40 = icmp eq i32 %call39, 0
  br i1 %cmp40, label %if.then42, label %if.end49

if.then42:                                        ; preds = %if.end36
  %38 = load %struct._IO_FILE** %logfp, align 8
  %call43 = call i32 @fileno(%struct._IO_FILE* %38) #5
  %39 = load i32* %uid, align 4
  %40 = load i32* %gid, align 4
  %call44 = call i32 @fchown(i32 %call43, i32 %39, i32 %40) #5
  %cmp45 = icmp slt i32 %call44, 0
  br i1 %cmp45, label %if.then47, label %if.end48

if.then47:                                        ; preds = %if.then42
  call void (i32, i8*, ...)* @syslog(i32 4, i8* getelementptr inbounds ([20 x i8]* @.str10, i32 0, i32 0))
  call void @perror(i8* getelementptr inbounds ([15 x i8]* @.str11, i32 0, i32 0))
  br label %if.end48

if.end48:                                         ; preds = %if.then47, %if.then42
  br label %if.end49

if.end49:                                         ; preds = %if.end48, %if.end36
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then25
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then21
  br label %if.end53

if.else52:                                        ; preds = %if.end16
  store %struct._IO_FILE* null, %struct._IO_FILE** %logfp, align 8
  br label %if.end53

if.end53:                                         ; preds = %if.else52, %if.end51
  %41 = load i8** @dir, align 8
  %cmp54 = icmp ne i8* %41, null
  br i1 %cmp54, label %if.then56, label %if.end62

if.then56:                                        ; preds = %if.end53
  %42 = load i8** @dir, align 8
  %call57 = call i32 @chdir(i8* %42) #5
  %cmp58 = icmp slt i32 %call57, 0
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %if.then56
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([11 x i8]* @.str12, i32 0, i32 0))
  call void @perror(i8* getelementptr inbounds ([6 x i8]* @.str13, i32 0, i32 0))
  call void @exit(i32 1) #9
  unreachable

if.end61:                                         ; preds = %if.then56
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.end53
  %arraydecay = getelementptr inbounds [4097 x i8]* %cwd, i32 0, i32 0
  %call63 = call i8* @getcwd(i8* %arraydecay, i64 4096) #5
  %arraydecay64 = getelementptr inbounds [4097 x i8]* %cwd, i32 0, i32 0
  %call65 = call i64 @strlen(i8* %arraydecay64) #8
  %sub = sub i64 %call65, 1
  %arrayidx66 = getelementptr inbounds [4097 x i8]* %cwd, i32 0, i64 %sub
  %43 = load i8* %arrayidx66, align 1
  %conv67 = sext i8 %43 to i32
  %cmp68 = icmp ne i32 %conv67, 47
  br i1 %cmp68, label %if.then70, label %if.end73

if.then70:                                        ; preds = %if.end62
  %arraydecay71 = getelementptr inbounds [4097 x i8]* %cwd, i32 0, i32 0
  %call72 = call i8* @strcat(i8* %arraydecay71, i8* getelementptr inbounds ([2 x i8]* @.str14, i32 0, i32 0)) #5
  br label %if.end73

if.end73:                                         ; preds = %if.then70, %if.end62
  %44 = load i32* @debug, align 4
  %tobool74 = icmp ne i32 %44, 0
  br i1 %tobool74, label %if.else88, label %if.then75

if.then75:                                        ; preds = %if.end73
  %45 = load %struct._IO_FILE** @stdin, align 8
  %call76 = call i32 @fclose(%struct._IO_FILE* %45)
  %46 = load %struct._IO_FILE** %logfp, align 8
  %47 = load %struct._IO_FILE** @stdout, align 8
  %cmp77 = icmp ne %struct._IO_FILE* %46, %47
  br i1 %cmp77, label %if.then79, label %if.end81

if.then79:                                        ; preds = %if.then75
  %48 = load %struct._IO_FILE** @stdout, align 8
  %call80 = call i32 @fclose(%struct._IO_FILE* %48)
  br label %if.end81

if.end81:                                         ; preds = %if.then79, %if.then75
  %49 = load %struct._IO_FILE** @stderr, align 8
  %call82 = call i32 @fclose(%struct._IO_FILE* %49)
  %call83 = call i32 @daemon(i32 1, i32 1) #5
  %cmp84 = icmp slt i32 %call83, 0
  br i1 %cmp84, label %if.then86, label %if.end87

if.then86:                                        ; preds = %if.end81
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([12 x i8]* @.str15, i32 0, i32 0))
  call void @exit(i32 1) #9
  unreachable

if.end87:                                         ; preds = %if.end81
  br label %if.end90

if.else88:                                        ; preds = %if.end73
  %call89 = call i32 @setsid() #5
  br label %if.end90

if.end90:                                         ; preds = %if.else88, %if.end87
  %50 = load i8** @pidfile, align 8
  %cmp91 = icmp ne i8* %50, null
  br i1 %cmp91, label %if.then93, label %if.end102

if.then93:                                        ; preds = %if.end90
  %51 = load i8** @pidfile, align 8
  %call94 = call %struct._IO_FILE* @fopen(i8* %51, i8* getelementptr inbounds ([2 x i8]* @.str16, i32 0, i32 0))
  store %struct._IO_FILE* %call94, %struct._IO_FILE** %pidfp, align 8
  %52 = load %struct._IO_FILE** %pidfp, align 8
  %cmp95 = icmp eq %struct._IO_FILE* %52, null
  br i1 %cmp95, label %if.then97, label %if.end98

if.then97:                                        ; preds = %if.then93
  %53 = load i8** @pidfile, align 8
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([11 x i8]* @.str7, i32 0, i32 0), i8* %53)
  call void @exit(i32 1) #9
  unreachable

if.end98:                                         ; preds = %if.then93
  %54 = load %struct._IO_FILE** %pidfp, align 8
  %call99 = call i32 @getpid() #5
  %call100 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %54, i8* getelementptr inbounds ([4 x i8]* @.str17, i32 0, i32 0), i32 %call99)
  %55 = load %struct._IO_FILE** %pidfp, align 8
  %call101 = call i32 @fclose(%struct._IO_FILE* %55)
  br label %if.end102

if.end102:                                        ; preds = %if.end98, %if.end90
  %call103 = call i32 @fdwatch_get_nfiles()
  store i32 %call103, i32* @max_connects, align 4
  %56 = load i32* @max_connects, align 4
  %cmp104 = icmp slt i32 %56, 0
  br i1 %cmp104, label %if.then106, label %if.end107

if.then106:                                       ; preds = %if.end102
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([31 x i8]* @.str18, i32 0, i32 0))
  call void @exit(i32 1) #9
  unreachable

if.end107:                                        ; preds = %if.end102
  %57 = load i32* @max_connects, align 4
  %sub108 = sub nsw i32 %57, 10
  store i32 %sub108, i32* @max_connects, align 4
  %58 = load i32* @do_chroot, align 4
  %tobool109 = icmp ne i32 %58, 0
  br i1 %tobool109, label %if.then110, label %if.end151

if.then110:                                       ; preds = %if.end107
  %arraydecay111 = getelementptr inbounds [4097 x i8]* %cwd, i32 0, i32 0
  %call112 = call i32 @chroot(i8* %arraydecay111) #5
  %cmp113 = icmp slt i32 %call112, 0
  br i1 %cmp113, label %if.then115, label %if.end116

if.then115:                                       ; preds = %if.then110
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([12 x i8]* @.str19, i32 0, i32 0))
  call void @perror(i8* getelementptr inbounds ([7 x i8]* @.str20, i32 0, i32 0))
  call void @exit(i32 1) #9
  unreachable

if.end116:                                        ; preds = %if.then110
  %59 = load i8** @logfile, align 8
  %cmp117 = icmp ne i8* %59, null
  br i1 %cmp117, label %land.lhs.true, label %if.end142

land.lhs.true:                                    ; preds = %if.end116
  %60 = load i8** @logfile, align 8
  %call119 = call i32 @strcmp(i8* %60, i8* getelementptr inbounds ([2 x i8]* @.str5, i32 0, i32 0)) #8
  %cmp120 = icmp ne i32 %call119, 0
  br i1 %cmp120, label %if.then122, label %if.end142

if.then122:                                       ; preds = %land.lhs.true
  %61 = load i8** @logfile, align 8
  %arraydecay123 = getelementptr inbounds [4097 x i8]* %cwd, i32 0, i32 0
  %arraydecay124 = getelementptr inbounds [4097 x i8]* %cwd, i32 0, i32 0
  %call125 = call i64 @strlen(i8* %arraydecay124) #8
  %call126 = call i32 @strncmp(i8* %61, i8* %arraydecay123, i64 %call125) #8
  %cmp127 = icmp eq i32 %call126, 0
  br i1 %cmp127, label %if.then129, label %if.else139

if.then129:                                       ; preds = %if.then122
  %62 = load i8** @logfile, align 8
  %arraydecay130 = getelementptr inbounds [4097 x i8]* %cwd, i32 0, i32 0
  %call131 = call i64 @strlen(i8* %arraydecay130) #8
  %sub132 = sub i64 %call131, 1
  %63 = load i8** @logfile, align 8
  %arrayidx133 = getelementptr inbounds i8* %63, i64 %sub132
  %arraydecay134 = getelementptr inbounds [4097 x i8]* %cwd, i32 0, i32 0
  %call135 = call i64 @strlen(i8* %arraydecay134) #8
  %sub136 = sub i64 %call135, 1
  %64 = load i8** @logfile, align 8
  %arrayidx137 = getelementptr inbounds i8* %64, i64 %sub136
  %call138 = call i64 @strlen(i8* %arrayidx137) #8
  %add = add i64 %call138, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %62, i8* %arrayidx133, i64 %add, i32 1, i1 false)
  br label %if.end141

if.else139:                                       ; preds = %if.then122
  call void (i32, i8*, ...)* @syslog(i32 4, i8* getelementptr inbounds ([74 x i8]* @.str21, i32 0, i32 0))
  %65 = load %struct._IO_FILE** @stderr, align 8
  %66 = load i8** @argv0, align 8
  %call140 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %65, i8* getelementptr inbounds ([79 x i8]* @.str22, i32 0, i32 0), i8* %66)
  br label %if.end141

if.end141:                                        ; preds = %if.else139, %if.then129
  br label %if.end142

if.end142:                                        ; preds = %if.end141, %land.lhs.true, %if.end116
  %arraydecay143 = getelementptr inbounds [4097 x i8]* %cwd, i32 0, i32 0
  %call144 = call i8* @strcpy(i8* %arraydecay143, i8* getelementptr inbounds ([2 x i8]* @.str14, i32 0, i32 0)) #5
  %arraydecay145 = getelementptr inbounds [4097 x i8]* %cwd, i32 0, i32 0
  %call146 = call i32 @chdir(i8* %arraydecay145) #5
  %cmp147 = icmp slt i32 %call146, 0
  br i1 %cmp147, label %if.then149, label %if.end150

if.then149:                                       ; preds = %if.end142
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([18 x i8]* @.str23, i32 0, i32 0))
  call void @perror(i8* getelementptr inbounds ([13 x i8]* @.str24, i32 0, i32 0))
  call void @exit(i32 1) #9
  unreachable

if.end150:                                        ; preds = %if.end142
  br label %if.end151

if.end151:                                        ; preds = %if.end150, %if.end107
  %67 = load i8** @data_dir, align 8
  %cmp152 = icmp ne i8* %67, null
  br i1 %cmp152, label %if.then154, label %if.end160

if.then154:                                       ; preds = %if.end151
  %68 = load i8** @data_dir, align 8
  %call155 = call i32 @chdir(i8* %68) #5
  %cmp156 = icmp slt i32 %call155, 0
  br i1 %cmp156, label %if.then158, label %if.end159

if.then158:                                       ; preds = %if.then154
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([20 x i8]* @.str25, i32 0, i32 0))
  call void @perror(i8* getelementptr inbounds ([15 x i8]* @.str26, i32 0, i32 0))
  call void @exit(i32 1) #9
  unreachable

if.end159:                                        ; preds = %if.then154
  br label %if.end160

if.end160:                                        ; preds = %if.end159, %if.end151
  %call161 = call i32 (i32, void (i32)*, ...)* bitcast (i32 (...)* @sigset to i32 (i32, void (i32)*, ...)*)(i32 15, void (i32)* @handle_term)
  %call162 = call i32 (i32, void (i32)*, ...)* bitcast (i32 (...)* @sigset to i32 (i32, void (i32)*, ...)*)(i32 2, void (i32)* @handle_term)
  %call163 = call i32 (i32, void (i32)*, ...)* bitcast (i32 (...)* @sigset to i32 (i32, void (i32)*, ...)*)(i32 17, void (i32)* @handle_chld)
  %call164 = call i32 (i32, void (i32)*, ...)* bitcast (i32 (...)* @sigset to i32 (i32, void (i32)*, ...)*)(i32 13, void (i32)* inttoptr (i64 1 to void (i32)*))
  %call165 = call i32 (i32, void (i32)*, ...)* bitcast (i32 (...)* @sigset to i32 (i32, void (i32)*, ...)*)(i32 1, void (i32)* @handle_hup)
  %call166 = call i32 (i32, void (i32)*, ...)* bitcast (i32 (...)* @sigset to i32 (i32, void (i32)*, ...)*)(i32 10, void (i32)* @handle_usr1)
  %call167 = call i32 (i32, void (i32)*, ...)* bitcast (i32 (...)* @sigset to i32 (i32, void (i32)*, ...)*)(i32 12, void (i32)* @handle_usr2)
  %call168 = call i32 (i32, void (i32)*, ...)* bitcast (i32 (...)* @sigset to i32 (i32, void (i32)*, ...)*)(i32 14, void (i32)* @handle_alrm)
  store volatile i32 0, i32* @got_hup, align 4
  store volatile i32 0, i32* @got_usr1, align 4
  store volatile i32 0, i32* @watchdog_flag, align 4
  %call169 = call i32 @alarm(i32 360) #5
  call void @tmr_init()
  %69 = load i8** @hostname, align 8
  %70 = load i32* %gotv4, align 4
  %tobool170 = icmp ne i32 %70, 0
  br i1 %tobool170, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end160
  br label %cond.end

cond.false:                                       ; preds = %if.end160
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.httpd_sockaddr* [ %sa4, %cond.true ], [ null, %cond.false ]
  %71 = load i32* %gotv6, align 4
  %tobool171 = icmp ne i32 %71, 0
  br i1 %tobool171, label %cond.true172, label %cond.false173

cond.true172:                                     ; preds = %cond.end
  br label %cond.end174

cond.false173:                                    ; preds = %cond.end
  br label %cond.end174

cond.end174:                                      ; preds = %cond.false173, %cond.true172
  %cond175 = phi %union.httpd_sockaddr* [ %sa6, %cond.true172 ], [ null, %cond.false173 ]
  %72 = load i16* @port, align 2
  %73 = load i8** @cgi_pattern, align 8
  %74 = load i32* @cgi_limit, align 4
  %75 = load i8** @charset, align 8
  %76 = load i8** @p3p, align 8
  %77 = load i32* @max_age, align 4
  %arraydecay176 = getelementptr inbounds [4097 x i8]* %cwd, i32 0, i32 0
  %78 = load i32* @no_log, align 4
  %79 = load %struct._IO_FILE** %logfp, align 8
  %80 = load i32* @no_symlink_check, align 4
  %81 = load i32* @do_vhost, align 4
  %82 = load i32* @do_global_passwd, align 4
  %83 = load i8** @url_pattern, align 8
  %84 = load i8** @local_pattern, align 8
  %85 = load i32* @no_empty_referrers, align 4
  %call177 = call %struct.httpd_server* @httpd_initialize(i8* %69, %union.httpd_sockaddr* %cond, %union.httpd_sockaddr* %cond175, i16 zeroext %72, i8* %73, i32 %74, i8* %75, i8* %76, i32 %77, i8* %arraydecay176, i32 %78, %struct._IO_FILE* %79, i32 %80, i32 %81, i32 %82, i8* %83, i8* %84, i32 %85)
  store %struct.httpd_server* %call177, %struct.httpd_server** @hs, align 8
  %86 = load %struct.httpd_server** @hs, align 8
  %cmp178 = icmp eq %struct.httpd_server* %86, null
  br i1 %cmp178, label %if.then180, label %if.end181

if.then180:                                       ; preds = %cond.end174
  call void @exit(i32 1) #9
  unreachable

if.end181:                                        ; preds = %cond.end174
  %87 = load i8** getelementptr inbounds (%union.ClientData* @JunkClientData, i32 0, i32 0)
  %call182 = call %struct.TimerStruct* @tmr_create(%struct.timeval* null, void (i8*, %struct.timeval*)* @occasional, i8* %87, i64 120000, i32 1)
  %cmp183 = icmp eq %struct.TimerStruct* %call182, null
  br i1 %cmp183, label %if.then185, label %if.end186

if.then185:                                       ; preds = %if.end181
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([30 x i8]* @.str27, i32 0, i32 0))
  call void @exit(i32 1) #9
  unreachable

if.end186:                                        ; preds = %if.end181
  %88 = load i8** getelementptr inbounds (%union.ClientData* @JunkClientData, i32 0, i32 0)
  %call187 = call %struct.TimerStruct* @tmr_create(%struct.timeval* null, void (i8*, %struct.timeval*)* @idle, i8* %88, i64 5000, i32 1)
  %cmp188 = icmp eq %struct.TimerStruct* %call187, null
  br i1 %cmp188, label %if.then190, label %if.end191

if.then190:                                       ; preds = %if.end186
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([24 x i8]* @.str28, i32 0, i32 0))
  call void @exit(i32 1) #9
  unreachable

if.end191:                                        ; preds = %if.end186
  %89 = load i32* @numthrottles, align 4
  %cmp192 = icmp sgt i32 %89, 0
  br i1 %cmp192, label %if.then194, label %if.end200

if.then194:                                       ; preds = %if.end191
  %90 = load i8** getelementptr inbounds (%union.ClientData* @JunkClientData, i32 0, i32 0)
  %call195 = call %struct.TimerStruct* @tmr_create(%struct.timeval* null, void (i8*, %struct.timeval*)* @update_throttles, i8* %90, i64 2000, i32 1)
  %cmp196 = icmp eq %struct.TimerStruct* %call195, null
  br i1 %cmp196, label %if.then198, label %if.end199

if.then198:                                       ; preds = %if.then194
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([36 x i8]* @.str29, i32 0, i32 0))
  call void @exit(i32 1) #9
  unreachable

if.end199:                                        ; preds = %if.then194
  br label %if.end200

if.end200:                                        ; preds = %if.end199, %if.end191
  %91 = load i8** getelementptr inbounds (%union.ClientData* @JunkClientData, i32 0, i32 0)
  %call201 = call %struct.TimerStruct* @tmr_create(%struct.timeval* null, void (i8*, %struct.timeval*)* @show_stats, i8* %91, i64 3600000, i32 1)
  %cmp202 = icmp eq %struct.TimerStruct* %call201, null
  br i1 %cmp202, label %if.then204, label %if.end205

if.then204:                                       ; preds = %if.end200
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([30 x i8]* @.str30, i32 0, i32 0))
  call void @exit(i32 1) #9
  unreachable

if.end205:                                        ; preds = %if.end200
  %call206 = call i64 @time(i64* null) #5
  store i64 %call206, i64* @stats_time, align 8
  store i64 %call206, i64* @start_time, align 8
  store i64 0, i64* @stats_connections, align 8
  store i64 0, i64* @stats_bytes, align 8
  store i32 0, i32* @stats_simultaneous, align 4
  %call207 = call i32 @getuid() #5
  %cmp208 = icmp eq i32 %call207, 0
  br i1 %cmp208, label %if.then210, label %if.end234

if.then210:                                       ; preds = %if.end205
  %call211 = call i32 @setgroups(i64 0, i32* null) #5
  %cmp212 = icmp slt i32 %call211, 0
  br i1 %cmp212, label %if.then214, label %if.end215

if.then214:                                       ; preds = %if.then210
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([15 x i8]* @.str31, i32 0, i32 0))
  call void @exit(i32 1) #9
  unreachable

if.end215:                                        ; preds = %if.then210
  %92 = load i32* %gid, align 4
  %call216 = call i32 @setgid(i32 %92) #5
  %cmp217 = icmp slt i32 %call216, 0
  br i1 %cmp217, label %if.then219, label %if.end220

if.then219:                                       ; preds = %if.end215
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([12 x i8]* @.str32, i32 0, i32 0))
  call void @exit(i32 1) #9
  unreachable

if.end220:                                        ; preds = %if.end215
  %93 = load i8** @user, align 8
  %94 = load i32* %gid, align 4
  %call221 = call i32 @initgroups(i8* %93, i32 %94)
  %cmp222 = icmp slt i32 %call221, 0
  br i1 %cmp222, label %if.then224, label %if.end225

if.then224:                                       ; preds = %if.end220
  call void (i32, i8*, ...)* @syslog(i32 4, i8* getelementptr inbounds ([16 x i8]* @.str33, i32 0, i32 0))
  br label %if.end225

if.end225:                                        ; preds = %if.then224, %if.end220
  %95 = load i32* %uid, align 4
  %call226 = call i32 @setuid(i32 %95) #5
  %cmp227 = icmp slt i32 %call226, 0
  br i1 %cmp227, label %if.then229, label %if.end230

if.then229:                                       ; preds = %if.end225
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([12 x i8]* @.str34, i32 0, i32 0))
  call void @exit(i32 1) #9
  unreachable

if.end230:                                        ; preds = %if.end225
  %96 = load i32* @do_chroot, align 4
  %tobool231 = icmp ne i32 %96, 0
  br i1 %tobool231, label %if.end233, label %if.then232

if.then232:                                       ; preds = %if.end230
  call void (i32, i8*, ...)* @syslog(i32 4, i8* getelementptr inbounds ([58 x i8]* @.str35, i32 0, i32 0))
  br label %if.end233

if.end233:                                        ; preds = %if.then232, %if.end230
  br label %if.end234

if.end234:                                        ; preds = %if.end233, %if.end205
  %97 = load i32* @max_connects, align 4
  %conv235 = sext i32 %97 to i64
  %mul = mul i64 144, %conv235
  %call236 = call noalias i8* @malloc(i64 %mul) #5
  %98 = bitcast i8* %call236 to %struct.connecttab*
  store %struct.connecttab* %98, %struct.connecttab** @connects, align 8
  %99 = load %struct.connecttab** @connects, align 8
  %cmp237 = icmp eq %struct.connecttab* %99, null
  br i1 %cmp237, label %if.then239, label %if.end240

if.then239:                                       ; preds = %if.end234
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([38 x i8]* @.str36, i32 0, i32 0))
  call void @exit(i32 1) #9
  unreachable

if.end240:                                        ; preds = %if.end234
  store i32 0, i32* %cnum, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end240
  %100 = load i32* %cnum, align 4
  %101 = load i32* @max_connects, align 4
  %cmp241 = icmp slt i32 %100, %101
  br i1 %cmp241, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %102 = load i32* %cnum, align 4
  %idxprom = sext i32 %102 to i64
  %103 = load %struct.connecttab** @connects, align 8
  %arrayidx243 = getelementptr inbounds %struct.connecttab* %103, i64 %idxprom
  %conn_state = getelementptr inbounds %struct.connecttab* %arrayidx243, i32 0, i32 0
  store i32 0, i32* %conn_state, align 4
  %104 = load i32* %cnum, align 4
  %add244 = add nsw i32 %104, 1
  %105 = load i32* %cnum, align 4
  %idxprom245 = sext i32 %105 to i64
  %106 = load %struct.connecttab** @connects, align 8
  %arrayidx246 = getelementptr inbounds %struct.connecttab* %106, i64 %idxprom245
  %next_free_connect = getelementptr inbounds %struct.connecttab* %arrayidx246, i32 0, i32 1
  store i32 %add244, i32* %next_free_connect, align 4
  %107 = load i32* %cnum, align 4
  %idxprom247 = sext i32 %107 to i64
  %108 = load %struct.connecttab** @connects, align 8
  %arrayidx248 = getelementptr inbounds %struct.connecttab* %108, i64 %idxprom247
  %hc249 = getelementptr inbounds %struct.connecttab* %arrayidx248, i32 0, i32 2
  store %struct.httpd_conn* null, %struct.httpd_conn** %hc249, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %109 = load i32* %cnum, align 4
  %inc = add nsw i32 %109, 1
  store i32 %inc, i32* %cnum, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %110 = load i32* @max_connects, align 4
  %sub250 = sub nsw i32 %110, 1
  %idxprom251 = sext i32 %sub250 to i64
  %111 = load %struct.connecttab** @connects, align 8
  %arrayidx252 = getelementptr inbounds %struct.connecttab* %111, i64 %idxprom251
  %next_free_connect253 = getelementptr inbounds %struct.connecttab* %arrayidx252, i32 0, i32 1
  store i32 -1, i32* %next_free_connect253, align 4
  store i32 0, i32* @first_free_connect, align 4
  store i32 0, i32* @num_connects, align 4
  store i32 0, i32* @httpd_conn_count, align 4
  %112 = load %struct.httpd_server** @hs, align 8
  %cmp254 = icmp ne %struct.httpd_server* %112, null
  br i1 %cmp254, label %if.then256, label %if.end267

if.then256:                                       ; preds = %for.end
  %113 = load %struct.httpd_server** @hs, align 8
  %listen4_fd = getelementptr inbounds %struct.httpd_server* %113, i32 0, i32 10
  %114 = load i32* %listen4_fd, align 4
  %cmp257 = icmp ne i32 %114, -1
  br i1 %cmp257, label %if.then259, label %if.end261

if.then259:                                       ; preds = %if.then256
  %115 = load %struct.httpd_server** @hs, align 8
  %listen4_fd260 = getelementptr inbounds %struct.httpd_server* %115, i32 0, i32 10
  %116 = load i32* %listen4_fd260, align 4
  call void @fdwatch_add_fd(i32 %116, i8* null, i32 0)
  br label %if.end261

if.end261:                                        ; preds = %if.then259, %if.then256
  %117 = load %struct.httpd_server** @hs, align 8
  %listen6_fd = getelementptr inbounds %struct.httpd_server* %117, i32 0, i32 11
  %118 = load i32* %listen6_fd, align 4
  %cmp262 = icmp ne i32 %118, -1
  br i1 %cmp262, label %if.then264, label %if.end266

if.then264:                                       ; preds = %if.end261
  %119 = load %struct.httpd_server** @hs, align 8
  %listen6_fd265 = getelementptr inbounds %struct.httpd_server* %119, i32 0, i32 11
  %120 = load i32* %listen6_fd265, align 4
  call void @fdwatch_add_fd(i32 %120, i8* null, i32 0)
  br label %if.end266

if.end266:                                        ; preds = %if.then264, %if.end261
  br label %if.end267

if.end267:                                        ; preds = %if.end266, %for.end
  %call268 = call i32 @gettimeofday(%struct.timeval* %tv, %struct.timezone* null) #5
  br label %while.cond

while.cond:                                       ; preds = %if.end367, %if.then326, %if.then309, %if.then293, %if.then287, %if.end267
  %121 = load i32* @terminate, align 4
  %tobool269 = icmp ne i32 %121, 0
  br i1 %tobool269, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %while.cond
  %122 = load i32* @num_connects, align 4
  %cmp270 = icmp sgt i32 %122, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %123 = phi i1 [ true, %while.cond ], [ %cmp270, %lor.rhs ]
  br i1 %123, label %while.body, label %while.end368

while.body:                                       ; preds = %lor.end
  %124 = load volatile i32* @got_hup, align 4
  %tobool272 = icmp ne i32 %124, 0
  br i1 %tobool272, label %if.then273, label %if.end274

if.then273:                                       ; preds = %while.body
  call void @re_open_logfile()
  store volatile i32 0, i32* @got_hup, align 4
  br label %if.end274

if.end274:                                        ; preds = %if.then273, %while.body
  %call275 = call i64 @tmr_mstimeout(%struct.timeval* %tv)
  %call276 = call i32 @fdwatch(i64 %call275)
  store i32 %call276, i32* %num_ready, align 4
  %125 = load i32* %num_ready, align 4
  %cmp277 = icmp slt i32 %125, 0
  br i1 %cmp277, label %if.then279, label %if.end289

if.then279:                                       ; preds = %if.end274
  %call280 = call i32* @__errno_location() #10
  %126 = load i32* %call280, align 4
  %cmp281 = icmp eq i32 %126, 4
  br i1 %cmp281, label %if.then287, label %lor.lhs.false283

lor.lhs.false283:                                 ; preds = %if.then279
  %call284 = call i32* @__errno_location() #10
  %127 = load i32* %call284, align 4
  %cmp285 = icmp eq i32 %127, 11
  br i1 %cmp285, label %if.then287, label %if.end288

if.then287:                                       ; preds = %lor.lhs.false283, %if.then279
  br label %while.cond

if.end288:                                        ; preds = %lor.lhs.false283
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([13 x i8]* @.str37, i32 0, i32 0))
  call void @exit(i32 1) #9
  unreachable

if.end289:                                        ; preds = %if.end274
  %call290 = call i32 @gettimeofday(%struct.timeval* %tv, %struct.timezone* null) #5
  %128 = load i32* %num_ready, align 4
  %cmp291 = icmp eq i32 %128, 0
  br i1 %cmp291, label %if.then293, label %if.end294

if.then293:                                       ; preds = %if.end289
  call void @tmr_run(%struct.timeval* %tv)
  br label %while.cond

if.end294:                                        ; preds = %if.end289
  %129 = load %struct.httpd_server** @hs, align 8
  %cmp295 = icmp ne %struct.httpd_server* %129, null
  br i1 %cmp295, label %land.lhs.true297, label %if.end311

land.lhs.true297:                                 ; preds = %if.end294
  %130 = load %struct.httpd_server** @hs, align 8
  %listen6_fd298 = getelementptr inbounds %struct.httpd_server* %130, i32 0, i32 11
  %131 = load i32* %listen6_fd298, align 4
  %cmp299 = icmp ne i32 %131, -1
  br i1 %cmp299, label %land.lhs.true301, label %if.end311

land.lhs.true301:                                 ; preds = %land.lhs.true297
  %132 = load %struct.httpd_server** @hs, align 8
  %listen6_fd302 = getelementptr inbounds %struct.httpd_server* %132, i32 0, i32 11
  %133 = load i32* %listen6_fd302, align 4
  %call303 = call i32 @fdwatch_check_fd(i32 %133)
  %tobool304 = icmp ne i32 %call303, 0
  br i1 %tobool304, label %if.then305, label %if.end311

if.then305:                                       ; preds = %land.lhs.true301
  %134 = load %struct.httpd_server** @hs, align 8
  %listen6_fd306 = getelementptr inbounds %struct.httpd_server* %134, i32 0, i32 11
  %135 = load i32* %listen6_fd306, align 4
  %call307 = call i32 @handle_newconnect(%struct.timeval* %tv, i32 %135)
  %tobool308 = icmp ne i32 %call307, 0
  br i1 %tobool308, label %if.then309, label %if.end310

if.then309:                                       ; preds = %if.then305
  br label %while.cond

if.end310:                                        ; preds = %if.then305
  br label %if.end311

if.end311:                                        ; preds = %if.end310, %land.lhs.true301, %land.lhs.true297, %if.end294
  %136 = load %struct.httpd_server** @hs, align 8
  %cmp312 = icmp ne %struct.httpd_server* %136, null
  br i1 %cmp312, label %land.lhs.true314, label %if.end328

land.lhs.true314:                                 ; preds = %if.end311
  %137 = load %struct.httpd_server** @hs, align 8
  %listen4_fd315 = getelementptr inbounds %struct.httpd_server* %137, i32 0, i32 10
  %138 = load i32* %listen4_fd315, align 4
  %cmp316 = icmp ne i32 %138, -1
  br i1 %cmp316, label %land.lhs.true318, label %if.end328

land.lhs.true318:                                 ; preds = %land.lhs.true314
  %139 = load %struct.httpd_server** @hs, align 8
  %listen4_fd319 = getelementptr inbounds %struct.httpd_server* %139, i32 0, i32 10
  %140 = load i32* %listen4_fd319, align 4
  %call320 = call i32 @fdwatch_check_fd(i32 %140)
  %tobool321 = icmp ne i32 %call320, 0
  br i1 %tobool321, label %if.then322, label %if.end328

if.then322:                                       ; preds = %land.lhs.true318
  %141 = load %struct.httpd_server** @hs, align 8
  %listen4_fd323 = getelementptr inbounds %struct.httpd_server* %141, i32 0, i32 10
  %142 = load i32* %listen4_fd323, align 4
  %call324 = call i32 @handle_newconnect(%struct.timeval* %tv, i32 %142)
  %tobool325 = icmp ne i32 %call324, 0
  br i1 %tobool325, label %if.then326, label %if.end327

if.then326:                                       ; preds = %if.then322
  br label %while.cond

if.end327:                                        ; preds = %if.then322
  br label %if.end328

if.end328:                                        ; preds = %if.end327, %land.lhs.true318, %land.lhs.true314, %if.end311
  br label %while.cond329

while.cond329:                                    ; preds = %if.end346, %if.then336, %if.end328
  %call330 = call i8* @fdwatch_get_next_client_data()
  %143 = bitcast i8* %call330 to %struct.connecttab*
  store %struct.connecttab* %143, %struct.connecttab** %c, align 8
  %cmp331 = icmp ne %struct.connecttab* %143, inttoptr (i64 -1 to %struct.connecttab*)
  br i1 %cmp331, label %while.body333, label %while.end

while.body333:                                    ; preds = %while.cond329
  %144 = load %struct.connecttab** %c, align 8
  %cmp334 = icmp eq %struct.connecttab* %144, null
  br i1 %cmp334, label %if.then336, label %if.end337

if.then336:                                       ; preds = %while.body333
  br label %while.cond329

if.end337:                                        ; preds = %while.body333
  %145 = load %struct.connecttab** %c, align 8
  %hc338 = getelementptr inbounds %struct.connecttab* %145, i32 0, i32 2
  %146 = load %struct.httpd_conn** %hc338, align 8
  store %struct.httpd_conn* %146, %struct.httpd_conn** %hc, align 8
  %147 = load %struct.httpd_conn** %hc, align 8
  %conn_fd = getelementptr inbounds %struct.httpd_conn* %147, i32 0, i32 60
  %148 = load i32* %conn_fd, align 4
  %call339 = call i32 @fdwatch_check_fd(i32 %148)
  %tobool340 = icmp ne i32 %call339, 0
  br i1 %tobool340, label %if.else342, label %if.then341

if.then341:                                       ; preds = %if.end337
  %149 = load %struct.connecttab** %c, align 8
  call void @clear_connection(%struct.connecttab* %149, %struct.timeval* %tv)
  br label %if.end346

if.else342:                                       ; preds = %if.end337
  %150 = load %struct.connecttab** %c, align 8
  %conn_state343 = getelementptr inbounds %struct.connecttab* %150, i32 0, i32 0
  %151 = load i32* %conn_state343, align 4
  switch i32 %151, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %sw.bb344
    i32 4, label %sw.bb345
  ]

sw.bb:                                            ; preds = %if.else342
  %152 = load %struct.connecttab** %c, align 8
  call void @handle_read(%struct.connecttab* %152, %struct.timeval* %tv)
  br label %sw.epilog

sw.bb344:                                         ; preds = %if.else342
  %153 = load %struct.connecttab** %c, align 8
  call void @handle_send(%struct.connecttab* %153, %struct.timeval* %tv)
  br label %sw.epilog

sw.bb345:                                         ; preds = %if.else342
  %154 = load %struct.connecttab** %c, align 8
  call void @handle_linger(%struct.connecttab* %154, %struct.timeval* %tv)
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb345, %sw.bb344, %sw.bb, %if.else342
  br label %if.end346

if.end346:                                        ; preds = %sw.epilog, %if.then341
  br label %while.cond329

while.end:                                        ; preds = %while.cond329
  call void @tmr_run(%struct.timeval* %tv)
  %155 = load volatile i32* @got_usr1, align 4
  %tobool347 = icmp ne i32 %155, 0
  br i1 %tobool347, label %land.lhs.true348, label %if.end367

land.lhs.true348:                                 ; preds = %while.end
  %156 = load i32* @terminate, align 4
  %tobool349 = icmp ne i32 %156, 0
  br i1 %tobool349, label %if.end367, label %if.then350

if.then350:                                       ; preds = %land.lhs.true348
  store i32 1, i32* @terminate, align 4
  %157 = load %struct.httpd_server** @hs, align 8
  %cmp351 = icmp ne %struct.httpd_server* %157, null
  br i1 %cmp351, label %if.then353, label %if.end366

if.then353:                                       ; preds = %if.then350
  %158 = load %struct.httpd_server** @hs, align 8
  %listen4_fd354 = getelementptr inbounds %struct.httpd_server* %158, i32 0, i32 10
  %159 = load i32* %listen4_fd354, align 4
  %cmp355 = icmp ne i32 %159, -1
  br i1 %cmp355, label %if.then357, label %if.end359

if.then357:                                       ; preds = %if.then353
  %160 = load %struct.httpd_server** @hs, align 8
  %listen4_fd358 = getelementptr inbounds %struct.httpd_server* %160, i32 0, i32 10
  %161 = load i32* %listen4_fd358, align 4
  call void @fdwatch_del_fd(i32 %161)
  br label %if.end359

if.end359:                                        ; preds = %if.then357, %if.then353
  %162 = load %struct.httpd_server** @hs, align 8
  %listen6_fd360 = getelementptr inbounds %struct.httpd_server* %162, i32 0, i32 11
  %163 = load i32* %listen6_fd360, align 4
  %cmp361 = icmp ne i32 %163, -1
  br i1 %cmp361, label %if.then363, label %if.end365

if.then363:                                       ; preds = %if.end359
  %164 = load %struct.httpd_server** @hs, align 8
  %listen6_fd364 = getelementptr inbounds %struct.httpd_server* %164, i32 0, i32 11
  %165 = load i32* %listen6_fd364, align 4
  call void @fdwatch_del_fd(i32 %165)
  br label %if.end365

if.end365:                                        ; preds = %if.then363, %if.end359
  %166 = load %struct.httpd_server** @hs, align 8
  call void @httpd_unlisten(%struct.httpd_server* %166)
  br label %if.end366

if.end366:                                        ; preds = %if.end365, %if.then350
  br label %if.end367

if.end367:                                        ; preds = %if.end366, %land.lhs.true348, %while.end
  br label %while.cond

while.end368:                                     ; preds = %lor.end
  call void @shut_down()
  call void (i32, i8*, ...)* @syslog(i32 5, i8* getelementptr inbounds ([8 x i8]* @.str38, i32 0, i32 0))
  call void @closelog()
  call void @exit(i32 0) #9
  unreachable

return:                                           ; No predecessors!
  %167 = load i32* %retval
  ret i32 %167
}

; Function Attrs: nounwind readonly
declare i8* @strrchr(i8*, i32) #1

declare void @openlog(i8*, i32, i32) #2

; Function Attrs: nounwind
declare void @tzset() #3

declare void @syslog(i32, i8*, ...) #2

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: noreturn nounwind
declare void @exit(i32) #4

; Function Attrs: nounwind
declare i32 @getuid() #3

declare %struct.passwd* @getpwnam(i8*) #2

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #1

declare %struct._IO_FILE* @fopen(i8*, i8*) #2

declare void @perror(i8*) #2

declare i32 @fcntl(i32, i32, ...) #2

; Function Attrs: nounwind
declare i32 @fileno(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare i32 @fchown(i32, i32, i32) #3

; Function Attrs: nounwind
declare i32 @chdir(i8*) #3

; Function Attrs: nounwind
declare i8* @getcwd(i8*, i64) #3

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #1

; Function Attrs: nounwind
declare i8* @strcat(i8*, i8*) #3

declare i32 @fclose(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare i32 @daemon(i32, i32) #3

; Function Attrs: nounwind
declare i32 @setsid() #3

; Function Attrs: nounwind
declare i32 @getpid() #3

; Function Attrs: nounwind
declare i32 @chroot(i8*) #3

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8*, i8*, i64) #1

; Function Attrs: nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #5

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8*) #3

declare i32 @sigset(...) #2

; Function Attrs: nounwind
declare i32 @alarm(i32) #3

; Function Attrs: nounwind
declare i64 @time(i64*) #3

; Function Attrs: nounwind
declare i32 @setgroups(i64, i32*) #3

; Function Attrs: nounwind
declare i32 @setgid(i32) #3

declare i32 @initgroups(i8*, i32) #2

; Function Attrs: nounwind
declare i32 @setuid(i32) #3

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #3

; Function Attrs: nounwind
declare i32 @gettimeofday(%struct.timeval*, %struct.timezone*) #3

; Function Attrs: nounwind readnone
declare i32* @__errno_location() #6

declare void @closelog() #2

; Function Attrs: nounwind
declare i32 @shutdown(i32, i32) #3

declare i64 @read(i32, i8*, i64) #2

declare i64 @write(i32, i8*, i64) #2

declare i64 @writev(i32, %struct.iovec*, i32) #2

; Function Attrs: nounwind
declare void @free(i8*) #3

declare i8* @fgets(i8*, i32, %struct._IO_FILE*) #2

; Function Attrs: nounwind readonly
declare i8* @strchr(i8*, i32) #1

; Function Attrs: nounwind
declare i32 @__isoc99_sscanf(i8*, i8*, ...) #3

; Function Attrs: nounwind readonly
declare i8* @strstr(i8*, i8*) #1

; Function Attrs: nounwind
declare i8* @realloc(i8*, i64) #3

; Function Attrs: nounwind
declare noalias i8* @strdup(i8*) #3

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #5

; Function Attrs: nounwind
declare i32 @snprintf(i8*, i64, i8*, ...) #3

declare i32 @getaddrinfo(i8*, i8*, %struct.addrinfo*, %struct.addrinfo**) #2

; Function Attrs: nounwind
declare i8* @gai_strerror(i32) #3

; Function Attrs: nounwind
declare void @freeaddrinfo(%struct.addrinfo*) #3

declare i32 @printf(i8*, ...) #2

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) #1

; Function Attrs: nounwind readonly
declare i64 @strspn(i8*, i8*) #1

; Function Attrs: nounwind readonly
declare i64 @strcspn(i8*, i8*) #1

; Function Attrs: nounwind readonly
declare i32 @strcasecmp(i8*, i8*) #1

; Function Attrs: noreturn nounwind
declare void @abort() #4

declare i32 @waitpid(i32, i32*, i32) #2

; Function Attrs: nounwind uwtable
define internal void @parse_args(i32 %argc, i8** %argv) #0 {
entry:
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %argn = alloca i32, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 8
  store i32 0, i32* @debug, align 4
  store i16 80, i16* @port, align 2
  store i8* null, i8** @dir, align 8
  store i8* null, i8** @data_dir, align 8
  store i32 0, i32* @do_chroot, align 4
  store i32 0, i32* @no_log, align 4
  %0 = load i32* @do_chroot, align 4
  store i32 %0, i32* @no_symlink_check, align 4
  store i32 0, i32* @do_vhost, align 4
  store i32 0, i32* @do_global_passwd, align 4
  store i8* null, i8** @cgi_pattern, align 8
  store i32 0, i32* @cgi_limit, align 4
  store i8* null, i8** @url_pattern, align 8
  store i32 0, i32* @no_empty_referrers, align 4
  store i8* null, i8** @local_pattern, align 8
  store i8* null, i8** @throttlefile, align 8
  store i8* null, i8** @hostname, align 8
  store i8* null, i8** @logfile, align 8
  store i8* null, i8** @pidfile, align 8
  store i8* getelementptr inbounds ([7 x i8]* @.str70, i32 0, i32 0), i8** @user, align 8
  store i8* getelementptr inbounds ([6 x i8]* @.str71, i32 0, i32 0), i8** @charset, align 8
  store i8* getelementptr inbounds ([1 x i8]* @.str42, i32 0, i32 0), i8** @p3p, align 8
  store i32 -1, i32* @max_age, align 4
  store i32 1, i32* %argn, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end275, %entry
  %1 = load i32* %argn, align 4
  %2 = load i32* %argc.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %3 = load i32* %argn, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load i8*** %argv.addr, align 8
  %arrayidx = getelementptr inbounds i8** %4, i64 %idxprom
  %5 = load i8** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds i8* %5, i64 0
  %6 = load i8* %arrayidx1, align 1
  %conv = sext i8 %6 to i32
  %cmp2 = icmp eq i32 %conv, 45
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %cmp2, %land.rhs ]
  br i1 %7, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %8 = load i32* %argn, align 4
  %idxprom4 = sext i32 %8 to i64
  %9 = load i8*** %argv.addr, align 8
  %arrayidx5 = getelementptr inbounds i8** %9, i64 %idxprom4
  %10 = load i8** %arrayidx5, align 8
  %call = call i32 @strcmp(i8* %10, i8* getelementptr inbounds ([3 x i8]* @.str72, i32 0, i32 0)) #8
  %cmp6 = icmp eq i32 %call, 0
  br i1 %cmp6, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %call8 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str73, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8]* @.str74, i32 0, i32 0))
  call void @exit(i32 0) #9
  unreachable

if.else:                                          ; preds = %while.body
  %11 = load i32* %argn, align 4
  %idxprom9 = sext i32 %11 to i64
  %12 = load i8*** %argv.addr, align 8
  %arrayidx10 = getelementptr inbounds i8** %12, i64 %idxprom9
  %13 = load i8** %arrayidx10, align 8
  %call11 = call i32 @strcmp(i8* %13, i8* getelementptr inbounds ([3 x i8]* @.str75, i32 0, i32 0)) #8
  %cmp12 = icmp eq i32 %call11, 0
  br i1 %cmp12, label %land.lhs.true, label %if.else19

land.lhs.true:                                    ; preds = %if.else
  %14 = load i32* %argn, align 4
  %add = add nsw i32 %14, 1
  %15 = load i32* %argc.addr, align 4
  %cmp14 = icmp slt i32 %add, %15
  br i1 %cmp14, label %if.then16, label %if.else19

if.then16:                                        ; preds = %land.lhs.true
  %16 = load i32* %argn, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %argn, align 4
  %17 = load i32* %argn, align 4
  %idxprom17 = sext i32 %17 to i64
  %18 = load i8*** %argv.addr, align 8
  %arrayidx18 = getelementptr inbounds i8** %18, i64 %idxprom17
  %19 = load i8** %arrayidx18, align 8
  call void @read_config(i8* %19)
  br label %if.end274

if.else19:                                        ; preds = %land.lhs.true, %if.else
  %20 = load i32* %argn, align 4
  %idxprom20 = sext i32 %20 to i64
  %21 = load i8*** %argv.addr, align 8
  %arrayidx21 = getelementptr inbounds i8** %21, i64 %idxprom20
  %22 = load i8** %arrayidx21, align 8
  %call22 = call i32 @strcmp(i8* %22, i8* getelementptr inbounds ([3 x i8]* @.str76, i32 0, i32 0)) #8
  %cmp23 = icmp eq i32 %call22, 0
  br i1 %cmp23, label %land.lhs.true25, label %if.else35

land.lhs.true25:                                  ; preds = %if.else19
  %23 = load i32* %argn, align 4
  %add26 = add nsw i32 %23, 1
  %24 = load i32* %argc.addr, align 4
  %cmp27 = icmp slt i32 %add26, %24
  br i1 %cmp27, label %if.then29, label %if.else35

if.then29:                                        ; preds = %land.lhs.true25
  %25 = load i32* %argn, align 4
  %inc30 = add nsw i32 %25, 1
  store i32 %inc30, i32* %argn, align 4
  %26 = load i32* %argn, align 4
  %idxprom31 = sext i32 %26 to i64
  %27 = load i8*** %argv.addr, align 8
  %arrayidx32 = getelementptr inbounds i8** %27, i64 %idxprom31
  %28 = load i8** %arrayidx32, align 8
  %call33 = call i32 @atoi(i8* %28) #8
  %conv34 = trunc i32 %call33 to i16
  store i16 %conv34, i16* @port, align 2
  br label %if.end273

if.else35:                                        ; preds = %land.lhs.true25, %if.else19
  %29 = load i32* %argn, align 4
  %idxprom36 = sext i32 %29 to i64
  %30 = load i8*** %argv.addr, align 8
  %arrayidx37 = getelementptr inbounds i8** %30, i64 %idxprom36
  %31 = load i8** %arrayidx37, align 8
  %call38 = call i32 @strcmp(i8* %31, i8* getelementptr inbounds ([3 x i8]* @.str77, i32 0, i32 0)) #8
  %cmp39 = icmp eq i32 %call38, 0
  br i1 %cmp39, label %land.lhs.true41, label %if.else49

land.lhs.true41:                                  ; preds = %if.else35
  %32 = load i32* %argn, align 4
  %add42 = add nsw i32 %32, 1
  %33 = load i32* %argc.addr, align 4
  %cmp43 = icmp slt i32 %add42, %33
  br i1 %cmp43, label %if.then45, label %if.else49

if.then45:                                        ; preds = %land.lhs.true41
  %34 = load i32* %argn, align 4
  %inc46 = add nsw i32 %34, 1
  store i32 %inc46, i32* %argn, align 4
  %35 = load i32* %argn, align 4
  %idxprom47 = sext i32 %35 to i64
  %36 = load i8*** %argv.addr, align 8
  %arrayidx48 = getelementptr inbounds i8** %36, i64 %idxprom47
  %37 = load i8** %arrayidx48, align 8
  store i8* %37, i8** @dir, align 8
  br label %if.end272

if.else49:                                        ; preds = %land.lhs.true41, %if.else35
  %38 = load i32* %argn, align 4
  %idxprom50 = sext i32 %38 to i64
  %39 = load i8*** %argv.addr, align 8
  %arrayidx51 = getelementptr inbounds i8** %39, i64 %idxprom50
  %40 = load i8** %arrayidx51, align 8
  %call52 = call i32 @strcmp(i8* %40, i8* getelementptr inbounds ([3 x i8]* @.str78, i32 0, i32 0)) #8
  %cmp53 = icmp eq i32 %call52, 0
  br i1 %cmp53, label %if.then55, label %if.else56

if.then55:                                        ; preds = %if.else49
  store i32 1, i32* @do_chroot, align 4
  store i32 1, i32* @no_symlink_check, align 4
  br label %if.end271

if.else56:                                        ; preds = %if.else49
  %41 = load i32* %argn, align 4
  %idxprom57 = sext i32 %41 to i64
  %42 = load i8*** %argv.addr, align 8
  %arrayidx58 = getelementptr inbounds i8** %42, i64 %idxprom57
  %43 = load i8** %arrayidx58, align 8
  %call59 = call i32 @strcmp(i8* %43, i8* getelementptr inbounds ([5 x i8]* @.str79, i32 0, i32 0)) #8
  %cmp60 = icmp eq i32 %call59, 0
  br i1 %cmp60, label %if.then62, label %if.else63

if.then62:                                        ; preds = %if.else56
  store i32 0, i32* @do_chroot, align 4
  store i32 0, i32* @no_symlink_check, align 4
  br label %if.end270

if.else63:                                        ; preds = %if.else56
  %44 = load i32* %argn, align 4
  %idxprom64 = sext i32 %44 to i64
  %45 = load i8*** %argv.addr, align 8
  %arrayidx65 = getelementptr inbounds i8** %45, i64 %idxprom64
  %46 = load i8** %arrayidx65, align 8
  %call66 = call i32 @strcmp(i8* %46, i8* getelementptr inbounds ([4 x i8]* @.str80, i32 0, i32 0)) #8
  %cmp67 = icmp eq i32 %call66, 0
  br i1 %cmp67, label %land.lhs.true69, label %if.else77

land.lhs.true69:                                  ; preds = %if.else63
  %47 = load i32* %argn, align 4
  %add70 = add nsw i32 %47, 1
  %48 = load i32* %argc.addr, align 4
  %cmp71 = icmp slt i32 %add70, %48
  br i1 %cmp71, label %if.then73, label %if.else77

if.then73:                                        ; preds = %land.lhs.true69
  %49 = load i32* %argn, align 4
  %inc74 = add nsw i32 %49, 1
  store i32 %inc74, i32* %argn, align 4
  %50 = load i32* %argn, align 4
  %idxprom75 = sext i32 %50 to i64
  %51 = load i8*** %argv.addr, align 8
  %arrayidx76 = getelementptr inbounds i8** %51, i64 %idxprom75
  %52 = load i8** %arrayidx76, align 8
  store i8* %52, i8** @data_dir, align 8
  br label %if.end269

if.else77:                                        ; preds = %land.lhs.true69, %if.else63
  %53 = load i32* %argn, align 4
  %idxprom78 = sext i32 %53 to i64
  %54 = load i8*** %argv.addr, align 8
  %arrayidx79 = getelementptr inbounds i8** %54, i64 %idxprom78
  %55 = load i8** %arrayidx79, align 8
  %call80 = call i32 @strcmp(i8* %55, i8* getelementptr inbounds ([3 x i8]* @.str81, i32 0, i32 0)) #8
  %cmp81 = icmp eq i32 %call80, 0
  br i1 %cmp81, label %if.then83, label %if.else84

if.then83:                                        ; preds = %if.else77
  store i32 0, i32* @no_symlink_check, align 4
  br label %if.end268

if.else84:                                        ; preds = %if.else77
  %56 = load i32* %argn, align 4
  %idxprom85 = sext i32 %56 to i64
  %57 = load i8*** %argv.addr, align 8
  %arrayidx86 = getelementptr inbounds i8** %57, i64 %idxprom85
  %58 = load i8** %arrayidx86, align 8
  %call87 = call i32 @strcmp(i8* %58, i8* getelementptr inbounds ([5 x i8]* @.str82, i32 0, i32 0)) #8
  %cmp88 = icmp eq i32 %call87, 0
  br i1 %cmp88, label %if.then90, label %if.else91

if.then90:                                        ; preds = %if.else84
  store i32 1, i32* @no_symlink_check, align 4
  br label %if.end267

if.else91:                                        ; preds = %if.else84
  %59 = load i32* %argn, align 4
  %idxprom92 = sext i32 %59 to i64
  %60 = load i8*** %argv.addr, align 8
  %arrayidx93 = getelementptr inbounds i8** %60, i64 %idxprom92
  %61 = load i8** %arrayidx93, align 8
  %call94 = call i32 @strcmp(i8* %61, i8* getelementptr inbounds ([3 x i8]* @.str83, i32 0, i32 0)) #8
  %cmp95 = icmp eq i32 %call94, 0
  br i1 %cmp95, label %land.lhs.true97, label %if.else105

land.lhs.true97:                                  ; preds = %if.else91
  %62 = load i32* %argn, align 4
  %add98 = add nsw i32 %62, 1
  %63 = load i32* %argc.addr, align 4
  %cmp99 = icmp slt i32 %add98, %63
  br i1 %cmp99, label %if.then101, label %if.else105

if.then101:                                       ; preds = %land.lhs.true97
  %64 = load i32* %argn, align 4
  %inc102 = add nsw i32 %64, 1
  store i32 %inc102, i32* %argn, align 4
  %65 = load i32* %argn, align 4
  %idxprom103 = sext i32 %65 to i64
  %66 = load i8*** %argv.addr, align 8
  %arrayidx104 = getelementptr inbounds i8** %66, i64 %idxprom103
  %67 = load i8** %arrayidx104, align 8
  store i8* %67, i8** @user, align 8
  br label %if.end266

if.else105:                                       ; preds = %land.lhs.true97, %if.else91
  %68 = load i32* %argn, align 4
  %idxprom106 = sext i32 %68 to i64
  %69 = load i8*** %argv.addr, align 8
  %arrayidx107 = getelementptr inbounds i8** %69, i64 %idxprom106
  %70 = load i8** %arrayidx107, align 8
  %call108 = call i32 @strcmp(i8* %70, i8* getelementptr inbounds ([3 x i8]* @.str84, i32 0, i32 0)) #8
  %cmp109 = icmp eq i32 %call108, 0
  br i1 %cmp109, label %land.lhs.true111, label %if.else119

land.lhs.true111:                                 ; preds = %if.else105
  %71 = load i32* %argn, align 4
  %add112 = add nsw i32 %71, 1
  %72 = load i32* %argc.addr, align 4
  %cmp113 = icmp slt i32 %add112, %72
  br i1 %cmp113, label %if.then115, label %if.else119

if.then115:                                       ; preds = %land.lhs.true111
  %73 = load i32* %argn, align 4
  %inc116 = add nsw i32 %73, 1
  store i32 %inc116, i32* %argn, align 4
  %74 = load i32* %argn, align 4
  %idxprom117 = sext i32 %74 to i64
  %75 = load i8*** %argv.addr, align 8
  %arrayidx118 = getelementptr inbounds i8** %75, i64 %idxprom117
  %76 = load i8** %arrayidx118, align 8
  store i8* %76, i8** @cgi_pattern, align 8
  br label %if.end265

if.else119:                                       ; preds = %land.lhs.true111, %if.else105
  %77 = load i32* %argn, align 4
  %idxprom120 = sext i32 %77 to i64
  %78 = load i8*** %argv.addr, align 8
  %arrayidx121 = getelementptr inbounds i8** %78, i64 %idxprom120
  %79 = load i8** %arrayidx121, align 8
  %call122 = call i32 @strcmp(i8* %79, i8* getelementptr inbounds ([3 x i8]* @.str85, i32 0, i32 0)) #8
  %cmp123 = icmp eq i32 %call122, 0
  br i1 %cmp123, label %land.lhs.true125, label %if.else133

land.lhs.true125:                                 ; preds = %if.else119
  %80 = load i32* %argn, align 4
  %add126 = add nsw i32 %80, 1
  %81 = load i32* %argc.addr, align 4
  %cmp127 = icmp slt i32 %add126, %81
  br i1 %cmp127, label %if.then129, label %if.else133

if.then129:                                       ; preds = %land.lhs.true125
  %82 = load i32* %argn, align 4
  %inc130 = add nsw i32 %82, 1
  store i32 %inc130, i32* %argn, align 4
  %83 = load i32* %argn, align 4
  %idxprom131 = sext i32 %83 to i64
  %84 = load i8*** %argv.addr, align 8
  %arrayidx132 = getelementptr inbounds i8** %84, i64 %idxprom131
  %85 = load i8** %arrayidx132, align 8
  store i8* %85, i8** @throttlefile, align 8
  br label %if.end264

if.else133:                                       ; preds = %land.lhs.true125, %if.else119
  %86 = load i32* %argn, align 4
  %idxprom134 = sext i32 %86 to i64
  %87 = load i8*** %argv.addr, align 8
  %arrayidx135 = getelementptr inbounds i8** %87, i64 %idxprom134
  %88 = load i8** %arrayidx135, align 8
  %call136 = call i32 @strcmp(i8* %88, i8* getelementptr inbounds ([3 x i8]* @.str86, i32 0, i32 0)) #8
  %cmp137 = icmp eq i32 %call136, 0
  br i1 %cmp137, label %land.lhs.true139, label %if.else147

land.lhs.true139:                                 ; preds = %if.else133
  %89 = load i32* %argn, align 4
  %add140 = add nsw i32 %89, 1
  %90 = load i32* %argc.addr, align 4
  %cmp141 = icmp slt i32 %add140, %90
  br i1 %cmp141, label %if.then143, label %if.else147

if.then143:                                       ; preds = %land.lhs.true139
  %91 = load i32* %argn, align 4
  %inc144 = add nsw i32 %91, 1
  store i32 %inc144, i32* %argn, align 4
  %92 = load i32* %argn, align 4
  %idxprom145 = sext i32 %92 to i64
  %93 = load i8*** %argv.addr, align 8
  %arrayidx146 = getelementptr inbounds i8** %93, i64 %idxprom145
  %94 = load i8** %arrayidx146, align 8
  store i8* %94, i8** @hostname, align 8
  br label %if.end263

if.else147:                                       ; preds = %land.lhs.true139, %if.else133
  %95 = load i32* %argn, align 4
  %idxprom148 = sext i32 %95 to i64
  %96 = load i8*** %argv.addr, align 8
  %arrayidx149 = getelementptr inbounds i8** %96, i64 %idxprom148
  %97 = load i8** %arrayidx149, align 8
  %call150 = call i32 @strcmp(i8* %97, i8* getelementptr inbounds ([3 x i8]* @.str87, i32 0, i32 0)) #8
  %cmp151 = icmp eq i32 %call150, 0
  br i1 %cmp151, label %land.lhs.true153, label %if.else161

land.lhs.true153:                                 ; preds = %if.else147
  %98 = load i32* %argn, align 4
  %add154 = add nsw i32 %98, 1
  %99 = load i32* %argc.addr, align 4
  %cmp155 = icmp slt i32 %add154, %99
  br i1 %cmp155, label %if.then157, label %if.else161

if.then157:                                       ; preds = %land.lhs.true153
  %100 = load i32* %argn, align 4
  %inc158 = add nsw i32 %100, 1
  store i32 %inc158, i32* %argn, align 4
  %101 = load i32* %argn, align 4
  %idxprom159 = sext i32 %101 to i64
  %102 = load i8*** %argv.addr, align 8
  %arrayidx160 = getelementptr inbounds i8** %102, i64 %idxprom159
  %103 = load i8** %arrayidx160, align 8
  store i8* %103, i8** @logfile, align 8
  br label %if.end262

if.else161:                                       ; preds = %land.lhs.true153, %if.else147
  %104 = load i32* %argn, align 4
  %idxprom162 = sext i32 %104 to i64
  %105 = load i8*** %argv.addr, align 8
  %arrayidx163 = getelementptr inbounds i8** %105, i64 %idxprom162
  %106 = load i8** %arrayidx163, align 8
  %call164 = call i32 @strcmp(i8* %106, i8* getelementptr inbounds ([3 x i8]* @.str88, i32 0, i32 0)) #8
  %cmp165 = icmp eq i32 %call164, 0
  br i1 %cmp165, label %if.then167, label %if.else168

if.then167:                                       ; preds = %if.else161
  store i32 1, i32* @do_vhost, align 4
  br label %if.end261

if.else168:                                       ; preds = %if.else161
  %107 = load i32* %argn, align 4
  %idxprom169 = sext i32 %107 to i64
  %108 = load i8*** %argv.addr, align 8
  %arrayidx170 = getelementptr inbounds i8** %108, i64 %idxprom169
  %109 = load i8** %arrayidx170, align 8
  %call171 = call i32 @strcmp(i8* %109, i8* getelementptr inbounds ([5 x i8]* @.str89, i32 0, i32 0)) #8
  %cmp172 = icmp eq i32 %call171, 0
  br i1 %cmp172, label %if.then174, label %if.else175

if.then174:                                       ; preds = %if.else168
  store i32 0, i32* @do_vhost, align 4
  br label %if.end260

if.else175:                                       ; preds = %if.else168
  %110 = load i32* %argn, align 4
  %idxprom176 = sext i32 %110 to i64
  %111 = load i8*** %argv.addr, align 8
  %arrayidx177 = getelementptr inbounds i8** %111, i64 %idxprom176
  %112 = load i8** %arrayidx177, align 8
  %call178 = call i32 @strcmp(i8* %112, i8* getelementptr inbounds ([3 x i8]* @.str90, i32 0, i32 0)) #8
  %cmp179 = icmp eq i32 %call178, 0
  br i1 %cmp179, label %if.then181, label %if.else182

if.then181:                                       ; preds = %if.else175
  store i32 1, i32* @do_global_passwd, align 4
  br label %if.end259

if.else182:                                       ; preds = %if.else175
  %113 = load i32* %argn, align 4
  %idxprom183 = sext i32 %113 to i64
  %114 = load i8*** %argv.addr, align 8
  %arrayidx184 = getelementptr inbounds i8** %114, i64 %idxprom183
  %115 = load i8** %arrayidx184, align 8
  %call185 = call i32 @strcmp(i8* %115, i8* getelementptr inbounds ([5 x i8]* @.str91, i32 0, i32 0)) #8
  %cmp186 = icmp eq i32 %call185, 0
  br i1 %cmp186, label %if.then188, label %if.else189

if.then188:                                       ; preds = %if.else182
  store i32 0, i32* @do_global_passwd, align 4
  br label %if.end258

if.else189:                                       ; preds = %if.else182
  %116 = load i32* %argn, align 4
  %idxprom190 = sext i32 %116 to i64
  %117 = load i8*** %argv.addr, align 8
  %arrayidx191 = getelementptr inbounds i8** %117, i64 %idxprom190
  %118 = load i8** %arrayidx191, align 8
  %call192 = call i32 @strcmp(i8* %118, i8* getelementptr inbounds ([3 x i8]* @.str92, i32 0, i32 0)) #8
  %cmp193 = icmp eq i32 %call192, 0
  br i1 %cmp193, label %land.lhs.true195, label %if.else203

land.lhs.true195:                                 ; preds = %if.else189
  %119 = load i32* %argn, align 4
  %add196 = add nsw i32 %119, 1
  %120 = load i32* %argc.addr, align 4
  %cmp197 = icmp slt i32 %add196, %120
  br i1 %cmp197, label %if.then199, label %if.else203

if.then199:                                       ; preds = %land.lhs.true195
  %121 = load i32* %argn, align 4
  %inc200 = add nsw i32 %121, 1
  store i32 %inc200, i32* %argn, align 4
  %122 = load i32* %argn, align 4
  %idxprom201 = sext i32 %122 to i64
  %123 = load i8*** %argv.addr, align 8
  %arrayidx202 = getelementptr inbounds i8** %123, i64 %idxprom201
  %124 = load i8** %arrayidx202, align 8
  store i8* %124, i8** @pidfile, align 8
  br label %if.end257

if.else203:                                       ; preds = %land.lhs.true195, %if.else189
  %125 = load i32* %argn, align 4
  %idxprom204 = sext i32 %125 to i64
  %126 = load i8*** %argv.addr, align 8
  %arrayidx205 = getelementptr inbounds i8** %126, i64 %idxprom204
  %127 = load i8** %arrayidx205, align 8
  %call206 = call i32 @strcmp(i8* %127, i8* getelementptr inbounds ([3 x i8]* @.str93, i32 0, i32 0)) #8
  %cmp207 = icmp eq i32 %call206, 0
  br i1 %cmp207, label %land.lhs.true209, label %if.else217

land.lhs.true209:                                 ; preds = %if.else203
  %128 = load i32* %argn, align 4
  %add210 = add nsw i32 %128, 1
  %129 = load i32* %argc.addr, align 4
  %cmp211 = icmp slt i32 %add210, %129
  br i1 %cmp211, label %if.then213, label %if.else217

if.then213:                                       ; preds = %land.lhs.true209
  %130 = load i32* %argn, align 4
  %inc214 = add nsw i32 %130, 1
  store i32 %inc214, i32* %argn, align 4
  %131 = load i32* %argn, align 4
  %idxprom215 = sext i32 %131 to i64
  %132 = load i8*** %argv.addr, align 8
  %arrayidx216 = getelementptr inbounds i8** %132, i64 %idxprom215
  %133 = load i8** %arrayidx216, align 8
  store i8* %133, i8** @charset, align 8
  br label %if.end256

if.else217:                                       ; preds = %land.lhs.true209, %if.else203
  %134 = load i32* %argn, align 4
  %idxprom218 = sext i32 %134 to i64
  %135 = load i8*** %argv.addr, align 8
  %arrayidx219 = getelementptr inbounds i8** %135, i64 %idxprom218
  %136 = load i8** %arrayidx219, align 8
  %call220 = call i32 @strcmp(i8* %136, i8* getelementptr inbounds ([3 x i8]* @.str94, i32 0, i32 0)) #8
  %cmp221 = icmp eq i32 %call220, 0
  br i1 %cmp221, label %land.lhs.true223, label %if.else231

land.lhs.true223:                                 ; preds = %if.else217
  %137 = load i32* %argn, align 4
  %add224 = add nsw i32 %137, 1
  %138 = load i32* %argc.addr, align 4
  %cmp225 = icmp slt i32 %add224, %138
  br i1 %cmp225, label %if.then227, label %if.else231

if.then227:                                       ; preds = %land.lhs.true223
  %139 = load i32* %argn, align 4
  %inc228 = add nsw i32 %139, 1
  store i32 %inc228, i32* %argn, align 4
  %140 = load i32* %argn, align 4
  %idxprom229 = sext i32 %140 to i64
  %141 = load i8*** %argv.addr, align 8
  %arrayidx230 = getelementptr inbounds i8** %141, i64 %idxprom229
  %142 = load i8** %arrayidx230, align 8
  store i8* %142, i8** @p3p, align 8
  br label %if.end255

if.else231:                                       ; preds = %land.lhs.true223, %if.else217
  %143 = load i32* %argn, align 4
  %idxprom232 = sext i32 %143 to i64
  %144 = load i8*** %argv.addr, align 8
  %arrayidx233 = getelementptr inbounds i8** %144, i64 %idxprom232
  %145 = load i8** %arrayidx233, align 8
  %call234 = call i32 @strcmp(i8* %145, i8* getelementptr inbounds ([3 x i8]* @.str95, i32 0, i32 0)) #8
  %cmp235 = icmp eq i32 %call234, 0
  br i1 %cmp235, label %land.lhs.true237, label %if.else246

land.lhs.true237:                                 ; preds = %if.else231
  %146 = load i32* %argn, align 4
  %add238 = add nsw i32 %146, 1
  %147 = load i32* %argc.addr, align 4
  %cmp239 = icmp slt i32 %add238, %147
  br i1 %cmp239, label %if.then241, label %if.else246

if.then241:                                       ; preds = %land.lhs.true237
  %148 = load i32* %argn, align 4
  %inc242 = add nsw i32 %148, 1
  store i32 %inc242, i32* %argn, align 4
  %149 = load i32* %argn, align 4
  %idxprom243 = sext i32 %149 to i64
  %150 = load i8*** %argv.addr, align 8
  %arrayidx244 = getelementptr inbounds i8** %150, i64 %idxprom243
  %151 = load i8** %arrayidx244, align 8
  %call245 = call i32 @atoi(i8* %151) #8
  store i32 %call245, i32* @max_age, align 4
  br label %if.end254

if.else246:                                       ; preds = %land.lhs.true237, %if.else231
  %152 = load i32* %argn, align 4
  %idxprom247 = sext i32 %152 to i64
  %153 = load i8*** %argv.addr, align 8
  %arrayidx248 = getelementptr inbounds i8** %153, i64 %idxprom247
  %154 = load i8** %arrayidx248, align 8
  %call249 = call i32 @strcmp(i8* %154, i8* getelementptr inbounds ([3 x i8]* @.str96, i32 0, i32 0)) #8
  %cmp250 = icmp eq i32 %call249, 0
  br i1 %cmp250, label %if.then252, label %if.else253

if.then252:                                       ; preds = %if.else246
  store i32 1, i32* @debug, align 4
  br label %if.end

if.else253:                                       ; preds = %if.else246
  call void @usage()
  br label %if.end

if.end:                                           ; preds = %if.else253, %if.then252
  br label %if.end254

if.end254:                                        ; preds = %if.end, %if.then241
  br label %if.end255

if.end255:                                        ; preds = %if.end254, %if.then227
  br label %if.end256

if.end256:                                        ; preds = %if.end255, %if.then213
  br label %if.end257

if.end257:                                        ; preds = %if.end256, %if.then199
  br label %if.end258

if.end258:                                        ; preds = %if.end257, %if.then188
  br label %if.end259

if.end259:                                        ; preds = %if.end258, %if.then181
  br label %if.end260

if.end260:                                        ; preds = %if.end259, %if.then174
  br label %if.end261

if.end261:                                        ; preds = %if.end260, %if.then167
  br label %if.end262

if.end262:                                        ; preds = %if.end261, %if.then157
  br label %if.end263

if.end263:                                        ; preds = %if.end262, %if.then143
  br label %if.end264

if.end264:                                        ; preds = %if.end263, %if.then129
  br label %if.end265

if.end265:                                        ; preds = %if.end264, %if.then115
  br label %if.end266

if.end266:                                        ; preds = %if.end265, %if.then101
  br label %if.end267

if.end267:                                        ; preds = %if.end266, %if.then90
  br label %if.end268

if.end268:                                        ; preds = %if.end267, %if.then83
  br label %if.end269

if.end269:                                        ; preds = %if.end268, %if.then73
  br label %if.end270

if.end270:                                        ; preds = %if.end269, %if.then62
  br label %if.end271

if.end271:                                        ; preds = %if.end270, %if.then55
  br label %if.end272

if.end272:                                        ; preds = %if.end271, %if.then45
  br label %if.end273

if.end273:                                        ; preds = %if.end272, %if.then29
  br label %if.end274

if.end274:                                        ; preds = %if.end273, %if.then16
  br label %if.end275

if.end275:                                        ; preds = %if.end274
  %155 = load i32* %argn, align 4
  %inc276 = add nsw i32 %155, 1
  store i32 %inc276, i32* %argn, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  %156 = load i32* %argn, align 4
  %157 = load i32* %argc.addr, align 4
  %cmp277 = icmp ne i32 %156, %157
  br i1 %cmp277, label %if.then279, label %if.end280

if.then279:                                       ; preds = %while.end
  call void @usage()
  br label %if.end280

if.end280:                                        ; preds = %if.then279, %while.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @lookup_hostname(%union.httpd_sockaddr* %sa4P, i64 %sa4_len, i32* %gotv4P, %union.httpd_sockaddr* %sa6P, i64 %sa6_len, i32* %gotv6P) #0 {
entry:
  %sa4P.addr = alloca %union.httpd_sockaddr*, align 8
  %sa4_len.addr = alloca i64, align 8
  %gotv4P.addr = alloca i32*, align 8
  %sa6P.addr = alloca %union.httpd_sockaddr*, align 8
  %sa6_len.addr = alloca i64, align 8
  %gotv6P.addr = alloca i32*, align 8
  %hints = alloca %struct.addrinfo, align 8
  %portstr = alloca [10 x i8], align 1
  %gaierr = alloca i32, align 4
  %ai = alloca %struct.addrinfo*, align 8
  %ai2 = alloca %struct.addrinfo*, align 8
  %aiv6 = alloca %struct.addrinfo*, align 8
  %aiv4 = alloca %struct.addrinfo*, align 8
  store %union.httpd_sockaddr* %sa4P, %union.httpd_sockaddr** %sa4P.addr, align 8
  store i64 %sa4_len, i64* %sa4_len.addr, align 8
  store i32* %gotv4P, i32** %gotv4P.addr, align 8
  store %union.httpd_sockaddr* %sa6P, %union.httpd_sockaddr** %sa6P.addr, align 8
  store i64 %sa6_len, i64* %sa6_len.addr, align 8
  store i32* %gotv6P, i32** %gotv6P.addr, align 8
  %0 = bitcast %struct.addrinfo* %hints to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 48, i32 8, i1 false)
  %ai_family = getelementptr inbounds %struct.addrinfo* %hints, i32 0, i32 1
  store i32 0, i32* %ai_family, align 4
  %ai_flags = getelementptr inbounds %struct.addrinfo* %hints, i32 0, i32 0
  store i32 1, i32* %ai_flags, align 4
  %ai_socktype = getelementptr inbounds %struct.addrinfo* %hints, i32 0, i32 2
  store i32 1, i32* %ai_socktype, align 4
  %arraydecay = getelementptr inbounds [10 x i8]* %portstr, i32 0, i32 0
  %1 = load i16* @port, align 2
  %conv = zext i16 %1 to i32
  %call = call i32 (i8*, i64, i8*, ...)* @snprintf(i8* %arraydecay, i64 10, i8* getelementptr inbounds ([3 x i8]* @.str66, i32 0, i32 0), i32 %conv) #5
  %2 = load i8** @hostname, align 8
  %arraydecay1 = getelementptr inbounds [10 x i8]* %portstr, i32 0, i32 0
  %call2 = call i32 @getaddrinfo(i8* %2, i8* %arraydecay1, %struct.addrinfo* %hints, %struct.addrinfo** %ai)
  store i32 %call2, i32* %gaierr, align 4
  %cmp = icmp ne i32 %call2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8** @hostname, align 8
  %4 = load i32* %gaierr, align 4
  %call4 = call i8* @gai_strerror(i32 %4) #5
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([26 x i8]* @.str67, i32 0, i32 0), i8* %3, i8* %call4)
  %5 = load %struct._IO_FILE** @stderr, align 8
  %6 = load i8** @argv0, align 8
  %7 = load i8** @hostname, align 8
  %8 = load i32* %gaierr, align 4
  %call5 = call i8* @gai_strerror(i32 %8) #5
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([25 x i8]* @.str68, i32 0, i32 0), i8* %6, i8* %7, i8* %call5)
  call void @exit(i32 1) #9
  unreachable

if.end:                                           ; preds = %entry
  store %struct.addrinfo* null, %struct.addrinfo** %aiv6, align 8
  store %struct.addrinfo* null, %struct.addrinfo** %aiv4, align 8
  %9 = load %struct.addrinfo** %ai, align 8
  store %struct.addrinfo* %9, %struct.addrinfo** %ai2, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load %struct.addrinfo** %ai2, align 8
  %cmp7 = icmp ne %struct.addrinfo* %10, null
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.addrinfo** %ai2, align 8
  %ai_family9 = getelementptr inbounds %struct.addrinfo* %11, i32 0, i32 1
  %12 = load i32* %ai_family9, align 4
  switch i32 %12, label %sw.epilog [
    i32 10, label %sw.bb
    i32 2, label %sw.bb14
  ]

sw.bb:                                            ; preds = %for.body
  %13 = load %struct.addrinfo** %aiv6, align 8
  %cmp10 = icmp eq %struct.addrinfo* %13, null
  br i1 %cmp10, label %if.then12, label %if.end13

if.then12:                                        ; preds = %sw.bb
  %14 = load %struct.addrinfo** %ai2, align 8
  store %struct.addrinfo* %14, %struct.addrinfo** %aiv6, align 8
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %sw.bb
  br label %sw.epilog

sw.bb14:                                          ; preds = %for.body
  %15 = load %struct.addrinfo** %aiv4, align 8
  %cmp15 = icmp eq %struct.addrinfo* %15, null
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %sw.bb14
  %16 = load %struct.addrinfo** %ai2, align 8
  store %struct.addrinfo* %16, %struct.addrinfo** %aiv4, align 8
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %sw.bb14
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end18, %if.end13, %for.body
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %17 = load %struct.addrinfo** %ai2, align 8
  %ai_next = getelementptr inbounds %struct.addrinfo* %17, i32 0, i32 7
  %18 = load %struct.addrinfo** %ai_next, align 8
  store %struct.addrinfo* %18, %struct.addrinfo** %ai2, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %19 = load %struct.addrinfo** %aiv6, align 8
  %cmp19 = icmp eq %struct.addrinfo* %19, null
  br i1 %cmp19, label %if.then21, label %if.else

if.then21:                                        ; preds = %for.end
  %20 = load i32** %gotv6P.addr, align 8
  store i32 0, i32* %20, align 4
  br label %if.end31

if.else:                                          ; preds = %for.end
  %21 = load i64* %sa6_len.addr, align 8
  %22 = load %struct.addrinfo** %aiv6, align 8
  %ai_addrlen = getelementptr inbounds %struct.addrinfo* %22, i32 0, i32 4
  %23 = load i32* %ai_addrlen, align 4
  %conv22 = zext i32 %23 to i64
  %cmp23 = icmp ult i64 %21, %conv22
  br i1 %cmp23, label %if.then25, label %if.end28

if.then25:                                        ; preds = %if.else
  %24 = load i8** @hostname, align 8
  %25 = load i64* %sa6_len.addr, align 8
  %26 = load %struct.addrinfo** %aiv6, align 8
  %ai_addrlen26 = getelementptr inbounds %struct.addrinfo* %26, i32 0, i32 4
  %27 = load i32* %ai_addrlen26, align 4
  %conv27 = zext i32 %27 to i64
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([39 x i8]* @.str69, i32 0, i32 0), i8* %24, i64 %25, i64 %conv27)
  call void @exit(i32 1) #9
  unreachable

if.end28:                                         ; preds = %if.else
  %28 = load %union.httpd_sockaddr** %sa6P.addr, align 8
  %29 = bitcast %union.httpd_sockaddr* %28 to i8*
  %30 = load i64* %sa6_len.addr, align 8
  call void @llvm.memset.p0i8.i64(i8* %29, i8 0, i64 %30, i32 8, i1 false)
  %31 = load %union.httpd_sockaddr** %sa6P.addr, align 8
  %32 = bitcast %union.httpd_sockaddr* %31 to i8*
  %33 = load %struct.addrinfo** %aiv6, align 8
  %ai_addr = getelementptr inbounds %struct.addrinfo* %33, i32 0, i32 5
  %34 = load %struct.sockaddr** %ai_addr, align 8
  %35 = bitcast %struct.sockaddr* %34 to i8*
  %36 = load %struct.addrinfo** %aiv6, align 8
  %ai_addrlen29 = getelementptr inbounds %struct.addrinfo* %36, i32 0, i32 4
  %37 = load i32* %ai_addrlen29, align 4
  %conv30 = zext i32 %37 to i64
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %32, i8* %35, i64 %conv30, i32 2, i1 false)
  %38 = load i32** %gotv6P.addr, align 8
  store i32 1, i32* %38, align 4
  br label %if.end31

if.end31:                                         ; preds = %if.end28, %if.then21
  %39 = load %struct.addrinfo** %aiv4, align 8
  %cmp32 = icmp eq %struct.addrinfo* %39, null
  br i1 %cmp32, label %if.then34, label %if.else35

if.then34:                                        ; preds = %if.end31
  %40 = load i32** %gotv4P.addr, align 8
  store i32 0, i32* %40, align 4
  br label %if.end47

if.else35:                                        ; preds = %if.end31
  %41 = load i64* %sa4_len.addr, align 8
  %42 = load %struct.addrinfo** %aiv4, align 8
  %ai_addrlen36 = getelementptr inbounds %struct.addrinfo* %42, i32 0, i32 4
  %43 = load i32* %ai_addrlen36, align 4
  %conv37 = zext i32 %43 to i64
  %cmp38 = icmp ult i64 %41, %conv37
  br i1 %cmp38, label %if.then40, label %if.end43

if.then40:                                        ; preds = %if.else35
  %44 = load i8** @hostname, align 8
  %45 = load i64* %sa4_len.addr, align 8
  %46 = load %struct.addrinfo** %aiv4, align 8
  %ai_addrlen41 = getelementptr inbounds %struct.addrinfo* %46, i32 0, i32 4
  %47 = load i32* %ai_addrlen41, align 4
  %conv42 = zext i32 %47 to i64
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([39 x i8]* @.str69, i32 0, i32 0), i8* %44, i64 %45, i64 %conv42)
  call void @exit(i32 1) #9
  unreachable

if.end43:                                         ; preds = %if.else35
  %48 = load %union.httpd_sockaddr** %sa4P.addr, align 8
  %49 = bitcast %union.httpd_sockaddr* %48 to i8*
  %50 = load i64* %sa4_len.addr, align 8
  call void @llvm.memset.p0i8.i64(i8* %49, i8 0, i64 %50, i32 8, i1 false)
  %51 = load %union.httpd_sockaddr** %sa4P.addr, align 8
  %52 = bitcast %union.httpd_sockaddr* %51 to i8*
  %53 = load %struct.addrinfo** %aiv4, align 8
  %ai_addr44 = getelementptr inbounds %struct.addrinfo* %53, i32 0, i32 5
  %54 = load %struct.sockaddr** %ai_addr44, align 8
  %55 = bitcast %struct.sockaddr* %54 to i8*
  %56 = load %struct.addrinfo** %aiv4, align 8
  %ai_addrlen45 = getelementptr inbounds %struct.addrinfo* %56, i32 0, i32 4
  %57 = load i32* %ai_addrlen45, align 4
  %conv46 = zext i32 %57 to i64
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %52, i8* %55, i64 %conv46, i32 2, i1 false)
  %58 = load i32** %gotv4P.addr, align 8
  store i32 1, i32* %58, align 4
  br label %if.end47

if.end47:                                         ; preds = %if.end43, %if.then34
  %59 = load %struct.addrinfo** %ai, align 8
  call void @freeaddrinfo(%struct.addrinfo* %59) #5
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @read_throttlefile(i8* %tf) #0 {
entry:
  %tf.addr = alloca i8*, align 8
  %fp = alloca %struct._IO_FILE*, align 8
  %buf = alloca [5000 x i8], align 16
  %cp = alloca i8*, align 8
  %len = alloca i32, align 4
  %pattern = alloca [5000 x i8], align 16
  %max_limit = alloca i64, align 8
  %min_limit = alloca i64, align 8
  %tv = alloca %struct.timeval, align 8
  store i8* %tf, i8** %tf.addr, align 8
  %0 = load i8** %tf.addr, align 8
  %call = call %struct._IO_FILE* @fopen(i8* %0, i8* getelementptr inbounds ([2 x i8]* @.str56, i32 0, i32 0))
  store %struct._IO_FILE* %call, %struct._IO_FILE** %fp, align 8
  %1 = load %struct._IO_FILE** %fp, align 8
  %cmp = icmp eq %struct._IO_FILE* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8** %tf.addr, align 8
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([11 x i8]* @.str7, i32 0, i32 0), i8* %2)
  %3 = load i8** %tf.addr, align 8
  call void @perror(i8* %3)
  call void @exit(i32 1) #9
  unreachable

if.end:                                           ; preds = %entry
  %call1 = call i32 @gettimeofday(%struct.timeval* %tv, %struct.timezone* null) #5
  br label %while.cond

while.cond:                                       ; preds = %if.end100, %if.else55, %if.then41, %if.end
  %arraydecay = getelementptr inbounds [5000 x i8]* %buf, i32 0, i32 0
  %4 = load %struct._IO_FILE** %fp, align 8
  %call2 = call i8* @fgets(i8* %arraydecay, i32 5000, %struct._IO_FILE* %4)
  %cmp3 = icmp ne i8* %call2, null
  br i1 %cmp3, label %while.body, label %while.end118

while.body:                                       ; preds = %while.cond
  %arraydecay4 = getelementptr inbounds [5000 x i8]* %buf, i32 0, i32 0
  %call5 = call i8* @strchr(i8* %arraydecay4, i32 35) #8
  store i8* %call5, i8** %cp, align 8
  %5 = load i8** %cp, align 8
  %cmp6 = icmp ne i8* %5, null
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %while.body
  %6 = load i8** %cp, align 8
  store i8 0, i8* %6, align 1
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %while.body
  %arraydecay9 = getelementptr inbounds [5000 x i8]* %buf, i32 0, i32 0
  %call10 = call i64 @strlen(i8* %arraydecay9) #8
  %conv = trunc i64 %call10 to i32
  store i32 %conv, i32* %len, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body36, %if.end8
  %7 = load i32* %len, align 4
  %cmp12 = icmp sgt i32 %7, 0
  br i1 %cmp12, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond11
  %8 = load i32* %len, align 4
  %sub = sub nsw i32 %8, 1
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr inbounds [5000 x i8]* %buf, i32 0, i64 %idxprom
  %9 = load i8* %arrayidx, align 1
  %conv14 = sext i8 %9 to i32
  %cmp15 = icmp eq i32 %conv14, 32
  br i1 %cmp15, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.rhs
  %10 = load i32* %len, align 4
  %sub17 = sub nsw i32 %10, 1
  %idxprom18 = sext i32 %sub17 to i64
  %arrayidx19 = getelementptr inbounds [5000 x i8]* %buf, i32 0, i64 %idxprom18
  %11 = load i8* %arrayidx19, align 1
  %conv20 = sext i8 %11 to i32
  %cmp21 = icmp eq i32 %conv20, 9
  br i1 %cmp21, label %lor.end, label %lor.lhs.false23

lor.lhs.false23:                                  ; preds = %lor.lhs.false
  %12 = load i32* %len, align 4
  %sub24 = sub nsw i32 %12, 1
  %idxprom25 = sext i32 %sub24 to i64
  %arrayidx26 = getelementptr inbounds [5000 x i8]* %buf, i32 0, i64 %idxprom25
  %13 = load i8* %arrayidx26, align 1
  %conv27 = sext i8 %13 to i32
  %cmp28 = icmp eq i32 %conv27, 10
  br i1 %cmp28, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false23
  %14 = load i32* %len, align 4
  %sub30 = sub nsw i32 %14, 1
  %idxprom31 = sext i32 %sub30 to i64
  %arrayidx32 = getelementptr inbounds [5000 x i8]* %buf, i32 0, i64 %idxprom31
  %15 = load i8* %arrayidx32, align 1
  %conv33 = sext i8 %15 to i32
  %cmp34 = icmp eq i32 %conv33, 13
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false23, %lor.lhs.false, %land.rhs
  %16 = phi i1 [ true, %lor.lhs.false23 ], [ true, %lor.lhs.false ], [ true, %land.rhs ], [ %cmp34, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %while.cond11
  %17 = phi i1 [ false, %while.cond11 ], [ %16, %lor.end ]
  br i1 %17, label %while.body36, label %while.end

while.body36:                                     ; preds = %land.end
  %18 = load i32* %len, align 4
  %dec = add nsw i32 %18, -1
  store i32 %dec, i32* %len, align 4
  %idxprom37 = sext i32 %dec to i64
  %arrayidx38 = getelementptr inbounds [5000 x i8]* %buf, i32 0, i64 %idxprom37
  store i8 0, i8* %arrayidx38, align 1
  br label %while.cond11

while.end:                                        ; preds = %land.end
  %19 = load i32* %len, align 4
  %cmp39 = icmp eq i32 %19, 0
  br i1 %cmp39, label %if.then41, label %if.end42

if.then41:                                        ; preds = %while.end
  br label %while.cond

if.end42:                                         ; preds = %while.end
  %arraydecay43 = getelementptr inbounds [5000 x i8]* %buf, i32 0, i32 0
  %arraydecay44 = getelementptr inbounds [5000 x i8]* %pattern, i32 0, i32 0
  %call45 = call i32 (i8*, i8*, ...)* @__isoc99_sscanf(i8* %arraydecay43, i8* getelementptr inbounds ([20 x i8]* @.str57, i32 0, i32 0), i8* %arraydecay44, i64* %min_limit, i64* %max_limit) #5
  %cmp46 = icmp eq i32 %call45, 3
  br i1 %cmp46, label %if.then48, label %if.else

if.then48:                                        ; preds = %if.end42
  br label %if.end60

if.else:                                          ; preds = %if.end42
  %arraydecay49 = getelementptr inbounds [5000 x i8]* %buf, i32 0, i32 0
  %arraydecay50 = getelementptr inbounds [5000 x i8]* %pattern, i32 0, i32 0
  %call51 = call i32 (i8*, i8*, ...)* @__isoc99_sscanf(i8* %arraydecay49, i8* getelementptr inbounds ([16 x i8]* @.str58, i32 0, i32 0), i8* %arraydecay50, i64* %max_limit) #5
  %cmp52 = icmp eq i32 %call51, 2
  br i1 %cmp52, label %if.then54, label %if.else55

if.then54:                                        ; preds = %if.else
  store i64 0, i64* %min_limit, align 8
  br label %if.end59

if.else55:                                        ; preds = %if.else
  %20 = load i8** %tf.addr, align 8
  %arraydecay56 = getelementptr inbounds [5000 x i8]* %buf, i32 0, i32 0
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([33 x i8]* @.str59, i32 0, i32 0), i8* %20, i8* %arraydecay56)
  %21 = load %struct._IO_FILE** @stderr, align 8
  %22 = load i8** @argv0, align 8
  %23 = load i8** %tf.addr, align 8
  %arraydecay57 = getelementptr inbounds [5000 x i8]* %buf, i32 0, i32 0
  %call58 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([38 x i8]* @.str60, i32 0, i32 0), i8* %22, i8* %23, i8* %arraydecay57)
  br label %while.cond

if.end59:                                         ; preds = %if.then54
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then48
  %arrayidx61 = getelementptr inbounds [5000 x i8]* %pattern, i32 0, i64 0
  %24 = load i8* %arrayidx61, align 1
  %conv62 = sext i8 %24 to i32
  %cmp63 = icmp eq i32 %conv62, 47
  br i1 %cmp63, label %if.then65, label %if.end69

if.then65:                                        ; preds = %if.end60
  %25 = bitcast [5000 x i8]* %pattern to i8*
  %arrayidx66 = getelementptr inbounds [5000 x i8]* %pattern, i32 0, i64 1
  %arrayidx67 = getelementptr inbounds [5000 x i8]* %pattern, i32 0, i64 1
  %call68 = call i64 @strlen(i8* %arrayidx67) #8
  %add = add i64 %call68, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %25, i8* %arrayidx66, i64 %add, i32 1, i1 false)
  br label %if.end69

if.end69:                                         ; preds = %if.then65, %if.end60
  br label %while.cond70

while.cond70:                                     ; preds = %while.body75, %if.end69
  %arraydecay71 = getelementptr inbounds [5000 x i8]* %pattern, i32 0, i32 0
  %call72 = call i8* @strstr(i8* %arraydecay71, i8* getelementptr inbounds ([3 x i8]* @.str61, i32 0, i32 0)) #8
  store i8* %call72, i8** %cp, align 8
  %cmp73 = icmp ne i8* %call72, null
  br i1 %cmp73, label %while.body75, label %while.end80

while.body75:                                     ; preds = %while.cond70
  %26 = load i8** %cp, align 8
  %add.ptr = getelementptr inbounds i8* %26, i64 1
  %27 = load i8** %cp, align 8
  %add.ptr76 = getelementptr inbounds i8* %27, i64 2
  %28 = load i8** %cp, align 8
  %add.ptr77 = getelementptr inbounds i8* %28, i64 2
  %call78 = call i64 @strlen(i8* %add.ptr77) #8
  %add79 = add i64 %call78, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %add.ptr, i8* %add.ptr76, i64 %add79, i32 1, i1 false)
  br label %while.cond70

while.end80:                                      ; preds = %while.cond70
  %29 = load i32* @numthrottles, align 4
  %30 = load i32* @maxthrottles, align 4
  %cmp81 = icmp sge i32 %29, %30
  br i1 %cmp81, label %if.then83, label %if.end100

if.then83:                                        ; preds = %while.end80
  %31 = load i32* @maxthrottles, align 4
  %cmp84 = icmp eq i32 %31, 0
  br i1 %cmp84, label %if.then86, label %if.else89

if.then86:                                        ; preds = %if.then83
  store i32 100, i32* @maxthrottles, align 4
  %32 = load i32* @maxthrottles, align 4
  %conv87 = sext i32 %32 to i64
  %mul = mul i64 48, %conv87
  %call88 = call noalias i8* @malloc(i64 %mul) #5
  %33 = bitcast i8* %call88 to %struct.throttletab*
  store %struct.throttletab* %33, %struct.throttletab** @throttles, align 8
  br label %if.end94

if.else89:                                        ; preds = %if.then83
  %34 = load i32* @maxthrottles, align 4
  %mul90 = mul nsw i32 %34, 2
  store i32 %mul90, i32* @maxthrottles, align 4
  %35 = load %struct.throttletab** @throttles, align 8
  %36 = bitcast %struct.throttletab* %35 to i8*
  %37 = load i32* @maxthrottles, align 4
  %conv91 = sext i32 %37 to i64
  %mul92 = mul i64 48, %conv91
  %call93 = call i8* @realloc(i8* %36, i64 %mul92) #5
  %38 = bitcast i8* %call93 to %struct.throttletab*
  store %struct.throttletab* %38, %struct.throttletab** @throttles, align 8
  br label %if.end94

if.end94:                                         ; preds = %if.else89, %if.then86
  %39 = load %struct.throttletab** @throttles, align 8
  %cmp95 = icmp eq %struct.throttletab* %39, null
  br i1 %cmp95, label %if.then97, label %if.end99

if.then97:                                        ; preds = %if.end94
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([39 x i8]* @.str62, i32 0, i32 0))
  %40 = load %struct._IO_FILE** @stderr, align 8
  %41 = load i8** @argv0, align 8
  %call98 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([44 x i8]* @.str63, i32 0, i32 0), i8* %41)
  call void @exit(i32 1) #9
  unreachable

if.end99:                                         ; preds = %if.end94
  br label %if.end100

if.end100:                                        ; preds = %if.end99, %while.end80
  %arraydecay101 = getelementptr inbounds [5000 x i8]* %pattern, i32 0, i32 0
  %call102 = call i8* @e_strdup(i8* %arraydecay101)
  %42 = load i32* @numthrottles, align 4
  %idxprom103 = sext i32 %42 to i64
  %43 = load %struct.throttletab** @throttles, align 8
  %arrayidx104 = getelementptr inbounds %struct.throttletab* %43, i64 %idxprom103
  %pattern105 = getelementptr inbounds %struct.throttletab* %arrayidx104, i32 0, i32 0
  store i8* %call102, i8** %pattern105, align 8
  %44 = load i64* %max_limit, align 8
  %45 = load i32* @numthrottles, align 4
  %idxprom106 = sext i32 %45 to i64
  %46 = load %struct.throttletab** @throttles, align 8
  %arrayidx107 = getelementptr inbounds %struct.throttletab* %46, i64 %idxprom106
  %max_limit108 = getelementptr inbounds %struct.throttletab* %arrayidx107, i32 0, i32 1
  store i64 %44, i64* %max_limit108, align 8
  %47 = load i64* %min_limit, align 8
  %48 = load i32* @numthrottles, align 4
  %idxprom109 = sext i32 %48 to i64
  %49 = load %struct.throttletab** @throttles, align 8
  %arrayidx110 = getelementptr inbounds %struct.throttletab* %49, i64 %idxprom109
  %min_limit111 = getelementptr inbounds %struct.throttletab* %arrayidx110, i32 0, i32 2
  store i64 %47, i64* %min_limit111, align 8
  %50 = load i32* @numthrottles, align 4
  %idxprom112 = sext i32 %50 to i64
  %51 = load %struct.throttletab** @throttles, align 8
  %arrayidx113 = getelementptr inbounds %struct.throttletab* %51, i64 %idxprom112
  %rate = getelementptr inbounds %struct.throttletab* %arrayidx113, i32 0, i32 3
  store i64 0, i64* %rate, align 8
  %52 = load i32* @numthrottles, align 4
  %idxprom114 = sext i32 %52 to i64
  %53 = load %struct.throttletab** @throttles, align 8
  %arrayidx115 = getelementptr inbounds %struct.throttletab* %53, i64 %idxprom114
  %bytes_since_avg = getelementptr inbounds %struct.throttletab* %arrayidx115, i32 0, i32 4
  store i64 0, i64* %bytes_since_avg, align 8
  %54 = load i32* @numthrottles, align 4
  %idxprom116 = sext i32 %54 to i64
  %55 = load %struct.throttletab** @throttles, align 8
  %arrayidx117 = getelementptr inbounds %struct.throttletab* %55, i64 %idxprom116
  %num_sending = getelementptr inbounds %struct.throttletab* %arrayidx117, i32 0, i32 5
  store i32 0, i32* %num_sending, align 4
  %56 = load i32* @numthrottles, align 4
  %inc = add nsw i32 %56, 1
  store i32 %inc, i32* @numthrottles, align 4
  br label %while.cond

while.end118:                                     ; preds = %while.cond
  %57 = load %struct._IO_FILE** %fp, align 8
  %call119 = call i32 @fclose(%struct._IO_FILE* %57)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @handle_term(i32 %sig) #0 {
entry:
  %sig.addr = alloca i32, align 4
  store i32 %sig, i32* %sig.addr, align 4
  call void @shut_down()
  %0 = load i32* %sig.addr, align 4
  call void (i32, i8*, ...)* @syslog(i32 5, i8* getelementptr inbounds ([25 x i8]* @.str131, i32 0, i32 0), i32 %0)
  call void @closelog()
  call void @exit(i32 1) #9
  unreachable

return:                                           ; No predecessors!
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @handle_chld(i32 %sig) #0 {
entry:
  %sig.addr = alloca i32, align 4
  %oerrno = alloca i32, align 4
  %pid = alloca i32, align 4
  %status = alloca i32, align 4
  store i32 %sig, i32* %sig.addr, align 4
  %call = call i32* @__errno_location() #10
  %0 = load i32* %call, align 4
  store i32 %0, i32* %oerrno, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end22, %if.then8, %entry
  %call1 = call i32 @waitpid(i32 -1, i32* %status, i32 1)
  store i32 %call1, i32* %pid, align 4
  %1 = load i32* %pid, align 4
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.cond
  br label %for.end

if.end:                                           ; preds = %for.cond
  %2 = load i32* %pid, align 4
  %cmp2 = icmp slt i32 %2, 0
  br i1 %cmp2, label %if.then3, label %if.end14

if.then3:                                         ; preds = %if.end
  %call4 = call i32* @__errno_location() #10
  %3 = load i32* %call4, align 4
  %cmp5 = icmp eq i32 %3, 4
  br i1 %cmp5, label %if.then8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then3
  %call6 = call i32* @__errno_location() #10
  %4 = load i32* %call6, align 4
  %cmp7 = icmp eq i32 %4, 11
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %lor.lhs.false, %if.then3
  br label %for.cond

if.end9:                                          ; preds = %lor.lhs.false
  %call10 = call i32* @__errno_location() #10
  %5 = load i32* %call10, align 4
  %cmp11 = icmp ne i32 %5, 10
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.end9
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([16 x i8]* @.str130, i32 0, i32 0))
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %if.end9
  br label %for.end

if.end14:                                         ; preds = %if.end
  %6 = load %struct.httpd_server** @hs, align 8
  %cmp15 = icmp ne %struct.httpd_server* %6, null
  br i1 %cmp15, label %if.then16, label %if.end22

if.then16:                                        ; preds = %if.end14
  %7 = load %struct.httpd_server** @hs, align 8
  %cgi_count = getelementptr inbounds %struct.httpd_server* %7, i32 0, i32 5
  %8 = load i32* %cgi_count, align 4
  %dec = add nsw i32 %8, -1
  store i32 %dec, i32* %cgi_count, align 4
  %9 = load %struct.httpd_server** @hs, align 8
  %cgi_count17 = getelementptr inbounds %struct.httpd_server* %9, i32 0, i32 5
  %10 = load i32* %cgi_count17, align 4
  %cmp18 = icmp slt i32 %10, 0
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %if.then16
  %11 = load %struct.httpd_server** @hs, align 8
  %cgi_count20 = getelementptr inbounds %struct.httpd_server* %11, i32 0, i32 5
  store i32 0, i32* %cgi_count20, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %if.then16
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.end14
  br label %for.cond

for.end:                                          ; preds = %if.end13, %if.then
  %12 = load i32* %oerrno, align 4
  %call23 = call i32* @__errno_location() #10
  store i32 %12, i32* %call23, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @handle_hup(i32 %sig) #0 {
entry:
  %sig.addr = alloca i32, align 4
  %oerrno = alloca i32, align 4
  store i32 %sig, i32* %sig.addr, align 4
  %call = call i32* @__errno_location() #10
  %0 = load i32* %call, align 4
  store i32 %0, i32* %oerrno, align 4
  store volatile i32 1, i32* @got_hup, align 4
  %1 = load i32* %oerrno, align 4
  %call1 = call i32* @__errno_location() #10
  store i32 %1, i32* %call1, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @handle_usr1(i32 %sig) #0 {
entry:
  %sig.addr = alloca i32, align 4
  store i32 %sig, i32* %sig.addr, align 4
  %0 = load i32* @num_connects, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @shut_down()
  call void (i32, i8*, ...)* @syslog(i32 5, i8* getelementptr inbounds ([8 x i8]* @.str38, i32 0, i32 0))
  call void @closelog()
  call void @exit(i32 0) #9
  unreachable

if.end:                                           ; preds = %entry
  store volatile i32 1, i32* @got_usr1, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @handle_usr2(i32 %sig) #0 {
entry:
  %sig.addr = alloca i32, align 4
  %oerrno = alloca i32, align 4
  store i32 %sig, i32* %sig.addr, align 4
  %call = call i32* @__errno_location() #10
  %0 = load i32* %call, align 4
  store i32 %0, i32* %oerrno, align 4
  call void @logstats(%struct.timeval* null)
  %1 = load i32* %oerrno, align 4
  %call1 = call i32* @__errno_location() #10
  store i32 %1, i32* %call1, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @handle_alrm(i32 %sig) #0 {
entry:
  %sig.addr = alloca i32, align 4
  %oerrno = alloca i32, align 4
  store i32 %sig, i32* %sig.addr, align 4
  %call = call i32* @__errno_location() #10
  %0 = load i32* %call, align 4
  store i32 %0, i32* %oerrno, align 4
  %1 = load volatile i32* @watchdog_flag, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call i32 @chdir(i8* getelementptr inbounds ([5 x i8]* @.str129, i32 0, i32 0)) #5
  call void @abort() #9
  unreachable

if.end:                                           ; preds = %entry
  store volatile i32 0, i32* @watchdog_flag, align 4
  %call2 = call i32 @alarm(i32 360) #5
  %2 = load i32* %oerrno, align 4
  %call3 = call i32* @__errno_location() #10
  store i32 %2, i32* %call3, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @occasional(i8* %client_data.coerce, %struct.timeval* %nowP) #0 {
entry:
  %client_data = alloca %union.ClientData, align 8
  %nowP.addr = alloca %struct.timeval*, align 8
  %coerce.dive = getelementptr %union.ClientData* %client_data, i32 0, i32 0
  store i8* %client_data.coerce, i8** %coerce.dive
  store %struct.timeval* %nowP, %struct.timeval** %nowP.addr, align 8
  %0 = load %struct.timeval** %nowP.addr, align 8
  call void @mmc_cleanup(%struct.timeval* %0)
  call void @tmr_cleanup()
  store volatile i32 1, i32* @watchdog_flag, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @idle(i8* %client_data.coerce, %struct.timeval* %nowP) #0 {
entry:
  %client_data = alloca %union.ClientData, align 8
  %nowP.addr = alloca %struct.timeval*, align 8
  %cnum = alloca i32, align 4
  %c = alloca %struct.connecttab*, align 8
  %coerce.dive = getelementptr %union.ClientData* %client_data, i32 0, i32 0
  store i8* %client_data.coerce, i8** %coerce.dive
  store %struct.timeval* %nowP, %struct.timeval** %nowP.addr, align 8
  store i32 0, i32* %cnum, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %cnum, align 4
  %1 = load i32* @max_connects, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %cnum, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load %struct.connecttab** @connects, align 8
  %arrayidx = getelementptr inbounds %struct.connecttab* %3, i64 %idxprom
  store %struct.connecttab* %arrayidx, %struct.connecttab** %c, align 8
  %4 = load %struct.connecttab** %c, align 8
  %conn_state = getelementptr inbounds %struct.connecttab* %4, i32 0, i32 0
  %5 = load i32* %conn_state, align 4
  switch i32 %5, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %sw.bb3
    i32 3, label %sw.bb3
  ]

sw.bb:                                            ; preds = %for.body
  %6 = load %struct.timeval** %nowP.addr, align 8
  %tv_sec = getelementptr inbounds %struct.timeval* %6, i32 0, i32 0
  %7 = load i64* %tv_sec, align 8
  %8 = load %struct.connecttab** %c, align 8
  %active_at = getelementptr inbounds %struct.connecttab* %8, i32 0, i32 8
  %9 = load i64* %active_at, align 8
  %sub = sub nsw i64 %7, %9
  %cmp1 = icmp sge i64 %sub, 60
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  %10 = load %struct.connecttab** %c, align 8
  %hc = getelementptr inbounds %struct.connecttab* %10, i32 0, i32 2
  %11 = load %struct.httpd_conn** %hc, align 8
  %client_addr = getelementptr inbounds %struct.httpd_conn* %11, i32 0, i32 2
  %call = call i8* @httpd_ntoa(%union.httpd_sockaddr* %client_addr)
  call void (i32, i8*, ...)* @syslog(i32 6, i8* getelementptr inbounds ([35 x i8]* @.str41, i32 0, i32 0), i8* %call)
  %12 = load %struct.connecttab** %c, align 8
  %hc2 = getelementptr inbounds %struct.connecttab* %12, i32 0, i32 2
  %13 = load %struct.httpd_conn** %hc2, align 8
  %14 = load i8** @httpd_err408title, align 8
  %15 = load i8** @httpd_err408form, align 8
  call void @httpd_send_err(%struct.httpd_conn* %13, i32 408, i8* %14, i8* getelementptr inbounds ([1 x i8]* @.str42, i32 0, i32 0), i8* %15, i8* getelementptr inbounds ([1 x i8]* @.str42, i32 0, i32 0))
  %16 = load %struct.connecttab** %c, align 8
  %17 = load %struct.timeval** %nowP.addr, align 8
  call void @finish_connection(%struct.connecttab* %16, %struct.timeval* %17)
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb
  br label %sw.epilog

sw.bb3:                                           ; preds = %for.body, %for.body
  %18 = load %struct.timeval** %nowP.addr, align 8
  %tv_sec4 = getelementptr inbounds %struct.timeval* %18, i32 0, i32 0
  %19 = load i64* %tv_sec4, align 8
  %20 = load %struct.connecttab** %c, align 8
  %active_at5 = getelementptr inbounds %struct.connecttab* %20, i32 0, i32 8
  %21 = load i64* %active_at5, align 8
  %sub6 = sub nsw i64 %19, %21
  %cmp7 = icmp sge i64 %sub6, 300
  br i1 %cmp7, label %if.then8, label %if.end12

if.then8:                                         ; preds = %sw.bb3
  %22 = load %struct.connecttab** %c, align 8
  %hc9 = getelementptr inbounds %struct.connecttab* %22, i32 0, i32 2
  %23 = load %struct.httpd_conn** %hc9, align 8
  %client_addr10 = getelementptr inbounds %struct.httpd_conn* %23, i32 0, i32 2
  %call11 = call i8* @httpd_ntoa(%union.httpd_sockaddr* %client_addr10)
  call void (i32, i8*, ...)* @syslog(i32 6, i8* getelementptr inbounds ([35 x i8]* @.str43, i32 0, i32 0), i8* %call11)
  %24 = load %struct.connecttab** %c, align 8
  %25 = load %struct.timeval** %nowP.addr, align 8
  call void @clear_connection(%struct.connecttab* %24, %struct.timeval* %25)
  br label %if.end12

if.end12:                                         ; preds = %if.then8, %sw.bb3
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end12, %if.end, %for.body
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %26 = load i32* %cnum, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %cnum, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @update_throttles(i8* %client_data.coerce, %struct.timeval* %nowP) #0 {
entry:
  %client_data = alloca %union.ClientData, align 8
  %nowP.addr = alloca %struct.timeval*, align 8
  %tnum = alloca i32, align 4
  %tind = alloca i32, align 4
  %cnum = alloca i32, align 4
  %c = alloca %struct.connecttab*, align 8
  %l = alloca i64, align 8
  %coerce.dive = getelementptr %union.ClientData* %client_data, i32 0, i32 0
  store i8* %client_data.coerce, i8** %coerce.dive
  store %struct.timeval* %nowP, %struct.timeval** %nowP.addr, align 8
  store i32 0, i32* %tnum, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %tnum, align 4
  %1 = load i32* @numthrottles, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %tnum, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load %struct.throttletab** @throttles, align 8
  %arrayidx = getelementptr inbounds %struct.throttletab* %3, i64 %idxprom
  %rate = getelementptr inbounds %struct.throttletab* %arrayidx, i32 0, i32 3
  %4 = load i64* %rate, align 8
  %mul = mul nsw i64 2, %4
  %5 = load i32* %tnum, align 4
  %idxprom1 = sext i32 %5 to i64
  %6 = load %struct.throttletab** @throttles, align 8
  %arrayidx2 = getelementptr inbounds %struct.throttletab* %6, i64 %idxprom1
  %bytes_since_avg = getelementptr inbounds %struct.throttletab* %arrayidx2, i32 0, i32 4
  %7 = load i64* %bytes_since_avg, align 8
  %div = sdiv i64 %7, 2
  %add = add nsw i64 %mul, %div
  %div3 = sdiv i64 %add, 3
  %8 = load i32* %tnum, align 4
  %idxprom4 = sext i32 %8 to i64
  %9 = load %struct.throttletab** @throttles, align 8
  %arrayidx5 = getelementptr inbounds %struct.throttletab* %9, i64 %idxprom4
  %rate6 = getelementptr inbounds %struct.throttletab* %arrayidx5, i32 0, i32 3
  store i64 %div3, i64* %rate6, align 8
  %10 = load i32* %tnum, align 4
  %idxprom7 = sext i32 %10 to i64
  %11 = load %struct.throttletab** @throttles, align 8
  %arrayidx8 = getelementptr inbounds %struct.throttletab* %11, i64 %idxprom7
  %bytes_since_avg9 = getelementptr inbounds %struct.throttletab* %arrayidx8, i32 0, i32 4
  store i64 0, i64* %bytes_since_avg9, align 8
  %12 = load i32* %tnum, align 4
  %idxprom10 = sext i32 %12 to i64
  %13 = load %struct.throttletab** @throttles, align 8
  %arrayidx11 = getelementptr inbounds %struct.throttletab* %13, i64 %idxprom10
  %rate12 = getelementptr inbounds %struct.throttletab* %arrayidx11, i32 0, i32 3
  %14 = load i64* %rate12, align 8
  %15 = load i32* %tnum, align 4
  %idxprom13 = sext i32 %15 to i64
  %16 = load %struct.throttletab** @throttles, align 8
  %arrayidx14 = getelementptr inbounds %struct.throttletab* %16, i64 %idxprom13
  %max_limit = getelementptr inbounds %struct.throttletab* %arrayidx14, i32 0, i32 1
  %17 = load i64* %max_limit, align 8
  %cmp15 = icmp sgt i64 %14, %17
  br i1 %cmp15, label %land.lhs.true, label %if.end51

land.lhs.true:                                    ; preds = %for.body
  %18 = load i32* %tnum, align 4
  %idxprom16 = sext i32 %18 to i64
  %19 = load %struct.throttletab** @throttles, align 8
  %arrayidx17 = getelementptr inbounds %struct.throttletab* %19, i64 %idxprom16
  %num_sending = getelementptr inbounds %struct.throttletab* %arrayidx17, i32 0, i32 5
  %20 = load i32* %num_sending, align 4
  %cmp18 = icmp ne i32 %20, 0
  br i1 %cmp18, label %if.then, label %if.end51

if.then:                                          ; preds = %land.lhs.true
  %21 = load i32* %tnum, align 4
  %idxprom19 = sext i32 %21 to i64
  %22 = load %struct.throttletab** @throttles, align 8
  %arrayidx20 = getelementptr inbounds %struct.throttletab* %22, i64 %idxprom19
  %rate21 = getelementptr inbounds %struct.throttletab* %arrayidx20, i32 0, i32 3
  %23 = load i64* %rate21, align 8
  %24 = load i32* %tnum, align 4
  %idxprom22 = sext i32 %24 to i64
  %25 = load %struct.throttletab** @throttles, align 8
  %arrayidx23 = getelementptr inbounds %struct.throttletab* %25, i64 %idxprom22
  %max_limit24 = getelementptr inbounds %struct.throttletab* %arrayidx23, i32 0, i32 1
  %26 = load i64* %max_limit24, align 8
  %mul25 = mul nsw i64 %26, 2
  %cmp26 = icmp sgt i64 %23, %mul25
  br i1 %cmp26, label %if.then27, label %if.else

if.then27:                                        ; preds = %if.then
  %27 = load i32* %tnum, align 4
  %28 = load i32* %tnum, align 4
  %idxprom28 = sext i32 %28 to i64
  %29 = load %struct.throttletab** @throttles, align 8
  %arrayidx29 = getelementptr inbounds %struct.throttletab* %29, i64 %idxprom28
  %pattern = getelementptr inbounds %struct.throttletab* %arrayidx29, i32 0, i32 0
  %30 = load i8** %pattern, align 8
  %31 = load i32* %tnum, align 4
  %idxprom30 = sext i32 %31 to i64
  %32 = load %struct.throttletab** @throttles, align 8
  %arrayidx31 = getelementptr inbounds %struct.throttletab* %32, i64 %idxprom30
  %rate32 = getelementptr inbounds %struct.throttletab* %arrayidx31, i32 0, i32 3
  %33 = load i64* %rate32, align 8
  %34 = load i32* %tnum, align 4
  %idxprom33 = sext i32 %34 to i64
  %35 = load %struct.throttletab** @throttles, align 8
  %arrayidx34 = getelementptr inbounds %struct.throttletab* %35, i64 %idxprom33
  %max_limit35 = getelementptr inbounds %struct.throttletab* %arrayidx34, i32 0, i32 1
  %36 = load i64* %max_limit35, align 8
  %37 = load i32* %tnum, align 4
  %idxprom36 = sext i32 %37 to i64
  %38 = load %struct.throttletab** @throttles, align 8
  %arrayidx37 = getelementptr inbounds %struct.throttletab* %38, i64 %idxprom36
  %num_sending38 = getelementptr inbounds %struct.throttletab* %arrayidx37, i32 0, i32 5
  %39 = load i32* %num_sending38, align 4
  call void (i32, i8*, ...)* @syslog(i32 5, i8* getelementptr inbounds ([70 x i8]* @.str46, i32 0, i32 0), i32 %27, i8* %30, i64 %33, i64 %36, i32 %39)
  br label %if.end

if.else:                                          ; preds = %if.then
  %40 = load i32* %tnum, align 4
  %41 = load i32* %tnum, align 4
  %idxprom39 = sext i32 %41 to i64
  %42 = load %struct.throttletab** @throttles, align 8
  %arrayidx40 = getelementptr inbounds %struct.throttletab* %42, i64 %idxprom39
  %pattern41 = getelementptr inbounds %struct.throttletab* %arrayidx40, i32 0, i32 0
  %43 = load i8** %pattern41, align 8
  %44 = load i32* %tnum, align 4
  %idxprom42 = sext i32 %44 to i64
  %45 = load %struct.throttletab** @throttles, align 8
  %arrayidx43 = getelementptr inbounds %struct.throttletab* %45, i64 %idxprom42
  %rate44 = getelementptr inbounds %struct.throttletab* %arrayidx43, i32 0, i32 3
  %46 = load i64* %rate44, align 8
  %47 = load i32* %tnum, align 4
  %idxprom45 = sext i32 %47 to i64
  %48 = load %struct.throttletab** @throttles, align 8
  %arrayidx46 = getelementptr inbounds %struct.throttletab* %48, i64 %idxprom45
  %max_limit47 = getelementptr inbounds %struct.throttletab* %arrayidx46, i32 0, i32 1
  %49 = load i64* %max_limit47, align 8
  %50 = load i32* %tnum, align 4
  %idxprom48 = sext i32 %50 to i64
  %51 = load %struct.throttletab** @throttles, align 8
  %arrayidx49 = getelementptr inbounds %struct.throttletab* %51, i64 %idxprom48
  %num_sending50 = getelementptr inbounds %struct.throttletab* %arrayidx49, i32 0, i32 5
  %52 = load i32* %num_sending50, align 4
  call void (i32, i8*, ...)* @syslog(i32 6, i8* getelementptr inbounds ([62 x i8]* @.str47, i32 0, i32 0), i32 %40, i8* %43, i64 %46, i64 %49, i32 %52)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then27
  br label %if.end51

if.end51:                                         ; preds = %if.end, %land.lhs.true, %for.body
  %53 = load i32* %tnum, align 4
  %idxprom52 = sext i32 %53 to i64
  %54 = load %struct.throttletab** @throttles, align 8
  %arrayidx53 = getelementptr inbounds %struct.throttletab* %54, i64 %idxprom52
  %rate54 = getelementptr inbounds %struct.throttletab* %arrayidx53, i32 0, i32 3
  %55 = load i64* %rate54, align 8
  %56 = load i32* %tnum, align 4
  %idxprom55 = sext i32 %56 to i64
  %57 = load %struct.throttletab** @throttles, align 8
  %arrayidx56 = getelementptr inbounds %struct.throttletab* %57, i64 %idxprom55
  %min_limit = getelementptr inbounds %struct.throttletab* %arrayidx56, i32 0, i32 2
  %58 = load i64* %min_limit, align 8
  %cmp57 = icmp slt i64 %55, %58
  br i1 %cmp57, label %land.lhs.true58, label %if.end76

land.lhs.true58:                                  ; preds = %if.end51
  %59 = load i32* %tnum, align 4
  %idxprom59 = sext i32 %59 to i64
  %60 = load %struct.throttletab** @throttles, align 8
  %arrayidx60 = getelementptr inbounds %struct.throttletab* %60, i64 %idxprom59
  %num_sending61 = getelementptr inbounds %struct.throttletab* %arrayidx60, i32 0, i32 5
  %61 = load i32* %num_sending61, align 4
  %cmp62 = icmp ne i32 %61, 0
  br i1 %cmp62, label %if.then63, label %if.end76

if.then63:                                        ; preds = %land.lhs.true58
  %62 = load i32* %tnum, align 4
  %63 = load i32* %tnum, align 4
  %idxprom64 = sext i32 %63 to i64
  %64 = load %struct.throttletab** @throttles, align 8
  %arrayidx65 = getelementptr inbounds %struct.throttletab* %64, i64 %idxprom64
  %pattern66 = getelementptr inbounds %struct.throttletab* %arrayidx65, i32 0, i32 0
  %65 = load i8** %pattern66, align 8
  %66 = load i32* %tnum, align 4
  %idxprom67 = sext i32 %66 to i64
  %67 = load %struct.throttletab** @throttles, align 8
  %arrayidx68 = getelementptr inbounds %struct.throttletab* %67, i64 %idxprom67
  %rate69 = getelementptr inbounds %struct.throttletab* %arrayidx68, i32 0, i32 3
  %68 = load i64* %rate69, align 8
  %69 = load i32* %tnum, align 4
  %idxprom70 = sext i32 %69 to i64
  %70 = load %struct.throttletab** @throttles, align 8
  %arrayidx71 = getelementptr inbounds %struct.throttletab* %70, i64 %idxprom70
  %min_limit72 = getelementptr inbounds %struct.throttletab* %arrayidx71, i32 0, i32 2
  %71 = load i64* %min_limit72, align 8
  %72 = load i32* %tnum, align 4
  %idxprom73 = sext i32 %72 to i64
  %73 = load %struct.throttletab** @throttles, align 8
  %arrayidx74 = getelementptr inbounds %struct.throttletab* %73, i64 %idxprom73
  %num_sending75 = getelementptr inbounds %struct.throttletab* %arrayidx74, i32 0, i32 5
  %74 = load i32* %num_sending75, align 4
  call void (i32, i8*, ...)* @syslog(i32 5, i8* getelementptr inbounds ([65 x i8]* @.str48, i32 0, i32 0), i32 %62, i8* %65, i64 %68, i64 %71, i32 %74)
  br label %if.end76

if.end76:                                         ; preds = %if.then63, %land.lhs.true58, %if.end51
  br label %for.inc

for.inc:                                          ; preds = %if.end76
  %75 = load i32* %tnum, align 4
  %inc = add nsw i32 %75, 1
  store i32 %inc, i32* %tnum, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %cnum, align 4
  br label %for.cond77

for.cond77:                                       ; preds = %for.inc115, %for.end
  %76 = load i32* %cnum, align 4
  %77 = load i32* @max_connects, align 4
  %cmp78 = icmp slt i32 %76, %77
  br i1 %cmp78, label %for.body79, label %for.end117

for.body79:                                       ; preds = %for.cond77
  %78 = load i32* %cnum, align 4
  %idxprom80 = sext i32 %78 to i64
  %79 = load %struct.connecttab** @connects, align 8
  %arrayidx81 = getelementptr inbounds %struct.connecttab* %79, i64 %idxprom80
  store %struct.connecttab* %arrayidx81, %struct.connecttab** %c, align 8
  %80 = load %struct.connecttab** %c, align 8
  %conn_state = getelementptr inbounds %struct.connecttab* %80, i32 0, i32 0
  %81 = load i32* %conn_state, align 4
  %cmp82 = icmp eq i32 %81, 2
  br i1 %cmp82, label %if.then85, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body79
  %82 = load %struct.connecttab** %c, align 8
  %conn_state83 = getelementptr inbounds %struct.connecttab* %82, i32 0, i32 0
  %83 = load i32* %conn_state83, align 4
  %cmp84 = icmp eq i32 %83, 3
  br i1 %cmp84, label %if.then85, label %if.end114

if.then85:                                        ; preds = %lor.lhs.false, %for.body79
  %84 = load %struct.connecttab** %c, align 8
  %max_limit86 = getelementptr inbounds %struct.connecttab* %84, i32 0, i32 5
  store i64 -1, i64* %max_limit86, align 8
  store i32 0, i32* %tind, align 4
  br label %for.cond87

for.cond87:                                       ; preds = %for.inc111, %if.then85
  %85 = load i32* %tind, align 4
  %86 = load %struct.connecttab** %c, align 8
  %numtnums = getelementptr inbounds %struct.connecttab* %86, i32 0, i32 4
  %87 = load i32* %numtnums, align 4
  %cmp88 = icmp slt i32 %85, %87
  br i1 %cmp88, label %for.body89, label %for.end113

for.body89:                                       ; preds = %for.cond87
  %88 = load i32* %tind, align 4
  %idxprom90 = sext i32 %88 to i64
  %89 = load %struct.connecttab** %c, align 8
  %tnums = getelementptr inbounds %struct.connecttab* %89, i32 0, i32 3
  %arrayidx91 = getelementptr inbounds [10 x i32]* %tnums, i32 0, i64 %idxprom90
  %90 = load i32* %arrayidx91, align 4
  store i32 %90, i32* %tnum, align 4
  %91 = load i32* %tnum, align 4
  %idxprom92 = sext i32 %91 to i64
  %92 = load %struct.throttletab** @throttles, align 8
  %arrayidx93 = getelementptr inbounds %struct.throttletab* %92, i64 %idxprom92
  %max_limit94 = getelementptr inbounds %struct.throttletab* %arrayidx93, i32 0, i32 1
  %93 = load i64* %max_limit94, align 8
  %94 = load i32* %tnum, align 4
  %idxprom95 = sext i32 %94 to i64
  %95 = load %struct.throttletab** @throttles, align 8
  %arrayidx96 = getelementptr inbounds %struct.throttletab* %95, i64 %idxprom95
  %num_sending97 = getelementptr inbounds %struct.throttletab* %arrayidx96, i32 0, i32 5
  %96 = load i32* %num_sending97, align 4
  %conv = sext i32 %96 to i64
  %div98 = sdiv i64 %93, %conv
  store i64 %div98, i64* %l, align 8
  %97 = load %struct.connecttab** %c, align 8
  %max_limit99 = getelementptr inbounds %struct.connecttab* %97, i32 0, i32 5
  %98 = load i64* %max_limit99, align 8
  %cmp100 = icmp eq i64 %98, -1
  br i1 %cmp100, label %if.then102, label %if.else104

if.then102:                                       ; preds = %for.body89
  %99 = load i64* %l, align 8
  %100 = load %struct.connecttab** %c, align 8
  %max_limit103 = getelementptr inbounds %struct.connecttab* %100, i32 0, i32 5
  store i64 %99, i64* %max_limit103, align 8
  br label %if.end110

if.else104:                                       ; preds = %for.body89
  %101 = load %struct.connecttab** %c, align 8
  %max_limit105 = getelementptr inbounds %struct.connecttab* %101, i32 0, i32 5
  %102 = load i64* %max_limit105, align 8
  %103 = load i64* %l, align 8
  %cmp106 = icmp slt i64 %102, %103
  br i1 %cmp106, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else104
  %104 = load %struct.connecttab** %c, align 8
  %max_limit108 = getelementptr inbounds %struct.connecttab* %104, i32 0, i32 5
  %105 = load i64* %max_limit108, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else104
  %106 = load i64* %l, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %105, %cond.true ], [ %106, %cond.false ]
  %107 = load %struct.connecttab** %c, align 8
  %max_limit109 = getelementptr inbounds %struct.connecttab* %107, i32 0, i32 5
  store i64 %cond, i64* %max_limit109, align 8
  br label %if.end110

if.end110:                                        ; preds = %cond.end, %if.then102
  br label %for.inc111

for.inc111:                                       ; preds = %if.end110
  %108 = load i32* %tind, align 4
  %inc112 = add nsw i32 %108, 1
  store i32 %inc112, i32* %tind, align 4
  br label %for.cond87

for.end113:                                       ; preds = %for.cond87
  br label %if.end114

if.end114:                                        ; preds = %for.end113, %lor.lhs.false
  br label %for.inc115

for.inc115:                                       ; preds = %if.end114
  %109 = load i32* %cnum, align 4
  %inc116 = add nsw i32 %109, 1
  store i32 %inc116, i32* %cnum, align 4
  br label %for.cond77

for.end117:                                       ; preds = %for.cond77
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @show_stats(i8* %client_data.coerce, %struct.timeval* %nowP) #0 {
entry:
  %client_data = alloca %union.ClientData, align 8
  %nowP.addr = alloca %struct.timeval*, align 8
  %coerce.dive = getelementptr %union.ClientData* %client_data, i32 0, i32 0
  store i8* %client_data.coerce, i8** %coerce.dive
  store %struct.timeval* %nowP, %struct.timeval** %nowP.addr, align 8
  %0 = load %struct.timeval** %nowP.addr, align 8
  call void @logstats(%struct.timeval* %0)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @re_open_logfile() #0 {
entry:
  %logfp = alloca %struct._IO_FILE*, align 8
  %0 = load i32* @no_log, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.httpd_server** @hs, align 8
  %cmp = icmp eq %struct.httpd_server* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %if.end10

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i8** @logfile, align 8
  %cmp1 = icmp ne i8* %2, null
  br i1 %cmp1, label %land.lhs.true, label %if.end10

land.lhs.true:                                    ; preds = %if.end
  %3 = load i8** @logfile, align 8
  %call = call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([2 x i8]* @.str5, i32 0, i32 0)) #8
  %cmp2 = icmp ne i32 %call, 0
  br i1 %cmp2, label %if.then3, label %if.end10

if.then3:                                         ; preds = %land.lhs.true
  call void (i32, i8*, ...)* @syslog(i32 5, i8* getelementptr inbounds ([19 x i8]* @.str127, i32 0, i32 0))
  %4 = load i8** @logfile, align 8
  %call4 = call %struct._IO_FILE* @fopen(i8* %4, i8* getelementptr inbounds ([2 x i8]* @.str6, i32 0, i32 0))
  store %struct._IO_FILE* %call4, %struct._IO_FILE** %logfp, align 8
  %5 = load %struct._IO_FILE** %logfp, align 8
  %cmp5 = icmp eq %struct._IO_FILE* %5, null
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.then3
  %6 = load i8** @logfile, align 8
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([22 x i8]* @.str128, i32 0, i32 0), i8* %6)
  br label %if.end10

if.end7:                                          ; preds = %if.then3
  %7 = load %struct._IO_FILE** %logfp, align 8
  %call8 = call i32 @fileno(%struct._IO_FILE* %7) #5
  %call9 = call i32 (i32, i32, ...)* @fcntl(i32 %call8, i32 2, i32 1)
  %8 = load %struct.httpd_server** @hs, align 8
  %9 = load %struct._IO_FILE** %logfp, align 8
  call void @httpd_set_logfp(%struct.httpd_server* %8, %struct._IO_FILE* %9)
  br label %if.end10

if.end10:                                         ; preds = %if.end7, %if.then6, %land.lhs.true, %if.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @handle_newconnect(%struct.timeval* %tvP, i32 %listen_fd) #0 {
entry:
  %retval = alloca i32, align 4
  %tvP.addr = alloca %struct.timeval*, align 8
  %listen_fd.addr = alloca i32, align 4
  %c = alloca %struct.connecttab*, align 8
  %client_data = alloca %union.ClientData, align 8
  store %struct.timeval* %tvP, %struct.timeval** %tvP.addr, align 8
  store i32 %listen_fd, i32* %listen_fd.addr, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end28, %entry
  %0 = load i32* @num_connects, align 4
  %1 = load i32* @max_connects, align 4
  %cmp = icmp sge i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.cond
  call void (i32, i8*, ...)* @syslog(i32 4, i8* getelementptr inbounds ([22 x i8]* @.str53, i32 0, i32 0))
  %2 = load %struct.timeval** %tvP.addr, align 8
  call void @tmr_run(%struct.timeval* %2)
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %for.cond
  %3 = load i32* @first_free_connect, align 4
  %cmp1 = icmp eq i32 %3, -1
  br i1 %cmp1, label %if.then3, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %4 = load i32* @first_free_connect, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load %struct.connecttab** @connects, align 8
  %arrayidx = getelementptr inbounds %struct.connecttab* %5, i64 %idxprom
  %conn_state = getelementptr inbounds %struct.connecttab* %arrayidx, i32 0, i32 0
  %6 = load i32* %conn_state, align 4
  %cmp2 = icmp ne i32 %6, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %lor.lhs.false, %if.end
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([36 x i8]* @.str54, i32 0, i32 0))
  call void @exit(i32 1) #9
  unreachable

if.end4:                                          ; preds = %lor.lhs.false
  %7 = load i32* @first_free_connect, align 4
  %idxprom5 = sext i32 %7 to i64
  %8 = load %struct.connecttab** @connects, align 8
  %arrayidx6 = getelementptr inbounds %struct.connecttab* %8, i64 %idxprom5
  store %struct.connecttab* %arrayidx6, %struct.connecttab** %c, align 8
  %9 = load %struct.connecttab** %c, align 8
  %hc = getelementptr inbounds %struct.connecttab* %9, i32 0, i32 2
  %10 = load %struct.httpd_conn** %hc, align 8
  %cmp7 = icmp eq %struct.httpd_conn* %10, null
  br i1 %cmp7, label %if.then8, label %if.end15

if.then8:                                         ; preds = %if.end4
  %call = call noalias i8* @malloc(i64 720) #5
  %11 = bitcast i8* %call to %struct.httpd_conn*
  %12 = load %struct.connecttab** %c, align 8
  %hc9 = getelementptr inbounds %struct.connecttab* %12, i32 0, i32 2
  store %struct.httpd_conn* %11, %struct.httpd_conn** %hc9, align 8
  %13 = load %struct.connecttab** %c, align 8
  %hc10 = getelementptr inbounds %struct.connecttab* %13, i32 0, i32 2
  %14 = load %struct.httpd_conn** %hc10, align 8
  %cmp11 = icmp eq %struct.httpd_conn* %14, null
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.then8
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([39 x i8]* @.str55, i32 0, i32 0))
  call void @exit(i32 1) #9
  unreachable

if.end13:                                         ; preds = %if.then8
  %15 = load %struct.connecttab** %c, align 8
  %hc14 = getelementptr inbounds %struct.connecttab* %15, i32 0, i32 2
  %16 = load %struct.httpd_conn** %hc14, align 8
  %initialized = getelementptr inbounds %struct.httpd_conn* %16, i32 0, i32 0
  store i32 0, i32* %initialized, align 4
  %17 = load i32* @httpd_conn_count, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* @httpd_conn_count, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.end13, %if.end4
  %18 = load %struct.httpd_server** @hs, align 8
  %19 = load i32* %listen_fd.addr, align 4
  %20 = load %struct.connecttab** %c, align 8
  %hc16 = getelementptr inbounds %struct.connecttab* %20, i32 0, i32 2
  %21 = load %struct.httpd_conn** %hc16, align 8
  %call17 = call i32 @httpd_get_conn(%struct.httpd_server* %18, i32 %19, %struct.httpd_conn* %21)
  switch i32 %call17, label %sw.epilog [
    i32 0, label %sw.bb
    i32 2, label %sw.bb18
  ]

sw.bb:                                            ; preds = %if.end15
  %22 = load %struct.timeval** %tvP.addr, align 8
  call void @tmr_run(%struct.timeval* %22)
  store i32 0, i32* %retval
  br label %return

sw.bb18:                                          ; preds = %if.end15
  store i32 1, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %if.end15
  %23 = load %struct.connecttab** %c, align 8
  %conn_state19 = getelementptr inbounds %struct.connecttab* %23, i32 0, i32 0
  store i32 1, i32* %conn_state19, align 4
  %24 = load %struct.connecttab** %c, align 8
  %next_free_connect = getelementptr inbounds %struct.connecttab* %24, i32 0, i32 1
  %25 = load i32* %next_free_connect, align 4
  store i32 %25, i32* @first_free_connect, align 4
  %26 = load %struct.connecttab** %c, align 8
  %next_free_connect20 = getelementptr inbounds %struct.connecttab* %26, i32 0, i32 1
  store i32 -1, i32* %next_free_connect20, align 4
  %27 = load i32* @num_connects, align 4
  %inc21 = add nsw i32 %27, 1
  store i32 %inc21, i32* @num_connects, align 4
  %28 = load %struct.connecttab** %c, align 8
  %29 = bitcast %struct.connecttab* %28 to i8*
  %p = bitcast %union.ClientData* %client_data to i8**
  store i8* %29, i8** %p, align 8
  %30 = load %struct.timeval** %tvP.addr, align 8
  %tv_sec = getelementptr inbounds %struct.timeval* %30, i32 0, i32 0
  %31 = load i64* %tv_sec, align 8
  %32 = load %struct.connecttab** %c, align 8
  %active_at = getelementptr inbounds %struct.connecttab* %32, i32 0, i32 8
  store i64 %31, i64* %active_at, align 8
  %33 = load %struct.connecttab** %c, align 8
  %wakeup_timer = getelementptr inbounds %struct.connecttab* %33, i32 0, i32 9
  store %struct.TimerStruct* null, %struct.TimerStruct** %wakeup_timer, align 8
  %34 = load %struct.connecttab** %c, align 8
  %linger_timer = getelementptr inbounds %struct.connecttab* %34, i32 0, i32 10
  store %struct.TimerStruct* null, %struct.TimerStruct** %linger_timer, align 8
  %35 = load %struct.connecttab** %c, align 8
  %next_byte_index = getelementptr inbounds %struct.connecttab* %35, i32 0, i32 14
  store i64 0, i64* %next_byte_index, align 8
  %36 = load %struct.connecttab** %c, align 8
  %numtnums = getelementptr inbounds %struct.connecttab* %36, i32 0, i32 4
  store i32 0, i32* %numtnums, align 4
  %37 = load %struct.connecttab** %c, align 8
  %hc22 = getelementptr inbounds %struct.connecttab* %37, i32 0, i32 2
  %38 = load %struct.httpd_conn** %hc22, align 8
  %conn_fd = getelementptr inbounds %struct.httpd_conn* %38, i32 0, i32 60
  %39 = load i32* %conn_fd, align 4
  call void @httpd_set_ndelay(i32 %39)
  %40 = load %struct.connecttab** %c, align 8
  %hc23 = getelementptr inbounds %struct.connecttab* %40, i32 0, i32 2
  %41 = load %struct.httpd_conn** %hc23, align 8
  %conn_fd24 = getelementptr inbounds %struct.httpd_conn* %41, i32 0, i32 60
  %42 = load i32* %conn_fd24, align 4
  %43 = load %struct.connecttab** %c, align 8
  %44 = bitcast %struct.connecttab* %43 to i8*
  call void @fdwatch_add_fd(i32 %42, i8* %44, i32 0)
  %45 = load i64* @stats_connections, align 8
  %inc25 = add nsw i64 %45, 1
  store i64 %inc25, i64* @stats_connections, align 8
  %46 = load i32* @num_connects, align 4
  %47 = load i32* @stats_simultaneous, align 4
  %cmp26 = icmp sgt i32 %46, %47
  br i1 %cmp26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %sw.epilog
  %48 = load i32* @num_connects, align 4
  store i32 %48, i32* @stats_simultaneous, align 4
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %sw.epilog
  br label %for.cond

return:                                           ; preds = %sw.bb18, %sw.bb, %if.then
  %49 = load i32* %retval
  ret i32 %49
}

; Function Attrs: nounwind uwtable
define internal void @clear_connection(%struct.connecttab* %c, %struct.timeval* %tvP) #0 {
entry:
  %c.addr = alloca %struct.connecttab*, align 8
  %tvP.addr = alloca %struct.timeval*, align 8
  %client_data = alloca %union.ClientData, align 8
  store %struct.connecttab* %c, %struct.connecttab** %c.addr, align 8
  store %struct.timeval* %tvP, %struct.timeval** %tvP.addr, align 8
  %0 = load %struct.connecttab** %c.addr, align 8
  %wakeup_timer = getelementptr inbounds %struct.connecttab* %0, i32 0, i32 9
  %1 = load %struct.TimerStruct** %wakeup_timer, align 8
  %cmp = icmp ne %struct.TimerStruct* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.connecttab** %c.addr, align 8
  %wakeup_timer1 = getelementptr inbounds %struct.connecttab* %2, i32 0, i32 9
  %3 = load %struct.TimerStruct** %wakeup_timer1, align 8
  call void @tmr_cancel(%struct.TimerStruct* %3)
  %4 = load %struct.connecttab** %c.addr, align 8
  %wakeup_timer2 = getelementptr inbounds %struct.connecttab* %4, i32 0, i32 9
  store %struct.TimerStruct* null, %struct.TimerStruct** %wakeup_timer2, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.connecttab** %c.addr, align 8
  %conn_state = getelementptr inbounds %struct.connecttab* %5, i32 0, i32 0
  %6 = load i32* %conn_state, align 4
  %cmp3 = icmp eq i32 %6, 4
  br i1 %cmp3, label %if.then4, label %if.end6

if.then4:                                         ; preds = %if.end
  %7 = load %struct.connecttab** %c.addr, align 8
  %linger_timer = getelementptr inbounds %struct.connecttab* %7, i32 0, i32 10
  %8 = load %struct.TimerStruct** %linger_timer, align 8
  call void @tmr_cancel(%struct.TimerStruct* %8)
  %9 = load %struct.connecttab** %c.addr, align 8
  %linger_timer5 = getelementptr inbounds %struct.connecttab* %9, i32 0, i32 10
  store %struct.TimerStruct* null, %struct.TimerStruct** %linger_timer5, align 8
  %10 = load %struct.connecttab** %c.addr, align 8
  %hc = getelementptr inbounds %struct.connecttab* %10, i32 0, i32 2
  %11 = load %struct.httpd_conn** %hc, align 8
  %should_linger = getelementptr inbounds %struct.httpd_conn* %11, i32 0, i32 58
  store i32 0, i32* %should_linger, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %if.end
  %12 = load %struct.connecttab** %c.addr, align 8
  %hc7 = getelementptr inbounds %struct.connecttab* %12, i32 0, i32 2
  %13 = load %struct.httpd_conn** %hc7, align 8
  %should_linger8 = getelementptr inbounds %struct.httpd_conn* %13, i32 0, i32 58
  %14 = load i32* %should_linger8, align 4
  %tobool = icmp ne i32 %14, 0
  br i1 %tobool, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.end6
  %15 = load %struct.connecttab** %c.addr, align 8
  %conn_state10 = getelementptr inbounds %struct.connecttab* %15, i32 0, i32 0
  %16 = load i32* %conn_state10, align 4
  %cmp11 = icmp ne i32 %16, 3
  br i1 %cmp11, label %if.then12, label %if.end14

if.then12:                                        ; preds = %if.then9
  %17 = load %struct.connecttab** %c.addr, align 8
  %hc13 = getelementptr inbounds %struct.connecttab* %17, i32 0, i32 2
  %18 = load %struct.httpd_conn** %hc13, align 8
  %conn_fd = getelementptr inbounds %struct.httpd_conn* %18, i32 0, i32 60
  %19 = load i32* %conn_fd, align 4
  call void @fdwatch_del_fd(i32 %19)
  br label %if.end14

if.end14:                                         ; preds = %if.then12, %if.then9
  %20 = load %struct.connecttab** %c.addr, align 8
  %conn_state15 = getelementptr inbounds %struct.connecttab* %20, i32 0, i32 0
  store i32 4, i32* %conn_state15, align 4
  %21 = load %struct.connecttab** %c.addr, align 8
  %hc16 = getelementptr inbounds %struct.connecttab* %21, i32 0, i32 2
  %22 = load %struct.httpd_conn** %hc16, align 8
  %conn_fd17 = getelementptr inbounds %struct.httpd_conn* %22, i32 0, i32 60
  %23 = load i32* %conn_fd17, align 4
  %call = call i32 @shutdown(i32 %23, i32 1) #5
  %24 = load %struct.connecttab** %c.addr, align 8
  %hc18 = getelementptr inbounds %struct.connecttab* %24, i32 0, i32 2
  %25 = load %struct.httpd_conn** %hc18, align 8
  %conn_fd19 = getelementptr inbounds %struct.httpd_conn* %25, i32 0, i32 60
  %26 = load i32* %conn_fd19, align 4
  %27 = load %struct.connecttab** %c.addr, align 8
  %28 = bitcast %struct.connecttab* %27 to i8*
  call void @fdwatch_add_fd(i32 %26, i8* %28, i32 0)
  %29 = load %struct.connecttab** %c.addr, align 8
  %30 = bitcast %struct.connecttab* %29 to i8*
  %p = bitcast %union.ClientData* %client_data to i8**
  store i8* %30, i8** %p, align 8
  %31 = load %struct.connecttab** %c.addr, align 8
  %linger_timer20 = getelementptr inbounds %struct.connecttab* %31, i32 0, i32 10
  %32 = load %struct.TimerStruct** %linger_timer20, align 8
  %cmp21 = icmp ne %struct.TimerStruct* %32, null
  br i1 %cmp21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %if.end14
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([33 x i8]* @.str44, i32 0, i32 0))
  br label %if.end23

if.end23:                                         ; preds = %if.then22, %if.end14
  %33 = load %struct.timeval** %tvP.addr, align 8
  %coerce.dive = getelementptr %union.ClientData* %client_data, i32 0, i32 0
  %34 = load i8** %coerce.dive
  %call24 = call %struct.TimerStruct* @tmr_create(%struct.timeval* %33, void (i8*, %struct.timeval*)* @linger_clear_connection, i8* %34, i64 500, i32 0)
  %35 = load %struct.connecttab** %c.addr, align 8
  %linger_timer25 = getelementptr inbounds %struct.connecttab* %35, i32 0, i32 10
  store %struct.TimerStruct* %call24, %struct.TimerStruct** %linger_timer25, align 8
  %36 = load %struct.connecttab** %c.addr, align 8
  %linger_timer26 = getelementptr inbounds %struct.connecttab* %36, i32 0, i32 10
  %37 = load %struct.TimerStruct** %linger_timer26, align 8
  %cmp27 = icmp eq %struct.TimerStruct* %37, null
  br i1 %cmp27, label %if.then28, label %if.end29

if.then28:                                        ; preds = %if.end23
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([43 x i8]* @.str45, i32 0, i32 0))
  call void @exit(i32 1) #9
  unreachable

if.end29:                                         ; preds = %if.end23
  br label %if.end30

if.else:                                          ; preds = %if.end6
  %38 = load %struct.connecttab** %c.addr, align 8
  %39 = load %struct.timeval** %tvP.addr, align 8
  call void @really_clear_connection(%struct.connecttab* %38, %struct.timeval* %39)
  br label %if.end30

if.end30:                                         ; preds = %if.else, %if.end29
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @handle_read(%struct.connecttab* %c, %struct.timeval* %tvP) #0 {
entry:
  %c.addr = alloca %struct.connecttab*, align 8
  %tvP.addr = alloca %struct.timeval*, align 8
  %sz = alloca i32, align 4
  %client_data = alloca %union.ClientData, align 8
  %hc = alloca %struct.httpd_conn*, align 8
  %tind = alloca i32, align 4
  store %struct.connecttab* %c, %struct.connecttab** %c.addr, align 8
  store %struct.timeval* %tvP, %struct.timeval** %tvP.addr, align 8
  %0 = load %struct.connecttab** %c.addr, align 8
  %hc1 = getelementptr inbounds %struct.connecttab* %0, i32 0, i32 2
  %1 = load %struct.httpd_conn** %hc1, align 8
  store %struct.httpd_conn* %1, %struct.httpd_conn** %hc, align 8
  %2 = load %struct.httpd_conn** %hc, align 8
  %read_idx = getelementptr inbounds %struct.httpd_conn* %2, i32 0, i32 5
  %3 = load i64* %read_idx, align 8
  %4 = load %struct.httpd_conn** %hc, align 8
  %read_size = getelementptr inbounds %struct.httpd_conn* %4, i32 0, i32 4
  %5 = load i64* %read_size, align 8
  %cmp = icmp uge i64 %3, %5
  br i1 %cmp, label %if.then, label %if.end7

if.then:                                          ; preds = %entry
  %6 = load %struct.httpd_conn** %hc, align 8
  %read_size2 = getelementptr inbounds %struct.httpd_conn* %6, i32 0, i32 4
  %7 = load i64* %read_size2, align 8
  %cmp3 = icmp ugt i64 %7, 5000
  br i1 %cmp3, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.then
  %8 = load %struct.httpd_conn** %hc, align 8
  %9 = load i8** @httpd_err400title, align 8
  %10 = load i8** @httpd_err400form, align 8
  call void @httpd_send_err(%struct.httpd_conn* %8, i32 400, i8* %9, i8* getelementptr inbounds ([1 x i8]* @.str42, i32 0, i32 0), i8* %10, i8* getelementptr inbounds ([1 x i8]* @.str42, i32 0, i32 0))
  %11 = load %struct.connecttab** %c.addr, align 8
  %12 = load %struct.timeval** %tvP.addr, align 8
  call void @finish_connection(%struct.connecttab* %11, %struct.timeval* %12)
  br label %return

if.end:                                           ; preds = %if.then
  %13 = load %struct.httpd_conn** %hc, align 8
  %read_buf = getelementptr inbounds %struct.httpd_conn* %13, i32 0, i32 3
  %14 = load %struct.httpd_conn** %hc, align 8
  %read_size5 = getelementptr inbounds %struct.httpd_conn* %14, i32 0, i32 4
  %15 = load %struct.httpd_conn** %hc, align 8
  %read_size6 = getelementptr inbounds %struct.httpd_conn* %15, i32 0, i32 4
  %16 = load i64* %read_size6, align 8
  %add = add i64 %16, 1000
  call void @httpd_realloc_str(i8** %read_buf, i64* %read_size5, i64 %add)
  br label %if.end7

if.end7:                                          ; preds = %if.end, %entry
  %17 = load %struct.httpd_conn** %hc, align 8
  %conn_fd = getelementptr inbounds %struct.httpd_conn* %17, i32 0, i32 60
  %18 = load i32* %conn_fd, align 4
  %19 = load %struct.httpd_conn** %hc, align 8
  %read_idx8 = getelementptr inbounds %struct.httpd_conn* %19, i32 0, i32 5
  %20 = load i64* %read_idx8, align 8
  %21 = load %struct.httpd_conn** %hc, align 8
  %read_buf9 = getelementptr inbounds %struct.httpd_conn* %21, i32 0, i32 3
  %22 = load i8** %read_buf9, align 8
  %arrayidx = getelementptr inbounds i8* %22, i64 %20
  %23 = load %struct.httpd_conn** %hc, align 8
  %read_size10 = getelementptr inbounds %struct.httpd_conn* %23, i32 0, i32 4
  %24 = load i64* %read_size10, align 8
  %25 = load %struct.httpd_conn** %hc, align 8
  %read_idx11 = getelementptr inbounds %struct.httpd_conn* %25, i32 0, i32 5
  %26 = load i64* %read_idx11, align 8
  %sub = sub i64 %24, %26
  %call = call i64 @read(i32 %18, i8* %arrayidx, i64 %sub)
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %sz, align 4
  %27 = load i32* %sz, align 4
  %cmp12 = icmp eq i32 %27, 0
  br i1 %cmp12, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.end7
  %28 = load %struct.httpd_conn** %hc, align 8
  %29 = load i8** @httpd_err400title, align 8
  %30 = load i8** @httpd_err400form, align 8
  call void @httpd_send_err(%struct.httpd_conn* %28, i32 400, i8* %29, i8* getelementptr inbounds ([1 x i8]* @.str42, i32 0, i32 0), i8* %30, i8* getelementptr inbounds ([1 x i8]* @.str42, i32 0, i32 0))
  %31 = load %struct.connecttab** %c.addr, align 8
  %32 = load %struct.timeval** %tvP.addr, align 8
  call void @finish_connection(%struct.connecttab* %31, %struct.timeval* %32)
  br label %return

if.end15:                                         ; preds = %if.end7
  %33 = load i32* %sz, align 4
  %cmp16 = icmp slt i32 %33, 0
  br i1 %cmp16, label %if.then18, label %if.end31

if.then18:                                        ; preds = %if.end15
  %call19 = call i32* @__errno_location() #10
  %34 = load i32* %call19, align 4
  %cmp20 = icmp eq i32 %34, 4
  br i1 %cmp20, label %if.then29, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then18
  %call22 = call i32* @__errno_location() #10
  %35 = load i32* %call22, align 4
  %cmp23 = icmp eq i32 %35, 11
  br i1 %cmp23, label %if.then29, label %lor.lhs.false25

lor.lhs.false25:                                  ; preds = %lor.lhs.false
  %call26 = call i32* @__errno_location() #10
  %36 = load i32* %call26, align 4
  %cmp27 = icmp eq i32 %36, 11
  br i1 %cmp27, label %if.then29, label %if.end30

if.then29:                                        ; preds = %lor.lhs.false25, %lor.lhs.false, %if.then18
  br label %return

if.end30:                                         ; preds = %lor.lhs.false25
  %37 = load %struct.httpd_conn** %hc, align 8
  %38 = load i8** @httpd_err400title, align 8
  %39 = load i8** @httpd_err400form, align 8
  call void @httpd_send_err(%struct.httpd_conn* %37, i32 400, i8* %38, i8* getelementptr inbounds ([1 x i8]* @.str42, i32 0, i32 0), i8* %39, i8* getelementptr inbounds ([1 x i8]* @.str42, i32 0, i32 0))
  %40 = load %struct.connecttab** %c.addr, align 8
  %41 = load %struct.timeval** %tvP.addr, align 8
  call void @finish_connection(%struct.connecttab* %40, %struct.timeval* %41)
  br label %return

if.end31:                                         ; preds = %if.end15
  %42 = load i32* %sz, align 4
  %conv32 = sext i32 %42 to i64
  %43 = load %struct.httpd_conn** %hc, align 8
  %read_idx33 = getelementptr inbounds %struct.httpd_conn* %43, i32 0, i32 5
  %44 = load i64* %read_idx33, align 8
  %add34 = add i64 %44, %conv32
  store i64 %add34, i64* %read_idx33, align 8
  %45 = load %struct.timeval** %tvP.addr, align 8
  %tv_sec = getelementptr inbounds %struct.timeval* %45, i32 0, i32 0
  %46 = load i64* %tv_sec, align 8
  %47 = load %struct.connecttab** %c.addr, align 8
  %active_at = getelementptr inbounds %struct.connecttab* %47, i32 0, i32 8
  store i64 %46, i64* %active_at, align 8
  %48 = load %struct.httpd_conn** %hc, align 8
  %call35 = call i32 @httpd_got_request(%struct.httpd_conn* %48)
  switch i32 %call35, label %sw.epilog [
    i32 0, label %sw.bb
    i32 2, label %sw.bb36
  ]

sw.bb:                                            ; preds = %if.end31
  br label %return

sw.bb36:                                          ; preds = %if.end31
  %49 = load %struct.httpd_conn** %hc, align 8
  %50 = load i8** @httpd_err400title, align 8
  %51 = load i8** @httpd_err400form, align 8
  call void @httpd_send_err(%struct.httpd_conn* %49, i32 400, i8* %50, i8* getelementptr inbounds ([1 x i8]* @.str42, i32 0, i32 0), i8* %51, i8* getelementptr inbounds ([1 x i8]* @.str42, i32 0, i32 0))
  %52 = load %struct.connecttab** %c.addr, align 8
  %53 = load %struct.timeval** %tvP.addr, align 8
  call void @finish_connection(%struct.connecttab* %52, %struct.timeval* %53)
  br label %return

sw.epilog:                                        ; preds = %if.end31
  %54 = load %struct.httpd_conn** %hc, align 8
  %call37 = call i32 @httpd_parse_request(%struct.httpd_conn* %54)
  %cmp38 = icmp slt i32 %call37, 0
  br i1 %cmp38, label %if.then40, label %if.end41

if.then40:                                        ; preds = %sw.epilog
  %55 = load %struct.connecttab** %c.addr, align 8
  %56 = load %struct.timeval** %tvP.addr, align 8
  call void @finish_connection(%struct.connecttab* %55, %struct.timeval* %56)
  br label %return

if.end41:                                         ; preds = %sw.epilog
  %57 = load %struct.connecttab** %c.addr, align 8
  %call42 = call i32 @check_throttles(%struct.connecttab* %57)
  %tobool = icmp ne i32 %call42, 0
  br i1 %tobool, label %if.end44, label %if.then43

if.then43:                                        ; preds = %if.end41
  %58 = load %struct.httpd_conn** %hc, align 8
  %59 = load i8** @httpd_err503title, align 8
  %60 = load i8** @httpd_err503form, align 8
  %61 = load %struct.httpd_conn** %hc, align 8
  %encodedurl = getelementptr inbounds %struct.httpd_conn* %61, i32 0, i32 12
  %62 = load i8** %encodedurl, align 8
  call void @httpd_send_err(%struct.httpd_conn* %58, i32 503, i8* %59, i8* getelementptr inbounds ([1 x i8]* @.str42, i32 0, i32 0), i8* %60, i8* %62)
  %63 = load %struct.connecttab** %c.addr, align 8
  %64 = load %struct.timeval** %tvP.addr, align 8
  call void @finish_connection(%struct.connecttab* %63, %struct.timeval* %64)
  br label %return

if.end44:                                         ; preds = %if.end41
  %65 = load %struct.httpd_conn** %hc, align 8
  %66 = load %struct.timeval** %tvP.addr, align 8
  %call45 = call i32 @httpd_start_request(%struct.httpd_conn* %65, %struct.timeval* %66)
  %cmp46 = icmp slt i32 %call45, 0
  br i1 %cmp46, label %if.then48, label %if.end49

if.then48:                                        ; preds = %if.end44
  %67 = load %struct.connecttab** %c.addr, align 8
  %68 = load %struct.timeval** %tvP.addr, align 8
  call void @finish_connection(%struct.connecttab* %67, %struct.timeval* %68)
  br label %return

if.end49:                                         ; preds = %if.end44
  %69 = load %struct.httpd_conn** %hc, align 8
  %got_range = getelementptr inbounds %struct.httpd_conn* %69, i32 0, i32 53
  %70 = load i32* %got_range, align 4
  %tobool50 = icmp ne i32 %70, 0
  br i1 %tobool50, label %if.then51, label %if.else

if.then51:                                        ; preds = %if.end49
  %71 = load %struct.httpd_conn** %hc, align 8
  %first_byte_index = getelementptr inbounds %struct.httpd_conn* %71, i32 0, i32 55
  %72 = load i64* %first_byte_index, align 8
  %73 = load %struct.connecttab** %c.addr, align 8
  %next_byte_index = getelementptr inbounds %struct.connecttab* %73, i32 0, i32 14
  store i64 %72, i64* %next_byte_index, align 8
  %74 = load %struct.httpd_conn** %hc, align 8
  %last_byte_index = getelementptr inbounds %struct.httpd_conn* %74, i32 0, i32 56
  %75 = load i64* %last_byte_index, align 8
  %add52 = add nsw i64 %75, 1
  %76 = load %struct.connecttab** %c.addr, align 8
  %end_byte_index = getelementptr inbounds %struct.connecttab* %76, i32 0, i32 13
  store i64 %add52, i64* %end_byte_index, align 8
  br label %if.end61

if.else:                                          ; preds = %if.end49
  %77 = load %struct.httpd_conn** %hc, align 8
  %bytes_to_send = getelementptr inbounds %struct.httpd_conn* %77, i32 0, i32 10
  %78 = load i64* %bytes_to_send, align 8
  %cmp53 = icmp slt i64 %78, 0
  br i1 %cmp53, label %if.then55, label %if.else57

if.then55:                                        ; preds = %if.else
  %79 = load %struct.connecttab** %c.addr, align 8
  %end_byte_index56 = getelementptr inbounds %struct.connecttab* %79, i32 0, i32 13
  store i64 0, i64* %end_byte_index56, align 8
  br label %if.end60

if.else57:                                        ; preds = %if.else
  %80 = load %struct.httpd_conn** %hc, align 8
  %bytes_to_send58 = getelementptr inbounds %struct.httpd_conn* %80, i32 0, i32 10
  %81 = load i64* %bytes_to_send58, align 8
  %82 = load %struct.connecttab** %c.addr, align 8
  %end_byte_index59 = getelementptr inbounds %struct.connecttab* %82, i32 0, i32 13
  store i64 %81, i64* %end_byte_index59, align 8
  br label %if.end60

if.end60:                                         ; preds = %if.else57, %if.then55
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %if.then51
  %83 = load %struct.httpd_conn** %hc, align 8
  %file_address = getelementptr inbounds %struct.httpd_conn* %83, i32 0, i32 61
  %84 = load i8** %file_address, align 8
  %cmp62 = icmp eq i8* %84, null
  br i1 %cmp62, label %if.then64, label %if.end73

if.then64:                                        ; preds = %if.end61
  store i32 0, i32* %tind, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then64
  %85 = load i32* %tind, align 4
  %86 = load %struct.connecttab** %c.addr, align 8
  %numtnums = getelementptr inbounds %struct.connecttab* %86, i32 0, i32 4
  %87 = load i32* %numtnums, align 4
  %cmp65 = icmp slt i32 %85, %87
  br i1 %cmp65, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %88 = load %struct.httpd_conn** %hc, align 8
  %bytes_sent = getelementptr inbounds %struct.httpd_conn* %88, i32 0, i32 11
  %89 = load i64* %bytes_sent, align 8
  %90 = load i32* %tind, align 4
  %idxprom = sext i32 %90 to i64
  %91 = load %struct.connecttab** %c.addr, align 8
  %tnums = getelementptr inbounds %struct.connecttab* %91, i32 0, i32 3
  %arrayidx67 = getelementptr inbounds [10 x i32]* %tnums, i32 0, i64 %idxprom
  %92 = load i32* %arrayidx67, align 4
  %idxprom68 = sext i32 %92 to i64
  %93 = load %struct.throttletab** @throttles, align 8
  %arrayidx69 = getelementptr inbounds %struct.throttletab* %93, i64 %idxprom68
  %bytes_since_avg = getelementptr inbounds %struct.throttletab* %arrayidx69, i32 0, i32 4
  %94 = load i64* %bytes_since_avg, align 8
  %add70 = add nsw i64 %94, %89
  store i64 %add70, i64* %bytes_since_avg, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %95 = load i32* %tind, align 4
  %inc = add nsw i32 %95, 1
  store i32 %inc, i32* %tind, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %96 = load %struct.httpd_conn** %hc, align 8
  %bytes_sent71 = getelementptr inbounds %struct.httpd_conn* %96, i32 0, i32 11
  %97 = load i64* %bytes_sent71, align 8
  %98 = load %struct.connecttab** %c.addr, align 8
  %next_byte_index72 = getelementptr inbounds %struct.connecttab* %98, i32 0, i32 14
  store i64 %97, i64* %next_byte_index72, align 8
  %99 = load %struct.connecttab** %c.addr, align 8
  %100 = load %struct.timeval** %tvP.addr, align 8
  call void @finish_connection(%struct.connecttab* %99, %struct.timeval* %100)
  br label %return

if.end73:                                         ; preds = %if.end61
  %101 = load %struct.connecttab** %c.addr, align 8
  %next_byte_index74 = getelementptr inbounds %struct.connecttab* %101, i32 0, i32 14
  %102 = load i64* %next_byte_index74, align 8
  %103 = load %struct.connecttab** %c.addr, align 8
  %end_byte_index75 = getelementptr inbounds %struct.connecttab* %103, i32 0, i32 13
  %104 = load i64* %end_byte_index75, align 8
  %cmp76 = icmp sge i64 %102, %104
  br i1 %cmp76, label %if.then78, label %if.end79

if.then78:                                        ; preds = %if.end73
  %105 = load %struct.connecttab** %c.addr, align 8
  %106 = load %struct.timeval** %tvP.addr, align 8
  call void @finish_connection(%struct.connecttab* %105, %struct.timeval* %106)
  br label %return

if.end79:                                         ; preds = %if.end73
  %107 = load %struct.connecttab** %c.addr, align 8
  %conn_state = getelementptr inbounds %struct.connecttab* %107, i32 0, i32 0
  store i32 2, i32* %conn_state, align 4
  %108 = load %struct.timeval** %tvP.addr, align 8
  %tv_sec80 = getelementptr inbounds %struct.timeval* %108, i32 0, i32 0
  %109 = load i64* %tv_sec80, align 8
  %110 = load %struct.connecttab** %c.addr, align 8
  %started_at = getelementptr inbounds %struct.connecttab* %110, i32 0, i32 7
  store i64 %109, i64* %started_at, align 8
  %111 = load %struct.connecttab** %c.addr, align 8
  %wouldblock_delay = getelementptr inbounds %struct.connecttab* %111, i32 0, i32 11
  store i64 0, i64* %wouldblock_delay, align 8
  %112 = load %struct.connecttab** %c.addr, align 8
  %113 = bitcast %struct.connecttab* %112 to i8*
  %p = bitcast %union.ClientData* %client_data to i8**
  store i8* %113, i8** %p, align 8
  %114 = load %struct.httpd_conn** %hc, align 8
  %conn_fd81 = getelementptr inbounds %struct.httpd_conn* %114, i32 0, i32 60
  %115 = load i32* %conn_fd81, align 4
  call void @fdwatch_del_fd(i32 %115)
  %116 = load %struct.httpd_conn** %hc, align 8
  %conn_fd82 = getelementptr inbounds %struct.httpd_conn* %116, i32 0, i32 60
  %117 = load i32* %conn_fd82, align 4
  %118 = load %struct.connecttab** %c.addr, align 8
  %119 = bitcast %struct.connecttab* %118 to i8*
  call void @fdwatch_add_fd(i32 %117, i8* %119, i32 1)
  br label %return

return:                                           ; preds = %if.end79, %if.then78, %for.end, %if.then48, %if.then43, %if.then40, %sw.bb36, %sw.bb, %if.end30, %if.then29, %if.then14, %if.then4
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @handle_send(%struct.connecttab* %c, %struct.timeval* %tvP) #0 {
entry:
  %c.addr = alloca %struct.connecttab*, align 8
  %tvP.addr = alloca %struct.timeval*, align 8
  %max_bytes = alloca i64, align 8
  %sz = alloca i32, align 4
  %coast = alloca i32, align 4
  %client_data = alloca %union.ClientData, align 8
  %elapsed = alloca i64, align 8
  %hc = alloca %struct.httpd_conn*, align 8
  %tind = alloca i32, align 4
  %iv = alloca [2 x %struct.iovec], align 16
  %newlen = alloca i32, align 4
  store %struct.connecttab* %c, %struct.connecttab** %c.addr, align 8
  store %struct.timeval* %tvP, %struct.timeval** %tvP.addr, align 8
  %0 = load %struct.connecttab** %c.addr, align 8
  %hc1 = getelementptr inbounds %struct.connecttab* %0, i32 0, i32 2
  %1 = load %struct.httpd_conn** %hc1, align 8
  store %struct.httpd_conn* %1, %struct.httpd_conn** %hc, align 8
  %2 = load %struct.connecttab** %c.addr, align 8
  %max_limit = getelementptr inbounds %struct.connecttab* %2, i32 0, i32 5
  %3 = load i64* %max_limit, align 8
  %cmp = icmp eq i64 %3, -1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i64 1000000000, i64* %max_bytes, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %4 = load %struct.connecttab** %c.addr, align 8
  %max_limit2 = getelementptr inbounds %struct.connecttab* %4, i32 0, i32 5
  %5 = load i64* %max_limit2, align 8
  %div = sdiv i64 %5, 4
  store i64 %div, i64* %max_bytes, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load %struct.httpd_conn** %hc, align 8
  %responselen = getelementptr inbounds %struct.httpd_conn* %6, i32 0, i32 45
  %7 = load i64* %responselen, align 8
  %cmp3 = icmp eq i64 %7, 0
  br i1 %cmp3, label %if.then4, label %if.else10

if.then4:                                         ; preds = %if.end
  %8 = load %struct.httpd_conn** %hc, align 8
  %conn_fd = getelementptr inbounds %struct.httpd_conn* %8, i32 0, i32 60
  %9 = load i32* %conn_fd, align 4
  %10 = load %struct.connecttab** %c.addr, align 8
  %next_byte_index = getelementptr inbounds %struct.connecttab* %10, i32 0, i32 14
  %11 = load i64* %next_byte_index, align 8
  %12 = load %struct.httpd_conn** %hc, align 8
  %file_address = getelementptr inbounds %struct.httpd_conn* %12, i32 0, i32 61
  %13 = load i8** %file_address, align 8
  %arrayidx = getelementptr inbounds i8* %13, i64 %11
  %14 = load %struct.connecttab** %c.addr, align 8
  %end_byte_index = getelementptr inbounds %struct.connecttab* %14, i32 0, i32 13
  %15 = load i64* %end_byte_index, align 8
  %16 = load %struct.connecttab** %c.addr, align 8
  %next_byte_index5 = getelementptr inbounds %struct.connecttab* %16, i32 0, i32 14
  %17 = load i64* %next_byte_index5, align 8
  %sub = sub nsw i64 %15, %17
  %18 = load i64* %max_bytes, align 8
  %cmp6 = icmp ult i64 %sub, %18
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then4
  %19 = load %struct.connecttab** %c.addr, align 8
  %end_byte_index7 = getelementptr inbounds %struct.connecttab* %19, i32 0, i32 13
  %20 = load i64* %end_byte_index7, align 8
  %21 = load %struct.connecttab** %c.addr, align 8
  %next_byte_index8 = getelementptr inbounds %struct.connecttab* %21, i32 0, i32 14
  %22 = load i64* %next_byte_index8, align 8
  %sub9 = sub nsw i64 %20, %22
  br label %cond.end

cond.false:                                       ; preds = %if.then4
  %23 = load i64* %max_bytes, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub9, %cond.true ], [ %23, %cond.false ]
  %call = call i64 @write(i32 %9, i8* %arrayidx, i64 %cond)
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %sz, align 4
  br label %if.end36

if.else10:                                        ; preds = %if.end
  %24 = load %struct.httpd_conn** %hc, align 8
  %response = getelementptr inbounds %struct.httpd_conn* %24, i32 0, i32 32
  %25 = load i8** %response, align 8
  %arrayidx11 = getelementptr inbounds [2 x %struct.iovec]* %iv, i32 0, i64 0
  %iov_base = getelementptr inbounds %struct.iovec* %arrayidx11, i32 0, i32 0
  store i8* %25, i8** %iov_base, align 8
  %26 = load %struct.httpd_conn** %hc, align 8
  %responselen12 = getelementptr inbounds %struct.httpd_conn* %26, i32 0, i32 45
  %27 = load i64* %responselen12, align 8
  %arrayidx13 = getelementptr inbounds [2 x %struct.iovec]* %iv, i32 0, i64 0
  %iov_len = getelementptr inbounds %struct.iovec* %arrayidx13, i32 0, i32 1
  store i64 %27, i64* %iov_len, align 8
  %28 = load %struct.connecttab** %c.addr, align 8
  %next_byte_index14 = getelementptr inbounds %struct.connecttab* %28, i32 0, i32 14
  %29 = load i64* %next_byte_index14, align 8
  %30 = load %struct.httpd_conn** %hc, align 8
  %file_address15 = getelementptr inbounds %struct.httpd_conn* %30, i32 0, i32 61
  %31 = load i8** %file_address15, align 8
  %arrayidx16 = getelementptr inbounds i8* %31, i64 %29
  %arrayidx17 = getelementptr inbounds [2 x %struct.iovec]* %iv, i32 0, i64 1
  %iov_base18 = getelementptr inbounds %struct.iovec* %arrayidx17, i32 0, i32 0
  store i8* %arrayidx16, i8** %iov_base18, align 8
  %32 = load %struct.connecttab** %c.addr, align 8
  %end_byte_index19 = getelementptr inbounds %struct.connecttab* %32, i32 0, i32 13
  %33 = load i64* %end_byte_index19, align 8
  %34 = load %struct.connecttab** %c.addr, align 8
  %next_byte_index20 = getelementptr inbounds %struct.connecttab* %34, i32 0, i32 14
  %35 = load i64* %next_byte_index20, align 8
  %sub21 = sub nsw i64 %33, %35
  %36 = load i64* %max_bytes, align 8
  %cmp22 = icmp ult i64 %sub21, %36
  br i1 %cmp22, label %cond.true24, label %cond.false28

cond.true24:                                      ; preds = %if.else10
  %37 = load %struct.connecttab** %c.addr, align 8
  %end_byte_index25 = getelementptr inbounds %struct.connecttab* %37, i32 0, i32 13
  %38 = load i64* %end_byte_index25, align 8
  %39 = load %struct.connecttab** %c.addr, align 8
  %next_byte_index26 = getelementptr inbounds %struct.connecttab* %39, i32 0, i32 14
  %40 = load i64* %next_byte_index26, align 8
  %sub27 = sub nsw i64 %38, %40
  br label %cond.end29

cond.false28:                                     ; preds = %if.else10
  %41 = load i64* %max_bytes, align 8
  br label %cond.end29

cond.end29:                                       ; preds = %cond.false28, %cond.true24
  %cond30 = phi i64 [ %sub27, %cond.true24 ], [ %41, %cond.false28 ]
  %arrayidx31 = getelementptr inbounds [2 x %struct.iovec]* %iv, i32 0, i64 1
  %iov_len32 = getelementptr inbounds %struct.iovec* %arrayidx31, i32 0, i32 1
  store i64 %cond30, i64* %iov_len32, align 8
  %42 = load %struct.httpd_conn** %hc, align 8
  %conn_fd33 = getelementptr inbounds %struct.httpd_conn* %42, i32 0, i32 60
  %43 = load i32* %conn_fd33, align 4
  %arraydecay = getelementptr inbounds [2 x %struct.iovec]* %iv, i32 0, i32 0
  %call34 = call i64 @writev(i32 %43, %struct.iovec* %arraydecay, i32 2)
  %conv35 = trunc i64 %call34 to i32
  store i32 %conv35, i32* %sz, align 4
  br label %if.end36

if.end36:                                         ; preds = %cond.end29, %cond.end
  %44 = load i32* %sz, align 4
  %cmp37 = icmp slt i32 %44, 0
  br i1 %cmp37, label %land.lhs.true, label %if.end43

land.lhs.true:                                    ; preds = %if.end36
  %call39 = call i32* @__errno_location() #10
  %45 = load i32* %call39, align 4
  %cmp40 = icmp eq i32 %45, 4
  br i1 %cmp40, label %if.then42, label %if.end43

if.then42:                                        ; preds = %land.lhs.true
  br label %if.end189

if.end43:                                         ; preds = %land.lhs.true, %if.end36
  %46 = load i32* %sz, align 4
  %cmp44 = icmp eq i32 %46, 0
  br i1 %cmp44, label %if.then56, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end43
  %47 = load i32* %sz, align 4
  %cmp46 = icmp slt i32 %47, 0
  br i1 %cmp46, label %land.lhs.true48, label %if.end70

land.lhs.true48:                                  ; preds = %lor.lhs.false
  %call49 = call i32* @__errno_location() #10
  %48 = load i32* %call49, align 4
  %cmp50 = icmp eq i32 %48, 11
  br i1 %cmp50, label %if.then56, label %lor.lhs.false52

lor.lhs.false52:                                  ; preds = %land.lhs.true48
  %call53 = call i32* @__errno_location() #10
  %49 = load i32* %call53, align 4
  %cmp54 = icmp eq i32 %49, 11
  br i1 %cmp54, label %if.then56, label %if.end70

if.then56:                                        ; preds = %lor.lhs.false52, %land.lhs.true48, %if.end43
  %50 = load %struct.connecttab** %c.addr, align 8
  %wouldblock_delay = getelementptr inbounds %struct.connecttab* %50, i32 0, i32 11
  %51 = load i64* %wouldblock_delay, align 8
  %add = add nsw i64 %51, 100
  store i64 %add, i64* %wouldblock_delay, align 8
  %52 = load %struct.connecttab** %c.addr, align 8
  %conn_state = getelementptr inbounds %struct.connecttab* %52, i32 0, i32 0
  store i32 3, i32* %conn_state, align 4
  %53 = load %struct.httpd_conn** %hc, align 8
  %conn_fd57 = getelementptr inbounds %struct.httpd_conn* %53, i32 0, i32 60
  %54 = load i32* %conn_fd57, align 4
  call void @fdwatch_del_fd(i32 %54)
  %55 = load %struct.connecttab** %c.addr, align 8
  %56 = bitcast %struct.connecttab* %55 to i8*
  %p = bitcast %union.ClientData* %client_data to i8**
  store i8* %56, i8** %p, align 8
  %57 = load %struct.connecttab** %c.addr, align 8
  %wakeup_timer = getelementptr inbounds %struct.connecttab* %57, i32 0, i32 9
  %58 = load %struct.TimerStruct** %wakeup_timer, align 8
  %cmp58 = icmp ne %struct.TimerStruct* %58, null
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %if.then56
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([33 x i8]* @.str49, i32 0, i32 0))
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %if.then56
  %59 = load %struct.timeval** %tvP.addr, align 8
  %60 = load %struct.connecttab** %c.addr, align 8
  %wouldblock_delay62 = getelementptr inbounds %struct.connecttab* %60, i32 0, i32 11
  %61 = load i64* %wouldblock_delay62, align 8
  %coerce.dive = getelementptr %union.ClientData* %client_data, i32 0, i32 0
  %62 = load i8** %coerce.dive
  %call63 = call %struct.TimerStruct* @tmr_create(%struct.timeval* %59, void (i8*, %struct.timeval*)* @wakeup_connection, i8* %62, i64 %61, i32 0)
  %63 = load %struct.connecttab** %c.addr, align 8
  %wakeup_timer64 = getelementptr inbounds %struct.connecttab* %63, i32 0, i32 9
  store %struct.TimerStruct* %call63, %struct.TimerStruct** %wakeup_timer64, align 8
  %64 = load %struct.connecttab** %c.addr, align 8
  %wakeup_timer65 = getelementptr inbounds %struct.connecttab* %64, i32 0, i32 9
  %65 = load %struct.TimerStruct** %wakeup_timer65, align 8
  %cmp66 = icmp eq %struct.TimerStruct* %65, null
  br i1 %cmp66, label %if.then68, label %if.end69

if.then68:                                        ; preds = %if.end61
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([37 x i8]* @.str50, i32 0, i32 0))
  call void @exit(i32 1) #9
  unreachable

if.end69:                                         ; preds = %if.end61
  br label %if.end189

if.end70:                                         ; preds = %lor.lhs.false52, %lor.lhs.false
  %66 = load i32* %sz, align 4
  %cmp71 = icmp slt i32 %66, 0
  br i1 %cmp71, label %if.then73, label %if.end87

if.then73:                                        ; preds = %if.end70
  %call74 = call i32* @__errno_location() #10
  %67 = load i32* %call74, align 4
  %cmp75 = icmp ne i32 %67, 32
  br i1 %cmp75, label %land.lhs.true77, label %if.end86

land.lhs.true77:                                  ; preds = %if.then73
  %call78 = call i32* @__errno_location() #10
  %68 = load i32* %call78, align 4
  %cmp79 = icmp ne i32 %68, 22
  br i1 %cmp79, label %land.lhs.true81, label %if.end86

land.lhs.true81:                                  ; preds = %land.lhs.true77
  %call82 = call i32* @__errno_location() #10
  %69 = load i32* %call82, align 4
  %cmp83 = icmp ne i32 %69, 104
  br i1 %cmp83, label %if.then85, label %if.end86

if.then85:                                        ; preds = %land.lhs.true81
  %70 = load %struct.httpd_conn** %hc, align 8
  %encodedurl = getelementptr inbounds %struct.httpd_conn* %70, i32 0, i32 12
  %71 = load i8** %encodedurl, align 8
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([25 x i8]* @.str51, i32 0, i32 0), i8* %71)
  br label %if.end86

if.end86:                                         ; preds = %if.then85, %land.lhs.true81, %land.lhs.true77, %if.then73
  %72 = load %struct.connecttab** %c.addr, align 8
  %73 = load %struct.timeval** %tvP.addr, align 8
  call void @clear_connection(%struct.connecttab* %72, %struct.timeval* %73)
  br label %if.end189

if.end87:                                         ; preds = %if.end70
  %74 = load %struct.timeval** %tvP.addr, align 8
  %tv_sec = getelementptr inbounds %struct.timeval* %74, i32 0, i32 0
  %75 = load i64* %tv_sec, align 8
  %76 = load %struct.connecttab** %c.addr, align 8
  %active_at = getelementptr inbounds %struct.connecttab* %76, i32 0, i32 8
  store i64 %75, i64* %active_at, align 8
  %77 = load %struct.httpd_conn** %hc, align 8
  %responselen88 = getelementptr inbounds %struct.httpd_conn* %77, i32 0, i32 45
  %78 = load i64* %responselen88, align 8
  %cmp89 = icmp ugt i64 %78, 0
  br i1 %cmp89, label %if.then91, label %if.end114

if.then91:                                        ; preds = %if.end87
  %79 = load i32* %sz, align 4
  %conv92 = sext i32 %79 to i64
  %80 = load %struct.httpd_conn** %hc, align 8
  %responselen93 = getelementptr inbounds %struct.httpd_conn* %80, i32 0, i32 45
  %81 = load i64* %responselen93, align 8
  %cmp94 = icmp ult i64 %conv92, %81
  br i1 %cmp94, label %if.then96, label %if.else107

if.then96:                                        ; preds = %if.then91
  %82 = load %struct.httpd_conn** %hc, align 8
  %responselen97 = getelementptr inbounds %struct.httpd_conn* %82, i32 0, i32 45
  %83 = load i64* %responselen97, align 8
  %84 = load i32* %sz, align 4
  %conv98 = sext i32 %84 to i64
  %sub99 = sub i64 %83, %conv98
  %conv100 = trunc i64 %sub99 to i32
  store i32 %conv100, i32* %newlen, align 4
  %85 = load %struct.httpd_conn** %hc, align 8
  %response101 = getelementptr inbounds %struct.httpd_conn* %85, i32 0, i32 32
  %86 = load i8** %response101, align 8
  %87 = load i32* %sz, align 4
  %idxprom = sext i32 %87 to i64
  %88 = load %struct.httpd_conn** %hc, align 8
  %response102 = getelementptr inbounds %struct.httpd_conn* %88, i32 0, i32 32
  %89 = load i8** %response102, align 8
  %arrayidx103 = getelementptr inbounds i8* %89, i64 %idxprom
  %90 = load i32* %newlen, align 4
  %conv104 = sext i32 %90 to i64
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %86, i8* %arrayidx103, i64 %conv104, i32 1, i1 false)
  %91 = load i32* %newlen, align 4
  %conv105 = sext i32 %91 to i64
  %92 = load %struct.httpd_conn** %hc, align 8
  %responselen106 = getelementptr inbounds %struct.httpd_conn* %92, i32 0, i32 45
  store i64 %conv105, i64* %responselen106, align 8
  store i32 0, i32* %sz, align 4
  br label %if.end113

if.else107:                                       ; preds = %if.then91
  %93 = load %struct.httpd_conn** %hc, align 8
  %responselen108 = getelementptr inbounds %struct.httpd_conn* %93, i32 0, i32 45
  %94 = load i64* %responselen108, align 8
  %95 = load i32* %sz, align 4
  %conv109 = sext i32 %95 to i64
  %sub110 = sub i64 %conv109, %94
  %conv111 = trunc i64 %sub110 to i32
  store i32 %conv111, i32* %sz, align 4
  %96 = load %struct.httpd_conn** %hc, align 8
  %responselen112 = getelementptr inbounds %struct.httpd_conn* %96, i32 0, i32 45
  store i64 0, i64* %responselen112, align 8
  br label %if.end113

if.end113:                                        ; preds = %if.else107, %if.then96
  br label %if.end114

if.end114:                                        ; preds = %if.end113, %if.end87
  %97 = load i32* %sz, align 4
  %conv115 = sext i32 %97 to i64
  %98 = load %struct.connecttab** %c.addr, align 8
  %next_byte_index116 = getelementptr inbounds %struct.connecttab* %98, i32 0, i32 14
  %99 = load i64* %next_byte_index116, align 8
  %add117 = add nsw i64 %99, %conv115
  store i64 %add117, i64* %next_byte_index116, align 8
  %100 = load i32* %sz, align 4
  %conv118 = sext i32 %100 to i64
  %101 = load %struct.connecttab** %c.addr, align 8
  %hc119 = getelementptr inbounds %struct.connecttab* %101, i32 0, i32 2
  %102 = load %struct.httpd_conn** %hc119, align 8
  %bytes_sent = getelementptr inbounds %struct.httpd_conn* %102, i32 0, i32 11
  %103 = load i64* %bytes_sent, align 8
  %add120 = add nsw i64 %103, %conv118
  store i64 %add120, i64* %bytes_sent, align 8
  store i32 0, i32* %tind, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end114
  %104 = load i32* %tind, align 4
  %105 = load %struct.connecttab** %c.addr, align 8
  %numtnums = getelementptr inbounds %struct.connecttab* %105, i32 0, i32 4
  %106 = load i32* %numtnums, align 4
  %cmp121 = icmp slt i32 %104, %106
  br i1 %cmp121, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %107 = load i32* %sz, align 4
  %conv123 = sext i32 %107 to i64
  %108 = load i32* %tind, align 4
  %idxprom124 = sext i32 %108 to i64
  %109 = load %struct.connecttab** %c.addr, align 8
  %tnums = getelementptr inbounds %struct.connecttab* %109, i32 0, i32 3
  %arrayidx125 = getelementptr inbounds [10 x i32]* %tnums, i32 0, i64 %idxprom124
  %110 = load i32* %arrayidx125, align 4
  %idxprom126 = sext i32 %110 to i64
  %111 = load %struct.throttletab** @throttles, align 8
  %arrayidx127 = getelementptr inbounds %struct.throttletab* %111, i64 %idxprom126
  %bytes_since_avg = getelementptr inbounds %struct.throttletab* %arrayidx127, i32 0, i32 4
  %112 = load i64* %bytes_since_avg, align 8
  %add128 = add nsw i64 %112, %conv123
  store i64 %add128, i64* %bytes_since_avg, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %113 = load i32* %tind, align 4
  %inc = add nsw i32 %113, 1
  store i32 %inc, i32* %tind, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %114 = load %struct.connecttab** %c.addr, align 8
  %next_byte_index129 = getelementptr inbounds %struct.connecttab* %114, i32 0, i32 14
  %115 = load i64* %next_byte_index129, align 8
  %116 = load %struct.connecttab** %c.addr, align 8
  %end_byte_index130 = getelementptr inbounds %struct.connecttab* %116, i32 0, i32 13
  %117 = load i64* %end_byte_index130, align 8
  %cmp131 = icmp sge i64 %115, %117
  br i1 %cmp131, label %if.then133, label %if.end134

if.then133:                                       ; preds = %for.end
  %118 = load %struct.connecttab** %c.addr, align 8
  %119 = load %struct.timeval** %tvP.addr, align 8
  call void @finish_connection(%struct.connecttab* %118, %struct.timeval* %119)
  br label %if.end189

if.end134:                                        ; preds = %for.end
  %120 = load %struct.connecttab** %c.addr, align 8
  %wouldblock_delay135 = getelementptr inbounds %struct.connecttab* %120, i32 0, i32 11
  %121 = load i64* %wouldblock_delay135, align 8
  %cmp136 = icmp sgt i64 %121, 100
  br i1 %cmp136, label %if.then138, label %if.end141

if.then138:                                       ; preds = %if.end134
  %122 = load %struct.connecttab** %c.addr, align 8
  %wouldblock_delay139 = getelementptr inbounds %struct.connecttab* %122, i32 0, i32 11
  %123 = load i64* %wouldblock_delay139, align 8
  %sub140 = sub nsw i64 %123, 100
  store i64 %sub140, i64* %wouldblock_delay139, align 8
  br label %if.end141

if.end141:                                        ; preds = %if.then138, %if.end134
  %124 = load %struct.connecttab** %c.addr, align 8
  %max_limit142 = getelementptr inbounds %struct.connecttab* %124, i32 0, i32 5
  %125 = load i64* %max_limit142, align 8
  %cmp143 = icmp ne i64 %125, -1
  br i1 %cmp143, label %if.then145, label %if.end189

if.then145:                                       ; preds = %if.end141
  %126 = load %struct.timeval** %tvP.addr, align 8
  %tv_sec146 = getelementptr inbounds %struct.timeval* %126, i32 0, i32 0
  %127 = load i64* %tv_sec146, align 8
  %128 = load %struct.connecttab** %c.addr, align 8
  %started_at = getelementptr inbounds %struct.connecttab* %128, i32 0, i32 7
  %129 = load i64* %started_at, align 8
  %sub147 = sub nsw i64 %127, %129
  store i64 %sub147, i64* %elapsed, align 8
  %130 = load i64* %elapsed, align 8
  %cmp148 = icmp eq i64 %130, 0
  br i1 %cmp148, label %if.then150, label %if.end151

if.then150:                                       ; preds = %if.then145
  store i64 1, i64* %elapsed, align 8
  br label %if.end151

if.end151:                                        ; preds = %if.then150, %if.then145
  %131 = load %struct.connecttab** %c.addr, align 8
  %hc152 = getelementptr inbounds %struct.connecttab* %131, i32 0, i32 2
  %132 = load %struct.httpd_conn** %hc152, align 8
  %bytes_sent153 = getelementptr inbounds %struct.httpd_conn* %132, i32 0, i32 11
  %133 = load i64* %bytes_sent153, align 8
  %134 = load i64* %elapsed, align 8
  %div154 = sdiv i64 %133, %134
  %135 = load %struct.connecttab** %c.addr, align 8
  %max_limit155 = getelementptr inbounds %struct.connecttab* %135, i32 0, i32 5
  %136 = load i64* %max_limit155, align 8
  %cmp156 = icmp sgt i64 %div154, %136
  br i1 %cmp156, label %if.then158, label %if.end188

if.then158:                                       ; preds = %if.end151
  %137 = load %struct.connecttab** %c.addr, align 8
  %conn_state159 = getelementptr inbounds %struct.connecttab* %137, i32 0, i32 0
  store i32 3, i32* %conn_state159, align 4
  %138 = load %struct.httpd_conn** %hc, align 8
  %conn_fd160 = getelementptr inbounds %struct.httpd_conn* %138, i32 0, i32 60
  %139 = load i32* %conn_fd160, align 4
  call void @fdwatch_del_fd(i32 %139)
  %140 = load %struct.connecttab** %c.addr, align 8
  %hc161 = getelementptr inbounds %struct.connecttab* %140, i32 0, i32 2
  %141 = load %struct.httpd_conn** %hc161, align 8
  %bytes_sent162 = getelementptr inbounds %struct.httpd_conn* %141, i32 0, i32 11
  %142 = load i64* %bytes_sent162, align 8
  %143 = load %struct.connecttab** %c.addr, align 8
  %max_limit163 = getelementptr inbounds %struct.connecttab* %143, i32 0, i32 5
  %144 = load i64* %max_limit163, align 8
  %div164 = sdiv i64 %142, %144
  %145 = load i64* %elapsed, align 8
  %sub165 = sub nsw i64 %div164, %145
  %conv166 = trunc i64 %sub165 to i32
  store i32 %conv166, i32* %coast, align 4
  %146 = load %struct.connecttab** %c.addr, align 8
  %147 = bitcast %struct.connecttab* %146 to i8*
  %p167 = bitcast %union.ClientData* %client_data to i8**
  store i8* %147, i8** %p167, align 8
  %148 = load %struct.connecttab** %c.addr, align 8
  %wakeup_timer168 = getelementptr inbounds %struct.connecttab* %148, i32 0, i32 9
  %149 = load %struct.TimerStruct** %wakeup_timer168, align 8
  %cmp169 = icmp ne %struct.TimerStruct* %149, null
  br i1 %cmp169, label %if.then171, label %if.end172

if.then171:                                       ; preds = %if.then158
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([33 x i8]* @.str49, i32 0, i32 0))
  br label %if.end172

if.end172:                                        ; preds = %if.then171, %if.then158
  %150 = load %struct.timeval** %tvP.addr, align 8
  %151 = load i32* %coast, align 4
  %cmp173 = icmp sgt i32 %151, 0
  br i1 %cmp173, label %cond.true175, label %cond.false177

cond.true175:                                     ; preds = %if.end172
  %152 = load i32* %coast, align 4
  %conv176 = sext i32 %152 to i64
  %mul = mul nsw i64 %conv176, 1000
  br label %cond.end178

cond.false177:                                    ; preds = %if.end172
  br label %cond.end178

cond.end178:                                      ; preds = %cond.false177, %cond.true175
  %cond179 = phi i64 [ %mul, %cond.true175 ], [ 500, %cond.false177 ]
  %coerce.dive180 = getelementptr %union.ClientData* %client_data, i32 0, i32 0
  %153 = load i8** %coerce.dive180
  %call181 = call %struct.TimerStruct* @tmr_create(%struct.timeval* %150, void (i8*, %struct.timeval*)* @wakeup_connection, i8* %153, i64 %cond179, i32 0)
  %154 = load %struct.connecttab** %c.addr, align 8
  %wakeup_timer182 = getelementptr inbounds %struct.connecttab* %154, i32 0, i32 9
  store %struct.TimerStruct* %call181, %struct.TimerStruct** %wakeup_timer182, align 8
  %155 = load %struct.connecttab** %c.addr, align 8
  %wakeup_timer183 = getelementptr inbounds %struct.connecttab* %155, i32 0, i32 9
  %156 = load %struct.TimerStruct** %wakeup_timer183, align 8
  %cmp184 = icmp eq %struct.TimerStruct* %156, null
  br i1 %cmp184, label %if.then186, label %if.end187

if.then186:                                       ; preds = %cond.end178
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([37 x i8]* @.str50, i32 0, i32 0))
  call void @exit(i32 1) #9
  unreachable

if.end187:                                        ; preds = %cond.end178
  br label %if.end188

if.end188:                                        ; preds = %if.end187, %if.end151
  br label %if.end189

if.end189:                                        ; preds = %if.end188, %if.end141, %if.then133, %if.end86, %if.end69, %if.then42
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @handle_linger(%struct.connecttab* %c, %struct.timeval* %tvP) #0 {
entry:
  %c.addr = alloca %struct.connecttab*, align 8
  %tvP.addr = alloca %struct.timeval*, align 8
  %buf = alloca [4096 x i8], align 16
  %r = alloca i32, align 4
  store %struct.connecttab* %c, %struct.connecttab** %c.addr, align 8
  store %struct.timeval* %tvP, %struct.timeval** %tvP.addr, align 8
  %0 = load %struct.connecttab** %c.addr, align 8
  %hc = getelementptr inbounds %struct.connecttab* %0, i32 0, i32 2
  %1 = load %struct.httpd_conn** %hc, align 8
  %conn_fd = getelementptr inbounds %struct.httpd_conn* %1, i32 0, i32 60
  %2 = load i32* %conn_fd, align 4
  %arraydecay = getelementptr inbounds [4096 x i8]* %buf, i32 0, i32 0
  %call = call i64 @read(i32 %2, i8* %arraydecay, i64 4096)
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %r, align 4
  %3 = load i32* %r, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %call2 = call i32* @__errno_location() #10
  %4 = load i32* %call2, align 4
  %cmp3 = icmp eq i32 %4, 4
  br i1 %cmp3, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %call5 = call i32* @__errno_location() #10
  %5 = load i32* %call5, align 4
  %cmp6 = icmp eq i32 %5, 11
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  br label %if.end11

if.end:                                           ; preds = %lor.lhs.false, %entry
  %6 = load i32* %r, align 4
  %cmp8 = icmp sle i32 %6, 0
  br i1 %cmp8, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.end
  %7 = load %struct.connecttab** %c.addr, align 8
  %8 = load %struct.timeval** %tvP.addr, align 8
  call void @really_clear_connection(%struct.connecttab* %7, %struct.timeval* %8)
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %if.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @shut_down() #0 {
entry:
  %cnum = alloca i32, align 4
  %tv = alloca %struct.timeval, align 8
  %ths = alloca %struct.httpd_server*, align 8
  %call = call i32 @gettimeofday(%struct.timeval* %tv, %struct.timezone* null) #5
  call void @logstats(%struct.timeval* %tv)
  store i32 0, i32* %cnum, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %cnum, align 4
  %1 = load i32* @max_connects, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %cnum, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load %struct.connecttab** @connects, align 8
  %arrayidx = getelementptr inbounds %struct.connecttab* %3, i64 %idxprom
  %conn_state = getelementptr inbounds %struct.connecttab* %arrayidx, i32 0, i32 0
  %4 = load i32* %conn_state, align 4
  %cmp1 = icmp ne i32 %4, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load i32* %cnum, align 4
  %idxprom2 = sext i32 %5 to i64
  %6 = load %struct.connecttab** @connects, align 8
  %arrayidx3 = getelementptr inbounds %struct.connecttab* %6, i64 %idxprom2
  %hc = getelementptr inbounds %struct.connecttab* %arrayidx3, i32 0, i32 2
  %7 = load %struct.httpd_conn** %hc, align 8
  call void @httpd_close_conn(%struct.httpd_conn* %7, %struct.timeval* %tv)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %8 = load i32* %cnum, align 4
  %idxprom4 = sext i32 %8 to i64
  %9 = load %struct.connecttab** @connects, align 8
  %arrayidx5 = getelementptr inbounds %struct.connecttab* %9, i64 %idxprom4
  %hc6 = getelementptr inbounds %struct.connecttab* %arrayidx5, i32 0, i32 2
  %10 = load %struct.httpd_conn** %hc6, align 8
  %cmp7 = icmp ne %struct.httpd_conn* %10, null
  br i1 %cmp7, label %if.then8, label %if.end18

if.then8:                                         ; preds = %if.end
  %11 = load i32* %cnum, align 4
  %idxprom9 = sext i32 %11 to i64
  %12 = load %struct.connecttab** @connects, align 8
  %arrayidx10 = getelementptr inbounds %struct.connecttab* %12, i64 %idxprom9
  %hc11 = getelementptr inbounds %struct.connecttab* %arrayidx10, i32 0, i32 2
  %13 = load %struct.httpd_conn** %hc11, align 8
  call void @httpd_destroy_conn(%struct.httpd_conn* %13)
  %14 = load i32* %cnum, align 4
  %idxprom12 = sext i32 %14 to i64
  %15 = load %struct.connecttab** @connects, align 8
  %arrayidx13 = getelementptr inbounds %struct.connecttab* %15, i64 %idxprom12
  %hc14 = getelementptr inbounds %struct.connecttab* %arrayidx13, i32 0, i32 2
  %16 = load %struct.httpd_conn** %hc14, align 8
  %17 = bitcast %struct.httpd_conn* %16 to i8*
  call void @free(i8* %17) #5
  %18 = load i32* @httpd_conn_count, align 4
  %dec = add nsw i32 %18, -1
  store i32 %dec, i32* @httpd_conn_count, align 4
  %19 = load i32* %cnum, align 4
  %idxprom15 = sext i32 %19 to i64
  %20 = load %struct.connecttab** @connects, align 8
  %arrayidx16 = getelementptr inbounds %struct.connecttab* %20, i64 %idxprom15
  %hc17 = getelementptr inbounds %struct.connecttab* %arrayidx16, i32 0, i32 2
  store %struct.httpd_conn* null, %struct.httpd_conn** %hc17, align 8
  br label %if.end18

if.end18:                                         ; preds = %if.then8, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end18
  %21 = load i32* %cnum, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %cnum, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %22 = load %struct.httpd_server** @hs, align 8
  %cmp19 = icmp ne %struct.httpd_server* %22, null
  br i1 %cmp19, label %if.then20, label %if.end29

if.then20:                                        ; preds = %for.end
  %23 = load %struct.httpd_server** @hs, align 8
  store %struct.httpd_server* %23, %struct.httpd_server** %ths, align 8
  store %struct.httpd_server* null, %struct.httpd_server** @hs, align 8
  %24 = load %struct.httpd_server** %ths, align 8
  %listen4_fd = getelementptr inbounds %struct.httpd_server* %24, i32 0, i32 10
  %25 = load i32* %listen4_fd, align 4
  %cmp21 = icmp ne i32 %25, -1
  br i1 %cmp21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %if.then20
  %26 = load %struct.httpd_server** %ths, align 8
  %listen4_fd23 = getelementptr inbounds %struct.httpd_server* %26, i32 0, i32 10
  %27 = load i32* %listen4_fd23, align 4
  call void @fdwatch_del_fd(i32 %27)
  br label %if.end24

if.end24:                                         ; preds = %if.then22, %if.then20
  %28 = load %struct.httpd_server** %ths, align 8
  %listen6_fd = getelementptr inbounds %struct.httpd_server* %28, i32 0, i32 11
  %29 = load i32* %listen6_fd, align 4
  %cmp25 = icmp ne i32 %29, -1
  br i1 %cmp25, label %if.then26, label %if.end28

if.then26:                                        ; preds = %if.end24
  %30 = load %struct.httpd_server** %ths, align 8
  %listen6_fd27 = getelementptr inbounds %struct.httpd_server* %30, i32 0, i32 11
  %31 = load i32* %listen6_fd27, align 4
  call void @fdwatch_del_fd(i32 %31)
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end24
  %32 = load %struct.httpd_server** %ths, align 8
  call void @httpd_terminate(%struct.httpd_server* %32)
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %for.end
  call void @mmc_term()
  call void @tmr_term()
  %33 = load %struct.connecttab** @connects, align 8
  %34 = bitcast %struct.connecttab* %33 to i8*
  call void @free(i8* %34) #5
  %35 = load %struct.throttletab** @throttles, align 8
  %cmp30 = icmp ne %struct.throttletab* %35, null
  br i1 %cmp30, label %if.then31, label %if.end32

if.then31:                                        ; preds = %if.end29
  %36 = load %struct.throttletab** @throttles, align 8
  %37 = bitcast %struct.throttletab* %36 to i8*
  call void @free(i8* %37) #5
  br label %if.end32

if.end32:                                         ; preds = %if.then31, %if.end29
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @read_config(i8* %filename) #0 {
entry:
  %filename.addr = alloca i8*, align 8
  %fp = alloca %struct._IO_FILE*, align 8
  %line = alloca [10000 x i8], align 16
  %cp = alloca i8*, align 8
  %cp2 = alloca i8*, align 8
  %name = alloca i8*, align 8
  %value = alloca i8*, align 8
  store i8* %filename, i8** %filename.addr, align 8
  %0 = load i8** %filename.addr, align 8
  %call = call %struct._IO_FILE* @fopen(i8* %0, i8* getelementptr inbounds ([2 x i8]* @.str56, i32 0, i32 0))
  store %struct._IO_FILE* %call, %struct._IO_FILE** %fp, align 8
  %1 = load %struct._IO_FILE** %fp, align 8
  %cmp = icmp eq %struct._IO_FILE* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8** %filename.addr, align 8
  call void @perror(i8* %2)
  call void @exit(i32 1) #9
  unreachable

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.end209, %if.end
  %arraydecay = getelementptr inbounds [10000 x i8]* %line, i32 0, i32 0
  %3 = load %struct._IO_FILE** %fp, align 8
  %call1 = call i8* @fgets(i8* %arraydecay, i32 10000, %struct._IO_FILE* %3)
  %cmp2 = icmp ne i8* %call1, null
  br i1 %cmp2, label %while.body, label %while.end210

while.body:                                       ; preds = %while.cond
  %arraydecay3 = getelementptr inbounds [10000 x i8]* %line, i32 0, i32 0
  %call4 = call i8* @strchr(i8* %arraydecay3, i32 35) #8
  store i8* %call4, i8** %cp, align 8
  %cmp5 = icmp ne i8* %call4, null
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %while.body
  %4 = load i8** %cp, align 8
  store i8 0, i8* %4, align 1
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %while.body
  %arraydecay8 = getelementptr inbounds [10000 x i8]* %line, i32 0, i32 0
  store i8* %arraydecay8, i8** %cp, align 8
  %5 = load i8** %cp, align 8
  %call9 = call i64 @strspn(i8* %5, i8* getelementptr inbounds ([5 x i8]* @.str98, i32 0, i32 0)) #8
  %6 = load i8** %cp, align 8
  %add.ptr = getelementptr inbounds i8* %6, i64 %call9
  store i8* %add.ptr, i8** %cp, align 8
  br label %while.cond10

while.cond10:                                     ; preds = %if.end206, %if.end7
  %7 = load i8** %cp, align 8
  %8 = load i8* %7, align 1
  %conv = sext i8 %8 to i32
  %cmp11 = icmp ne i32 %conv, 0
  br i1 %cmp11, label %while.body13, label %while.end209

while.body13:                                     ; preds = %while.cond10
  %9 = load i8** %cp, align 8
  %10 = load i8** %cp, align 8
  %call14 = call i64 @strcspn(i8* %10, i8* getelementptr inbounds ([5 x i8]* @.str98, i32 0, i32 0)) #8
  %add.ptr15 = getelementptr inbounds i8* %9, i64 %call14
  store i8* %add.ptr15, i8** %cp2, align 8
  br label %while.cond16

while.cond16:                                     ; preds = %while.body30, %while.body13
  %11 = load i8** %cp2, align 8
  %12 = load i8* %11, align 1
  %conv17 = sext i8 %12 to i32
  %cmp18 = icmp eq i32 %conv17, 32
  br i1 %cmp18, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.cond16
  %13 = load i8** %cp2, align 8
  %14 = load i8* %13, align 1
  %conv20 = sext i8 %14 to i32
  %cmp21 = icmp eq i32 %conv20, 9
  br i1 %cmp21, label %lor.end, label %lor.lhs.false23

lor.lhs.false23:                                  ; preds = %lor.lhs.false
  %15 = load i8** %cp2, align 8
  %16 = load i8* %15, align 1
  %conv24 = sext i8 %16 to i32
  %cmp25 = icmp eq i32 %conv24, 10
  br i1 %cmp25, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false23
  %17 = load i8** %cp2, align 8
  %18 = load i8* %17, align 1
  %conv27 = sext i8 %18 to i32
  %cmp28 = icmp eq i32 %conv27, 13
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false23, %lor.lhs.false, %while.cond16
  %19 = phi i1 [ true, %lor.lhs.false23 ], [ true, %lor.lhs.false ], [ true, %while.cond16 ], [ %cmp28, %lor.rhs ]
  br i1 %19, label %while.body30, label %while.end

while.body30:                                     ; preds = %lor.end
  %20 = load i8** %cp2, align 8
  %incdec.ptr = getelementptr inbounds i8* %20, i32 1
  store i8* %incdec.ptr, i8** %cp2, align 8
  store i8 0, i8* %20, align 1
  br label %while.cond16

while.end:                                        ; preds = %lor.end
  %21 = load i8** %cp, align 8
  store i8* %21, i8** %name, align 8
  %22 = load i8** %name, align 8
  %call31 = call i8* @strchr(i8* %22, i32 61) #8
  store i8* %call31, i8** %value, align 8
  %23 = load i8** %value, align 8
  %cmp32 = icmp ne i8* %23, null
  br i1 %cmp32, label %if.then34, label %if.end36

if.then34:                                        ; preds = %while.end
  %24 = load i8** %value, align 8
  %incdec.ptr35 = getelementptr inbounds i8* %24, i32 1
  store i8* %incdec.ptr35, i8** %value, align 8
  store i8 0, i8* %24, align 1
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %while.end
  %25 = load i8** %name, align 8
  %call37 = call i32 @strcasecmp(i8* %25, i8* getelementptr inbounds ([6 x i8]* @.str99, i32 0, i32 0)) #8
  %cmp38 = icmp eq i32 %call37, 0
  br i1 %cmp38, label %if.then40, label %if.else

if.then40:                                        ; preds = %if.end36
  %26 = load i8** %name, align 8
  %27 = load i8** %value, align 8
  call void @no_value_required(i8* %26, i8* %27)
  store i32 1, i32* @debug, align 4
  br label %if.end206

if.else:                                          ; preds = %if.end36
  %28 = load i8** %name, align 8
  %call41 = call i32 @strcasecmp(i8* %28, i8* getelementptr inbounds ([5 x i8]* @.str100, i32 0, i32 0)) #8
  %cmp42 = icmp eq i32 %call41, 0
  br i1 %cmp42, label %if.then44, label %if.else47

if.then44:                                        ; preds = %if.else
  %29 = load i8** %name, align 8
  %30 = load i8** %value, align 8
  call void @value_required(i8* %29, i8* %30)
  %31 = load i8** %value, align 8
  %call45 = call i32 @atoi(i8* %31) #8
  %conv46 = trunc i32 %call45 to i16
  store i16 %conv46, i16* @port, align 2
  br label %if.end205

if.else47:                                        ; preds = %if.else
  %32 = load i8** %name, align 8
  %call48 = call i32 @strcasecmp(i8* %32, i8* getelementptr inbounds ([4 x i8]* @.str101, i32 0, i32 0)) #8
  %cmp49 = icmp eq i32 %call48, 0
  br i1 %cmp49, label %if.then51, label %if.else53

if.then51:                                        ; preds = %if.else47
  %33 = load i8** %name, align 8
  %34 = load i8** %value, align 8
  call void @value_required(i8* %33, i8* %34)
  %35 = load i8** %value, align 8
  %call52 = call i8* @e_strdup(i8* %35)
  store i8* %call52, i8** @dir, align 8
  br label %if.end204

if.else53:                                        ; preds = %if.else47
  %36 = load i8** %name, align 8
  %call54 = call i32 @strcasecmp(i8* %36, i8* getelementptr inbounds ([7 x i8]* @.str20, i32 0, i32 0)) #8
  %cmp55 = icmp eq i32 %call54, 0
  br i1 %cmp55, label %if.then57, label %if.else58

if.then57:                                        ; preds = %if.else53
  %37 = load i8** %name, align 8
  %38 = load i8** %value, align 8
  call void @no_value_required(i8* %37, i8* %38)
  store i32 1, i32* @do_chroot, align 4
  store i32 1, i32* @no_symlink_check, align 4
  br label %if.end203

if.else58:                                        ; preds = %if.else53
  %39 = load i8** %name, align 8
  %call59 = call i32 @strcasecmp(i8* %39, i8* getelementptr inbounds ([9 x i8]* @.str102, i32 0, i32 0)) #8
  %cmp60 = icmp eq i32 %call59, 0
  br i1 %cmp60, label %if.then62, label %if.else63

if.then62:                                        ; preds = %if.else58
  %40 = load i8** %name, align 8
  %41 = load i8** %value, align 8
  call void @no_value_required(i8* %40, i8* %41)
  store i32 0, i32* @do_chroot, align 4
  store i32 0, i32* @no_symlink_check, align 4
  br label %if.end202

if.else63:                                        ; preds = %if.else58
  %42 = load i8** %name, align 8
  %call64 = call i32 @strcasecmp(i8* %42, i8* getelementptr inbounds ([9 x i8]* @.str103, i32 0, i32 0)) #8
  %cmp65 = icmp eq i32 %call64, 0
  br i1 %cmp65, label %if.then67, label %if.else69

if.then67:                                        ; preds = %if.else63
  %43 = load i8** %name, align 8
  %44 = load i8** %value, align 8
  call void @value_required(i8* %43, i8* %44)
  %45 = load i8** %value, align 8
  %call68 = call i8* @e_strdup(i8* %45)
  store i8* %call68, i8** @data_dir, align 8
  br label %if.end201

if.else69:                                        ; preds = %if.else63
  %46 = load i8** %name, align 8
  %call70 = call i32 @strcasecmp(i8* %46, i8* getelementptr inbounds ([15 x i8]* @.str104, i32 0, i32 0)) #8
  %cmp71 = icmp eq i32 %call70, 0
  br i1 %cmp71, label %if.then73, label %if.else74

if.then73:                                        ; preds = %if.else69
  %47 = load i8** %name, align 8
  %48 = load i8** %value, align 8
  call void @no_value_required(i8* %47, i8* %48)
  store i32 1, i32* @no_symlink_check, align 4
  br label %if.end200

if.else74:                                        ; preds = %if.else69
  %49 = load i8** %name, align 8
  %call75 = call i32 @strcasecmp(i8* %49, i8* getelementptr inbounds ([13 x i8]* @.str105, i32 0, i32 0)) #8
  %cmp76 = icmp eq i32 %call75, 0
  br i1 %cmp76, label %if.then78, label %if.else79

if.then78:                                        ; preds = %if.else74
  %50 = load i8** %name, align 8
  %51 = load i8** %value, align 8
  call void @no_value_required(i8* %50, i8* %51)
  store i32 0, i32* @no_symlink_check, align 4
  br label %if.end199

if.else79:                                        ; preds = %if.else74
  %52 = load i8** %name, align 8
  %call80 = call i32 @strcasecmp(i8* %52, i8* getelementptr inbounds ([5 x i8]* @.str106, i32 0, i32 0)) #8
  %cmp81 = icmp eq i32 %call80, 0
  br i1 %cmp81, label %if.then83, label %if.else85

if.then83:                                        ; preds = %if.else79
  %53 = load i8** %name, align 8
  %54 = load i8** %value, align 8
  call void @value_required(i8* %53, i8* %54)
  %55 = load i8** %value, align 8
  %call84 = call i8* @e_strdup(i8* %55)
  store i8* %call84, i8** @user, align 8
  br label %if.end198

if.else85:                                        ; preds = %if.else79
  %56 = load i8** %name, align 8
  %call86 = call i32 @strcasecmp(i8* %56, i8* getelementptr inbounds ([7 x i8]* @.str107, i32 0, i32 0)) #8
  %cmp87 = icmp eq i32 %call86, 0
  br i1 %cmp87, label %if.then89, label %if.else91

if.then89:                                        ; preds = %if.else85
  %57 = load i8** %name, align 8
  %58 = load i8** %value, align 8
  call void @value_required(i8* %57, i8* %58)
  %59 = load i8** %value, align 8
  %call90 = call i8* @e_strdup(i8* %59)
  store i8* %call90, i8** @cgi_pattern, align 8
  br label %if.end197

if.else91:                                        ; preds = %if.else85
  %60 = load i8** %name, align 8
  %call92 = call i32 @strcasecmp(i8* %60, i8* getelementptr inbounds ([9 x i8]* @.str108, i32 0, i32 0)) #8
  %cmp93 = icmp eq i32 %call92, 0
  br i1 %cmp93, label %if.then95, label %if.else97

if.then95:                                        ; preds = %if.else91
  %61 = load i8** %name, align 8
  %62 = load i8** %value, align 8
  call void @value_required(i8* %61, i8* %62)
  %63 = load i8** %value, align 8
  %call96 = call i32 @atoi(i8* %63) #8
  store i32 %call96, i32* @cgi_limit, align 4
  br label %if.end196

if.else97:                                        ; preds = %if.else91
  %64 = load i8** %name, align 8
  %call98 = call i32 @strcasecmp(i8* %64, i8* getelementptr inbounds ([7 x i8]* @.str109, i32 0, i32 0)) #8
  %cmp99 = icmp eq i32 %call98, 0
  br i1 %cmp99, label %if.then101, label %if.else103

if.then101:                                       ; preds = %if.else97
  %65 = load i8** %name, align 8
  %66 = load i8** %value, align 8
  call void @value_required(i8* %65, i8* %66)
  %67 = load i8** %value, align 8
  %call102 = call i8* @e_strdup(i8* %67)
  store i8* %call102, i8** @url_pattern, align 8
  br label %if.end195

if.else103:                                       ; preds = %if.else97
  %68 = load i8** %name, align 8
  %call104 = call i32 @strcasecmp(i8* %68, i8* getelementptr inbounds ([16 x i8]* @.str110, i32 0, i32 0)) #8
  %cmp105 = icmp eq i32 %call104, 0
  br i1 %cmp105, label %if.then111, label %lor.lhs.false107

lor.lhs.false107:                                 ; preds = %if.else103
  %69 = load i8** %name, align 8
  %call108 = call i32 @strcasecmp(i8* %69, i8* getelementptr inbounds ([17 x i8]* @.str111, i32 0, i32 0)) #8
  %cmp109 = icmp eq i32 %call108, 0
  br i1 %cmp109, label %if.then111, label %if.else112

if.then111:                                       ; preds = %lor.lhs.false107, %if.else103
  %70 = load i8** %name, align 8
  %71 = load i8** %value, align 8
  call void @no_value_required(i8* %70, i8* %71)
  store i32 1, i32* @no_empty_referrers, align 4
  br label %if.end194

if.else112:                                       ; preds = %lor.lhs.false107
  %72 = load i8** %name, align 8
  %call113 = call i32 @strcasecmp(i8* %72, i8* getelementptr inbounds ([9 x i8]* @.str112, i32 0, i32 0)) #8
  %cmp114 = icmp eq i32 %call113, 0
  br i1 %cmp114, label %if.then116, label %if.else118

if.then116:                                       ; preds = %if.else112
  %73 = load i8** %name, align 8
  %74 = load i8** %value, align 8
  call void @value_required(i8* %73, i8* %74)
  %75 = load i8** %value, align 8
  %call117 = call i8* @e_strdup(i8* %75)
  store i8* %call117, i8** @local_pattern, align 8
  br label %if.end193

if.else118:                                       ; preds = %if.else112
  %76 = load i8** %name, align 8
  %call119 = call i32 @strcasecmp(i8* %76, i8* getelementptr inbounds ([10 x i8]* @.str113, i32 0, i32 0)) #8
  %cmp120 = icmp eq i32 %call119, 0
  br i1 %cmp120, label %if.then122, label %if.else124

if.then122:                                       ; preds = %if.else118
  %77 = load i8** %name, align 8
  %78 = load i8** %value, align 8
  call void @value_required(i8* %77, i8* %78)
  %79 = load i8** %value, align 8
  %call123 = call i8* @e_strdup(i8* %79)
  store i8* %call123, i8** @throttlefile, align 8
  br label %if.end192

if.else124:                                       ; preds = %if.else118
  %80 = load i8** %name, align 8
  %call125 = call i32 @strcasecmp(i8* %80, i8* getelementptr inbounds ([5 x i8]* @.str114, i32 0, i32 0)) #8
  %cmp126 = icmp eq i32 %call125, 0
  br i1 %cmp126, label %if.then128, label %if.else130

if.then128:                                       ; preds = %if.else124
  %81 = load i8** %name, align 8
  %82 = load i8** %value, align 8
  call void @value_required(i8* %81, i8* %82)
  %83 = load i8** %value, align 8
  %call129 = call i8* @e_strdup(i8* %83)
  store i8* %call129, i8** @hostname, align 8
  br label %if.end191

if.else130:                                       ; preds = %if.else124
  %84 = load i8** %name, align 8
  %call131 = call i32 @strcasecmp(i8* %84, i8* getelementptr inbounds ([8 x i8]* @.str115, i32 0, i32 0)) #8
  %cmp132 = icmp eq i32 %call131, 0
  br i1 %cmp132, label %if.then134, label %if.else136

if.then134:                                       ; preds = %if.else130
  %85 = load i8** %name, align 8
  %86 = load i8** %value, align 8
  call void @value_required(i8* %85, i8* %86)
  %87 = load i8** %value, align 8
  %call135 = call i8* @e_strdup(i8* %87)
  store i8* %call135, i8** @logfile, align 8
  br label %if.end190

if.else136:                                       ; preds = %if.else130
  %88 = load i8** %name, align 8
  %call137 = call i32 @strcasecmp(i8* %88, i8* getelementptr inbounds ([6 x i8]* @.str116, i32 0, i32 0)) #8
  %cmp138 = icmp eq i32 %call137, 0
  br i1 %cmp138, label %if.then140, label %if.else141

if.then140:                                       ; preds = %if.else136
  %89 = load i8** %name, align 8
  %90 = load i8** %value, align 8
  call void @no_value_required(i8* %89, i8* %90)
  store i32 1, i32* @do_vhost, align 4
  br label %if.end189

if.else141:                                       ; preds = %if.else136
  %91 = load i8** %name, align 8
  %call142 = call i32 @strcasecmp(i8* %91, i8* getelementptr inbounds ([8 x i8]* @.str117, i32 0, i32 0)) #8
  %cmp143 = icmp eq i32 %call142, 0
  br i1 %cmp143, label %if.then145, label %if.else146

if.then145:                                       ; preds = %if.else141
  %92 = load i8** %name, align 8
  %93 = load i8** %value, align 8
  call void @no_value_required(i8* %92, i8* %93)
  store i32 0, i32* @do_vhost, align 4
  br label %if.end188

if.else146:                                       ; preds = %if.else141
  %94 = load i8** %name, align 8
  %call147 = call i32 @strcasecmp(i8* %94, i8* getelementptr inbounds ([13 x i8]* @.str118, i32 0, i32 0)) #8
  %cmp148 = icmp eq i32 %call147, 0
  br i1 %cmp148, label %if.then150, label %if.else151

if.then150:                                       ; preds = %if.else146
  %95 = load i8** %name, align 8
  %96 = load i8** %value, align 8
  call void @no_value_required(i8* %95, i8* %96)
  store i32 1, i32* @do_global_passwd, align 4
  br label %if.end187

if.else151:                                       ; preds = %if.else146
  %97 = load i8** %name, align 8
  %call152 = call i32 @strcasecmp(i8* %97, i8* getelementptr inbounds ([15 x i8]* @.str119, i32 0, i32 0)) #8
  %cmp153 = icmp eq i32 %call152, 0
  br i1 %cmp153, label %if.then155, label %if.else156

if.then155:                                       ; preds = %if.else151
  %98 = load i8** %name, align 8
  %99 = load i8** %value, align 8
  call void @no_value_required(i8* %98, i8* %99)
  store i32 0, i32* @do_global_passwd, align 4
  br label %if.end186

if.else156:                                       ; preds = %if.else151
  %100 = load i8** %name, align 8
  %call157 = call i32 @strcasecmp(i8* %100, i8* getelementptr inbounds ([8 x i8]* @.str120, i32 0, i32 0)) #8
  %cmp158 = icmp eq i32 %call157, 0
  br i1 %cmp158, label %if.then160, label %if.else162

if.then160:                                       ; preds = %if.else156
  %101 = load i8** %name, align 8
  %102 = load i8** %value, align 8
  call void @value_required(i8* %101, i8* %102)
  %103 = load i8** %value, align 8
  %call161 = call i8* @e_strdup(i8* %103)
  store i8* %call161, i8** @pidfile, align 8
  br label %if.end185

if.else162:                                       ; preds = %if.else156
  %104 = load i8** %name, align 8
  %call163 = call i32 @strcasecmp(i8* %104, i8* getelementptr inbounds ([8 x i8]* @.str121, i32 0, i32 0)) #8
  %cmp164 = icmp eq i32 %call163, 0
  br i1 %cmp164, label %if.then166, label %if.else168

if.then166:                                       ; preds = %if.else162
  %105 = load i8** %name, align 8
  %106 = load i8** %value, align 8
  call void @value_required(i8* %105, i8* %106)
  %107 = load i8** %value, align 8
  %call167 = call i8* @e_strdup(i8* %107)
  store i8* %call167, i8** @charset, align 8
  br label %if.end184

if.else168:                                       ; preds = %if.else162
  %108 = load i8** %name, align 8
  %call169 = call i32 @strcasecmp(i8* %108, i8* getelementptr inbounds ([4 x i8]* @.str122, i32 0, i32 0)) #8
  %cmp170 = icmp eq i32 %call169, 0
  br i1 %cmp170, label %if.then172, label %if.else174

if.then172:                                       ; preds = %if.else168
  %109 = load i8** %name, align 8
  %110 = load i8** %value, align 8
  call void @value_required(i8* %109, i8* %110)
  %111 = load i8** %value, align 8
  %call173 = call i8* @e_strdup(i8* %111)
  store i8* %call173, i8** @p3p, align 8
  br label %if.end183

if.else174:                                       ; preds = %if.else168
  %112 = load i8** %name, align 8
  %call175 = call i32 @strcasecmp(i8* %112, i8* getelementptr inbounds ([8 x i8]* @.str123, i32 0, i32 0)) #8
  %cmp176 = icmp eq i32 %call175, 0
  br i1 %cmp176, label %if.then178, label %if.else180

if.then178:                                       ; preds = %if.else174
  %113 = load i8** %name, align 8
  %114 = load i8** %value, align 8
  call void @value_required(i8* %113, i8* %114)
  %115 = load i8** %value, align 8
  %call179 = call i32 @atoi(i8* %115) #8
  store i32 %call179, i32* @max_age, align 4
  br label %if.end182

if.else180:                                       ; preds = %if.else174
  %116 = load %struct._IO_FILE** @stderr, align 8
  %117 = load i8** @argv0, align 8
  %118 = load i8** %name, align 8
  %call181 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %116, i8* getelementptr inbounds ([32 x i8]* @.str124, i32 0, i32 0), i8* %117, i8* %118)
  call void @exit(i32 1) #9
  unreachable

if.end182:                                        ; preds = %if.then178
  br label %if.end183

if.end183:                                        ; preds = %if.end182, %if.then172
  br label %if.end184

if.end184:                                        ; preds = %if.end183, %if.then166
  br label %if.end185

if.end185:                                        ; preds = %if.end184, %if.then160
  br label %if.end186

if.end186:                                        ; preds = %if.end185, %if.then155
  br label %if.end187

if.end187:                                        ; preds = %if.end186, %if.then150
  br label %if.end188

if.end188:                                        ; preds = %if.end187, %if.then145
  br label %if.end189

if.end189:                                        ; preds = %if.end188, %if.then140
  br label %if.end190

if.end190:                                        ; preds = %if.end189, %if.then134
  br label %if.end191

if.end191:                                        ; preds = %if.end190, %if.then128
  br label %if.end192

if.end192:                                        ; preds = %if.end191, %if.then122
  br label %if.end193

if.end193:                                        ; preds = %if.end192, %if.then116
  br label %if.end194

if.end194:                                        ; preds = %if.end193, %if.then111
  br label %if.end195

if.end195:                                        ; preds = %if.end194, %if.then101
  br label %if.end196

if.end196:                                        ; preds = %if.end195, %if.then95
  br label %if.end197

if.end197:                                        ; preds = %if.end196, %if.then89
  br label %if.end198

if.end198:                                        ; preds = %if.end197, %if.then83
  br label %if.end199

if.end199:                                        ; preds = %if.end198, %if.then78
  br label %if.end200

if.end200:                                        ; preds = %if.end199, %if.then73
  br label %if.end201

if.end201:                                        ; preds = %if.end200, %if.then67
  br label %if.end202

if.end202:                                        ; preds = %if.end201, %if.then62
  br label %if.end203

if.end203:                                        ; preds = %if.end202, %if.then57
  br label %if.end204

if.end204:                                        ; preds = %if.end203, %if.then51
  br label %if.end205

if.end205:                                        ; preds = %if.end204, %if.then44
  br label %if.end206

if.end206:                                        ; preds = %if.end205, %if.then40
  %119 = load i8** %cp2, align 8
  store i8* %119, i8** %cp, align 8
  %120 = load i8** %cp, align 8
  %call207 = call i64 @strspn(i8* %120, i8* getelementptr inbounds ([5 x i8]* @.str98, i32 0, i32 0)) #8
  %121 = load i8** %cp, align 8
  %add.ptr208 = getelementptr inbounds i8* %121, i64 %call207
  store i8* %add.ptr208, i8** %cp, align 8
  br label %while.cond10

while.end209:                                     ; preds = %while.cond10
  br label %while.cond

while.end210:                                     ; preds = %while.cond
  %122 = load %struct._IO_FILE** %fp, align 8
  %call211 = call i32 @fclose(%struct._IO_FILE* %122)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @usage() #0 {
entry:
  %0 = load %struct._IO_FILE** @stderr, align 8
  %1 = load i8** @argv0, align 8
  %call = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([219 x i8]* @.str97, i32 0, i32 0), i8* %1)
  call void @exit(i32 1) #9
  unreachable

return:                                           ; No predecessors!
  ret void
}

; Function Attrs: nounwind uwtable
define internal i8* @e_strdup(i8* %oldstr) #0 {
entry:
  %oldstr.addr = alloca i8*, align 8
  %newstr = alloca i8*, align 8
  store i8* %oldstr, i8** %oldstr.addr, align 8
  %0 = load i8** %oldstr.addr, align 8
  %call = call noalias i8* @strdup(i8* %0) #5
  store i8* %call, i8** %newstr, align 8
  %1 = load i8** %newstr, align 8
  %cmp = icmp eq i8* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([31 x i8]* @.str64, i32 0, i32 0))
  %2 = load %struct._IO_FILE** @stderr, align 8
  %3 = load i8** @argv0, align 8
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([36 x i8]* @.str65, i32 0, i32 0), i8* %3)
  call void @exit(i32 1) #9
  unreachable

if.end:                                           ; preds = %entry
  %4 = load i8** %newstr, align 8
  ret i8* %4
}

; Function Attrs: nounwind uwtable
define internal void @logstats(%struct.timeval* %nowP) #0 {
entry:
  %nowP.addr = alloca %struct.timeval*, align 8
  %tv = alloca %struct.timeval, align 8
  %now = alloca i64, align 8
  %up_secs = alloca i64, align 8
  %stats_secs = alloca i64, align 8
  store %struct.timeval* %nowP, %struct.timeval** %nowP.addr, align 8
  %0 = load %struct.timeval** %nowP.addr, align 8
  %cmp = icmp eq %struct.timeval* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 @gettimeofday(%struct.timeval* %tv, %struct.timezone* null) #5
  store %struct.timeval* %tv, %struct.timeval** %nowP.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.timeval** %nowP.addr, align 8
  %tv_sec = getelementptr inbounds %struct.timeval* %1, i32 0, i32 0
  %2 = load i64* %tv_sec, align 8
  store i64 %2, i64* %now, align 8
  %3 = load i64* %now, align 8
  %4 = load i64* @start_time, align 8
  %sub = sub nsw i64 %3, %4
  store i64 %sub, i64* %up_secs, align 8
  %5 = load i64* %now, align 8
  %6 = load i64* @stats_time, align 8
  %sub1 = sub nsw i64 %5, %6
  store i64 %sub1, i64* %stats_secs, align 8
  %7 = load i64* %stats_secs, align 8
  %cmp2 = icmp eq i64 %7, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i64 1, i64* %stats_secs, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %if.end
  %8 = load i64* %now, align 8
  store i64 %8, i64* @stats_time, align 8
  %9 = load i64* %up_secs, align 8
  %10 = load i64* %stats_secs, align 8
  call void (i32, i8*, ...)* @syslog(i32 5, i8* getelementptr inbounds ([39 x i8]* @.str39, i32 0, i32 0), i64 %9, i64 %10)
  %11 = load i64* %stats_secs, align 8
  call void @thttpd_logstats(i64 %11)
  %12 = load i64* %stats_secs, align 8
  call void @httpd_logstats(i64 %12)
  %13 = load i64* %stats_secs, align 8
  call void @mmc_logstats(i64 %13)
  %14 = load i64* %stats_secs, align 8
  call void @fdwatch_logstats(i64 %14)
  %15 = load i64* %stats_secs, align 8
  call void @tmr_logstats(i64 %15)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @finish_connection(%struct.connecttab* %c, %struct.timeval* %tvP) #0 {
entry:
  %c.addr = alloca %struct.connecttab*, align 8
  %tvP.addr = alloca %struct.timeval*, align 8
  store %struct.connecttab* %c, %struct.connecttab** %c.addr, align 8
  store %struct.timeval* %tvP, %struct.timeval** %tvP.addr, align 8
  %0 = load %struct.connecttab** %c.addr, align 8
  %hc = getelementptr inbounds %struct.connecttab* %0, i32 0, i32 2
  %1 = load %struct.httpd_conn** %hc, align 8
  call void @httpd_write_response(%struct.httpd_conn* %1)
  %2 = load %struct.connecttab** %c.addr, align 8
  %3 = load %struct.timeval** %tvP.addr, align 8
  call void @clear_connection(%struct.connecttab* %2, %struct.timeval* %3)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @linger_clear_connection(i8* %client_data.coerce, %struct.timeval* %nowP) #0 {
entry:
  %client_data = alloca %union.ClientData, align 8
  %nowP.addr = alloca %struct.timeval*, align 8
  %c = alloca %struct.connecttab*, align 8
  %coerce.dive = getelementptr %union.ClientData* %client_data, i32 0, i32 0
  store i8* %client_data.coerce, i8** %coerce.dive
  store %struct.timeval* %nowP, %struct.timeval** %nowP.addr, align 8
  %p = bitcast %union.ClientData* %client_data to i8**
  %0 = load i8** %p, align 8
  %1 = bitcast i8* %0 to %struct.connecttab*
  store %struct.connecttab* %1, %struct.connecttab** %c, align 8
  %2 = load %struct.connecttab** %c, align 8
  %linger_timer = getelementptr inbounds %struct.connecttab* %2, i32 0, i32 10
  store %struct.TimerStruct* null, %struct.TimerStruct** %linger_timer, align 8
  %3 = load %struct.connecttab** %c, align 8
  %4 = load %struct.timeval** %nowP.addr, align 8
  call void @really_clear_connection(%struct.connecttab* %3, %struct.timeval* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @really_clear_connection(%struct.connecttab* %c, %struct.timeval* %tvP) #0 {
entry:
  %c.addr = alloca %struct.connecttab*, align 8
  %tvP.addr = alloca %struct.timeval*, align 8
  store %struct.connecttab* %c, %struct.connecttab** %c.addr, align 8
  store %struct.timeval* %tvP, %struct.timeval** %tvP.addr, align 8
  %0 = load %struct.connecttab** %c.addr, align 8
  %hc = getelementptr inbounds %struct.connecttab* %0, i32 0, i32 2
  %1 = load %struct.httpd_conn** %hc, align 8
  %bytes_sent = getelementptr inbounds %struct.httpd_conn* %1, i32 0, i32 11
  %2 = load i64* %bytes_sent, align 8
  %3 = load i64* @stats_bytes, align 8
  %add = add nsw i64 %3, %2
  store i64 %add, i64* @stats_bytes, align 8
  %4 = load %struct.connecttab** %c.addr, align 8
  %conn_state = getelementptr inbounds %struct.connecttab* %4, i32 0, i32 0
  %5 = load i32* %conn_state, align 4
  %cmp = icmp ne i32 %5, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.connecttab** %c.addr, align 8
  %hc1 = getelementptr inbounds %struct.connecttab* %6, i32 0, i32 2
  %7 = load %struct.httpd_conn** %hc1, align 8
  %conn_fd = getelementptr inbounds %struct.httpd_conn* %7, i32 0, i32 60
  %8 = load i32* %conn_fd, align 4
  call void @fdwatch_del_fd(i32 %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %9 = load %struct.connecttab** %c.addr, align 8
  %hc2 = getelementptr inbounds %struct.connecttab* %9, i32 0, i32 2
  %10 = load %struct.httpd_conn** %hc2, align 8
  %11 = load %struct.timeval** %tvP.addr, align 8
  call void @httpd_close_conn(%struct.httpd_conn* %10, %struct.timeval* %11)
  %12 = load %struct.connecttab** %c.addr, align 8
  %13 = load %struct.timeval** %tvP.addr, align 8
  call void @clear_throttles(%struct.connecttab* %12, %struct.timeval* %13)
  %14 = load %struct.connecttab** %c.addr, align 8
  %linger_timer = getelementptr inbounds %struct.connecttab* %14, i32 0, i32 10
  %15 = load %struct.TimerStruct** %linger_timer, align 8
  %cmp3 = icmp ne %struct.TimerStruct* %15, null
  br i1 %cmp3, label %if.then4, label %if.end7

if.then4:                                         ; preds = %if.end
  %16 = load %struct.connecttab** %c.addr, align 8
  %linger_timer5 = getelementptr inbounds %struct.connecttab* %16, i32 0, i32 10
  %17 = load %struct.TimerStruct** %linger_timer5, align 8
  call void @tmr_cancel(%struct.TimerStruct* %17)
  %18 = load %struct.connecttab** %c.addr, align 8
  %linger_timer6 = getelementptr inbounds %struct.connecttab* %18, i32 0, i32 10
  store %struct.TimerStruct* null, %struct.TimerStruct** %linger_timer6, align 8
  br label %if.end7

if.end7:                                          ; preds = %if.then4, %if.end
  %19 = load %struct.connecttab** %c.addr, align 8
  %conn_state8 = getelementptr inbounds %struct.connecttab* %19, i32 0, i32 0
  store i32 0, i32* %conn_state8, align 4
  %20 = load i32* @first_free_connect, align 4
  %21 = load %struct.connecttab** %c.addr, align 8
  %next_free_connect = getelementptr inbounds %struct.connecttab* %21, i32 0, i32 1
  store i32 %20, i32* %next_free_connect, align 4
  %22 = load %struct.connecttab** %c.addr, align 8
  %23 = load %struct.connecttab** @connects, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.connecttab* %22 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.connecttab* %23 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 144
  %conv = trunc i64 %sub.ptr.div to i32
  store i32 %conv, i32* @first_free_connect, align 4
  %24 = load i32* @num_connects, align 4
  %dec = add nsw i32 %24, -1
  store i32 %dec, i32* @num_connects, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @check_throttles(%struct.connecttab* %c) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.connecttab*, align 8
  %tnum = alloca i32, align 4
  %l = alloca i64, align 8
  store %struct.connecttab* %c, %struct.connecttab** %c.addr, align 8
  %0 = load %struct.connecttab** %c.addr, align 8
  %numtnums = getelementptr inbounds %struct.connecttab* %0, i32 0, i32 4
  store i32 0, i32* %numtnums, align 4
  %1 = load %struct.connecttab** %c.addr, align 8
  %min_limit = getelementptr inbounds %struct.connecttab* %1, i32 0, i32 6
  store i64 -1, i64* %min_limit, align 8
  %2 = load %struct.connecttab** %c.addr, align 8
  %max_limit = getelementptr inbounds %struct.connecttab* %2, i32 0, i32 5
  store i64 -1, i64* %max_limit, align 8
  store i32 0, i32* %tnum, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32* %tnum, align 4
  %4 = load i32* @numthrottles, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %5 = load %struct.connecttab** %c.addr, align 8
  %numtnums1 = getelementptr inbounds %struct.connecttab* %5, i32 0, i32 4
  %6 = load i32* %numtnums1, align 4
  %cmp2 = icmp slt i32 %6, 10
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %cmp2, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load i32* %tnum, align 4
  %idxprom = sext i32 %8 to i64
  %9 = load %struct.throttletab** @throttles, align 8
  %arrayidx = getelementptr inbounds %struct.throttletab* %9, i64 %idxprom
  %pattern = getelementptr inbounds %struct.throttletab* %arrayidx, i32 0, i32 0
  %10 = load i8** %pattern, align 8
  %11 = load %struct.connecttab** %c.addr, align 8
  %hc = getelementptr inbounds %struct.connecttab* %11, i32 0, i32 2
  %12 = load %struct.httpd_conn** %hc, align 8
  %expnfilename = getelementptr inbounds %struct.httpd_conn* %12, i32 0, i32 16
  %13 = load i8** %expnfilename, align 8
  %call = call i32 @match(i8* %10, i8* %13)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end70

if.then:                                          ; preds = %for.body
  %14 = load i32* %tnum, align 4
  %idxprom3 = sext i32 %14 to i64
  %15 = load %struct.throttletab** @throttles, align 8
  %arrayidx4 = getelementptr inbounds %struct.throttletab* %15, i64 %idxprom3
  %rate = getelementptr inbounds %struct.throttletab* %arrayidx4, i32 0, i32 3
  %16 = load i64* %rate, align 8
  %17 = load i32* %tnum, align 4
  %idxprom5 = sext i32 %17 to i64
  %18 = load %struct.throttletab** @throttles, align 8
  %arrayidx6 = getelementptr inbounds %struct.throttletab* %18, i64 %idxprom5
  %max_limit7 = getelementptr inbounds %struct.throttletab* %arrayidx6, i32 0, i32 1
  %19 = load i64* %max_limit7, align 8
  %mul = mul nsw i64 %19, 2
  %cmp8 = icmp sgt i64 %16, %mul
  br i1 %cmp8, label %if.then9, label %if.end

if.then9:                                         ; preds = %if.then
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %20 = load i32* %tnum, align 4
  %idxprom10 = sext i32 %20 to i64
  %21 = load %struct.throttletab** @throttles, align 8
  %arrayidx11 = getelementptr inbounds %struct.throttletab* %21, i64 %idxprom10
  %rate12 = getelementptr inbounds %struct.throttletab* %arrayidx11, i32 0, i32 3
  %22 = load i64* %rate12, align 8
  %23 = load i32* %tnum, align 4
  %idxprom13 = sext i32 %23 to i64
  %24 = load %struct.throttletab** @throttles, align 8
  %arrayidx14 = getelementptr inbounds %struct.throttletab* %24, i64 %idxprom13
  %min_limit15 = getelementptr inbounds %struct.throttletab* %arrayidx14, i32 0, i32 2
  %25 = load i64* %min_limit15, align 8
  %cmp16 = icmp slt i64 %22, %25
  br i1 %cmp16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end18:                                         ; preds = %if.end
  %26 = load i32* %tnum, align 4
  %idxprom19 = sext i32 %26 to i64
  %27 = load %struct.throttletab** @throttles, align 8
  %arrayidx20 = getelementptr inbounds %struct.throttletab* %27, i64 %idxprom19
  %num_sending = getelementptr inbounds %struct.throttletab* %arrayidx20, i32 0, i32 5
  %28 = load i32* %num_sending, align 4
  %cmp21 = icmp slt i32 %28, 0
  br i1 %cmp21, label %if.then22, label %if.end26

if.then22:                                        ; preds = %if.end18
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([56 x i8]* @.str52, i32 0, i32 0))
  %29 = load i32* %tnum, align 4
  %idxprom23 = sext i32 %29 to i64
  %30 = load %struct.throttletab** @throttles, align 8
  %arrayidx24 = getelementptr inbounds %struct.throttletab* %30, i64 %idxprom23
  %num_sending25 = getelementptr inbounds %struct.throttletab* %arrayidx24, i32 0, i32 5
  store i32 0, i32* %num_sending25, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.then22, %if.end18
  %31 = load i32* %tnum, align 4
  %32 = load %struct.connecttab** %c.addr, align 8
  %numtnums27 = getelementptr inbounds %struct.connecttab* %32, i32 0, i32 4
  %33 = load i32* %numtnums27, align 4
  %inc = add nsw i32 %33, 1
  store i32 %inc, i32* %numtnums27, align 4
  %idxprom28 = sext i32 %33 to i64
  %34 = load %struct.connecttab** %c.addr, align 8
  %tnums = getelementptr inbounds %struct.connecttab* %34, i32 0, i32 3
  %arrayidx29 = getelementptr inbounds [10 x i32]* %tnums, i32 0, i64 %idxprom28
  store i32 %31, i32* %arrayidx29, align 4
  %35 = load i32* %tnum, align 4
  %idxprom30 = sext i32 %35 to i64
  %36 = load %struct.throttletab** @throttles, align 8
  %arrayidx31 = getelementptr inbounds %struct.throttletab* %36, i64 %idxprom30
  %num_sending32 = getelementptr inbounds %struct.throttletab* %arrayidx31, i32 0, i32 5
  %37 = load i32* %num_sending32, align 4
  %inc33 = add nsw i32 %37, 1
  store i32 %inc33, i32* %num_sending32, align 4
  %38 = load i32* %tnum, align 4
  %idxprom34 = sext i32 %38 to i64
  %39 = load %struct.throttletab** @throttles, align 8
  %arrayidx35 = getelementptr inbounds %struct.throttletab* %39, i64 %idxprom34
  %max_limit36 = getelementptr inbounds %struct.throttletab* %arrayidx35, i32 0, i32 1
  %40 = load i64* %max_limit36, align 8
  %41 = load i32* %tnum, align 4
  %idxprom37 = sext i32 %41 to i64
  %42 = load %struct.throttletab** @throttles, align 8
  %arrayidx38 = getelementptr inbounds %struct.throttletab* %42, i64 %idxprom37
  %num_sending39 = getelementptr inbounds %struct.throttletab* %arrayidx38, i32 0, i32 5
  %43 = load i32* %num_sending39, align 4
  %conv = sext i32 %43 to i64
  %div = sdiv i64 %40, %conv
  store i64 %div, i64* %l, align 8
  %44 = load %struct.connecttab** %c.addr, align 8
  %max_limit40 = getelementptr inbounds %struct.connecttab* %44, i32 0, i32 5
  %45 = load i64* %max_limit40, align 8
  %cmp41 = icmp eq i64 %45, -1
  br i1 %cmp41, label %if.then43, label %if.else

if.then43:                                        ; preds = %if.end26
  %46 = load i64* %l, align 8
  %47 = load %struct.connecttab** %c.addr, align 8
  %max_limit44 = getelementptr inbounds %struct.connecttab* %47, i32 0, i32 5
  store i64 %46, i64* %max_limit44, align 8
  br label %if.end50

if.else:                                          ; preds = %if.end26
  %48 = load %struct.connecttab** %c.addr, align 8
  %max_limit45 = getelementptr inbounds %struct.connecttab* %48, i32 0, i32 5
  %49 = load i64* %max_limit45, align 8
  %50 = load i64* %l, align 8
  %cmp46 = icmp slt i64 %49, %50
  br i1 %cmp46, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %51 = load %struct.connecttab** %c.addr, align 8
  %max_limit48 = getelementptr inbounds %struct.connecttab* %51, i32 0, i32 5
  %52 = load i64* %max_limit48, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %53 = load i64* %l, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %52, %cond.true ], [ %53, %cond.false ]
  %54 = load %struct.connecttab** %c.addr, align 8
  %max_limit49 = getelementptr inbounds %struct.connecttab* %54, i32 0, i32 5
  store i64 %cond, i64* %max_limit49, align 8
  br label %if.end50

if.end50:                                         ; preds = %cond.end, %if.then43
  %55 = load i32* %tnum, align 4
  %idxprom51 = sext i32 %55 to i64
  %56 = load %struct.throttletab** @throttles, align 8
  %arrayidx52 = getelementptr inbounds %struct.throttletab* %56, i64 %idxprom51
  %min_limit53 = getelementptr inbounds %struct.throttletab* %arrayidx52, i32 0, i32 2
  %57 = load i64* %min_limit53, align 8
  store i64 %57, i64* %l, align 8
  %58 = load %struct.connecttab** %c.addr, align 8
  %min_limit54 = getelementptr inbounds %struct.connecttab* %58, i32 0, i32 6
  %59 = load i64* %min_limit54, align 8
  %cmp55 = icmp eq i64 %59, -1
  br i1 %cmp55, label %if.then57, label %if.else59

if.then57:                                        ; preds = %if.end50
  %60 = load i64* %l, align 8
  %61 = load %struct.connecttab** %c.addr, align 8
  %min_limit58 = getelementptr inbounds %struct.connecttab* %61, i32 0, i32 6
  store i64 %60, i64* %min_limit58, align 8
  br label %if.end69

if.else59:                                        ; preds = %if.end50
  %62 = load %struct.connecttab** %c.addr, align 8
  %min_limit60 = getelementptr inbounds %struct.connecttab* %62, i32 0, i32 6
  %63 = load i64* %min_limit60, align 8
  %64 = load i64* %l, align 8
  %cmp61 = icmp sgt i64 %63, %64
  br i1 %cmp61, label %cond.true63, label %cond.false65

cond.true63:                                      ; preds = %if.else59
  %65 = load %struct.connecttab** %c.addr, align 8
  %min_limit64 = getelementptr inbounds %struct.connecttab* %65, i32 0, i32 6
  %66 = load i64* %min_limit64, align 8
  br label %cond.end66

cond.false65:                                     ; preds = %if.else59
  %67 = load i64* %l, align 8
  br label %cond.end66

cond.end66:                                       ; preds = %cond.false65, %cond.true63
  %cond67 = phi i64 [ %66, %cond.true63 ], [ %67, %cond.false65 ]
  %68 = load %struct.connecttab** %c.addr, align 8
  %min_limit68 = getelementptr inbounds %struct.connecttab* %68, i32 0, i32 6
  store i64 %cond67, i64* %min_limit68, align 8
  br label %if.end69

if.end69:                                         ; preds = %cond.end66, %if.then57
  br label %if.end70

if.end70:                                         ; preds = %if.end69, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end70
  %69 = load i32* %tnum, align 4
  %inc71 = add nsw i32 %69, 1
  store i32 %inc71, i32* %tnum, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then17, %if.then9
  %70 = load i32* %retval
  ret i32 %70
}

; Function Attrs: nounwind uwtable
define internal void @wakeup_connection(i8* %client_data.coerce, %struct.timeval* %nowP) #0 {
entry:
  %client_data = alloca %union.ClientData, align 8
  %nowP.addr = alloca %struct.timeval*, align 8
  %c = alloca %struct.connecttab*, align 8
  %coerce.dive = getelementptr %union.ClientData* %client_data, i32 0, i32 0
  store i8* %client_data.coerce, i8** %coerce.dive
  store %struct.timeval* %nowP, %struct.timeval** %nowP.addr, align 8
  %p = bitcast %union.ClientData* %client_data to i8**
  %0 = load i8** %p, align 8
  %1 = bitcast i8* %0 to %struct.connecttab*
  store %struct.connecttab* %1, %struct.connecttab** %c, align 8
  %2 = load %struct.connecttab** %c, align 8
  %wakeup_timer = getelementptr inbounds %struct.connecttab* %2, i32 0, i32 9
  store %struct.TimerStruct* null, %struct.TimerStruct** %wakeup_timer, align 8
  %3 = load %struct.connecttab** %c, align 8
  %conn_state = getelementptr inbounds %struct.connecttab* %3, i32 0, i32 0
  %4 = load i32* %conn_state, align 4
  %cmp = icmp eq i32 %4, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.connecttab** %c, align 8
  %conn_state1 = getelementptr inbounds %struct.connecttab* %5, i32 0, i32 0
  store i32 2, i32* %conn_state1, align 4
  %6 = load %struct.connecttab** %c, align 8
  %hc = getelementptr inbounds %struct.connecttab* %6, i32 0, i32 2
  %7 = load %struct.httpd_conn** %hc, align 8
  %conn_fd = getelementptr inbounds %struct.httpd_conn* %7, i32 0, i32 60
  %8 = load i32* %conn_fd, align 4
  %9 = load %struct.connecttab** %c, align 8
  %10 = bitcast %struct.connecttab* %9 to i8*
  call void @fdwatch_add_fd(i32 %8, i8* %10, i32 1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @no_value_required(i8* %name, i8* %value) #0 {
entry:
  %name.addr = alloca i8*, align 8
  %value.addr = alloca i8*, align 8
  store i8* %name, i8** %name.addr, align 8
  store i8* %value, i8** %value.addr, align 8
  %0 = load i8** %value.addr, align 8
  %cmp = icmp ne i8* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE** @stderr, align 8
  %2 = load i8** @argv0, align 8
  %3 = load i8** %name.addr, align 8
  %call = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([37 x i8]* @.str126, i32 0, i32 0), i8* %2, i8* %3)
  call void @exit(i32 1) #9
  unreachable

if.end:                                           ; preds = %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @value_required(i8* %name, i8* %value) #0 {
entry:
  %name.addr = alloca i8*, align 8
  %value.addr = alloca i8*, align 8
  store i8* %name, i8** %name.addr, align 8
  store i8* %value, i8** %value.addr, align 8
  %0 = load i8** %value.addr, align 8
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE** @stderr, align 8
  %2 = load i8** @argv0, align 8
  %3 = load i8** %name.addr, align 8
  %call = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([34 x i8]* @.str125, i32 0, i32 0), i8* %2, i8* %3)
  call void @exit(i32 1) #9
  unreachable

if.end:                                           ; preds = %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @thttpd_logstats(i64 %secs) #0 {
entry:
  %secs.addr = alloca i64, align 8
  store i64 %secs, i64* %secs.addr, align 8
  %0 = load i64* %secs.addr, align 8
  %cmp = icmp sgt i64 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64* @stats_connections, align 8
  %2 = load i64* @stats_connections, align 8
  %conv = sitofp i64 %2 to float
  %3 = load i64* %secs.addr, align 8
  %conv1 = sitofp i64 %3 to float
  %div = fdiv float %conv, %conv1
  %conv2 = fpext float %div to double
  %4 = load i32* @stats_simultaneous, align 4
  %5 = load i64* @stats_bytes, align 8
  %6 = load i64* @stats_bytes, align 8
  %conv3 = sitofp i64 %6 to float
  %7 = load i64* %secs.addr, align 8
  %conv4 = sitofp i64 %7 to float
  %div5 = fdiv float %conv3, %conv4
  %conv6 = fpext float %div5 to double
  %8 = load i32* @httpd_conn_count, align 4
  call void (i32, i8*, ...)* @syslog(i32 5, i8* getelementptr inbounds ([104 x i8]* @.str40, i32 0, i32 0), i64 %1, double %conv2, i32 %4, i64 %5, double %conv6, i32 %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i64 0, i64* @stats_connections, align 8
  store i64 0, i64* @stats_bytes, align 8
  store i32 0, i32* @stats_simultaneous, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @clear_throttles(%struct.connecttab* %c, %struct.timeval* %tvP) #0 {
entry:
  %c.addr = alloca %struct.connecttab*, align 8
  %tvP.addr = alloca %struct.timeval*, align 8
  %tind = alloca i32, align 4
  store %struct.connecttab* %c, %struct.connecttab** %c.addr, align 8
  store %struct.timeval* %tvP, %struct.timeval** %tvP.addr, align 8
  store i32 0, i32* %tind, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %tind, align 4
  %1 = load %struct.connecttab** %c.addr, align 8
  %numtnums = getelementptr inbounds %struct.connecttab* %1, i32 0, i32 4
  %2 = load i32* %numtnums, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32* %tind, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load %struct.connecttab** %c.addr, align 8
  %tnums = getelementptr inbounds %struct.connecttab* %4, i32 0, i32 3
  %arrayidx = getelementptr inbounds [10 x i32]* %tnums, i32 0, i64 %idxprom
  %5 = load i32* %arrayidx, align 4
  %idxprom1 = sext i32 %5 to i64
  %6 = load %struct.throttletab** @throttles, align 8
  %arrayidx2 = getelementptr inbounds %struct.throttletab* %6, i64 %idxprom1
  %num_sending = getelementptr inbounds %struct.throttletab* %arrayidx2, i32 0, i32 5
  %7 = load i32* %num_sending, align 4
  %dec = add nsw i32 %7, -1
  store i32 %dec, i32* %num_sending, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32* %tind, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %tind, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.httpd_server* @httpd_initialize(i8* %hostname, %union.httpd_sockaddr* %sa4P, %union.httpd_sockaddr* %sa6P, i16 zeroext %port, i8* %cgi_pattern, i32 %cgi_limit, i8* %charset, i8* %p3p, i32 %max_age, i8* %cwd, i32 %no_log, %struct._IO_FILE* %logfp, i32 %no_symlink_check, i32 %vhost, i32 %global_passwd, i8* %url_pattern, i8* %local_pattern, i32 %no_empty_referrers) #0 {
entry:
  %retval = alloca %struct.httpd_server*, align 8
  %hostname.addr = alloca i8*, align 8
  %sa4P.addr = alloca %union.httpd_sockaddr*, align 8
  %sa6P.addr = alloca %union.httpd_sockaddr*, align 8
  %port.addr = alloca i16, align 2
  %cgi_pattern.addr = alloca i8*, align 8
  %cgi_limit.addr = alloca i32, align 4
  %charset.addr = alloca i8*, align 8
  %p3p.addr = alloca i8*, align 8
  %max_age.addr = alloca i32, align 4
  %cwd.addr = alloca i8*, align 8
  %no_log.addr = alloca i32, align 4
  %logfp.addr = alloca %struct._IO_FILE*, align 8
  %no_symlink_check.addr = alloca i32, align 4
  %vhost.addr = alloca i32, align 4
  %global_passwd.addr = alloca i32, align 4
  %url_pattern.addr = alloca i8*, align 8
  %local_pattern.addr = alloca i8*, align 8
  %no_empty_referrers.addr = alloca i32, align 4
  %hs = alloca %struct.httpd_server*, align 8
  %cp = alloca i8*, align 8
  store i8* %hostname, i8** %hostname.addr, align 8
  store %union.httpd_sockaddr* %sa4P, %union.httpd_sockaddr** %sa4P.addr, align 8
  store %union.httpd_sockaddr* %sa6P, %union.httpd_sockaddr** %sa6P.addr, align 8
  store i16 %port, i16* %port.addr, align 2
  store i8* %cgi_pattern, i8** %cgi_pattern.addr, align 8
  store i32 %cgi_limit, i32* %cgi_limit.addr, align 4
  store i8* %charset, i8** %charset.addr, align 8
  store i8* %p3p, i8** %p3p.addr, align 8
  store i32 %max_age, i32* %max_age.addr, align 4
  store i8* %cwd, i8** %cwd.addr, align 8
  store i32 %no_log, i32* %no_log.addr, align 4
  store %struct._IO_FILE* %logfp, %struct._IO_FILE** %logfp.addr, align 8
  store i32 %no_symlink_check, i32* %no_symlink_check.addr, align 4
  store i32 %vhost, i32* %vhost.addr, align 4
  store i32 %global_passwd, i32* %global_passwd.addr, align 4
  store i8* %url_pattern, i8** %url_pattern.addr, align 8
  store i8* %local_pattern, i8** %local_pattern.addr, align 8
  store i32 %no_empty_referrers, i32* %no_empty_referrers.addr, align 4
  call void @check_options()
  %call = call noalias i8* @malloc(i64 136) #5
  %0 = bitcast i8* %call to %struct.httpd_server*
  store %struct.httpd_server* %0, %struct.httpd_server** %hs, align 8
  %1 = load %struct.httpd_server** %hs, align 8
  %cmp = icmp eq %struct.httpd_server* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([41 x i8]* @.str132, i32 0, i32 0))
  store %struct.httpd_server* null, %struct.httpd_server** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8** %hostname.addr, align 8
  %cmp1 = icmp ne i8* %2, null
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %3 = load i8** %hostname.addr, align 8
  %call3 = call noalias i8* @strdup(i8* %3) #5
  %4 = load %struct.httpd_server** %hs, align 8
  %binding_hostname = getelementptr inbounds %struct.httpd_server* %4, i32 0, i32 0
  store i8* %call3, i8** %binding_hostname, align 8
  %5 = load %struct.httpd_server** %hs, align 8
  %binding_hostname4 = getelementptr inbounds %struct.httpd_server* %5, i32 0, i32 0
  %6 = load i8** %binding_hostname4, align 8
  %cmp5 = icmp eq i8* %6, null
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.then2
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([31 x i8]* @.str1133, i32 0, i32 0))
  store %struct.httpd_server* null, %struct.httpd_server** %retval
  br label %return

if.end7:                                          ; preds = %if.then2
  %7 = load %struct.httpd_server** %hs, align 8
  %binding_hostname8 = getelementptr inbounds %struct.httpd_server* %7, i32 0, i32 0
  %8 = load i8** %binding_hostname8, align 8
  %9 = load %struct.httpd_server** %hs, align 8
  %server_hostname = getelementptr inbounds %struct.httpd_server* %9, i32 0, i32 1
  store i8* %8, i8** %server_hostname, align 8
  br label %if.end24

if.else:                                          ; preds = %if.end
  %10 = load %struct.httpd_server** %hs, align 8
  %binding_hostname9 = getelementptr inbounds %struct.httpd_server* %10, i32 0, i32 0
  store i8* null, i8** %binding_hostname9, align 8
  %11 = load %struct.httpd_server** %hs, align 8
  %server_hostname10 = getelementptr inbounds %struct.httpd_server* %11, i32 0, i32 1
  store i8* null, i8** %server_hostname10, align 8
  %call11 = call i32 @gethostname(i8* getelementptr inbounds ([256 x i8]* @httpd_initialize.ghnbuf, i32 0, i32 0), i64 256) #5
  %cmp12 = icmp slt i32 %call11, 0
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.else
  store i8 0, i8* getelementptr inbounds ([256 x i8]* @httpd_initialize.ghnbuf, i32 0, i64 0), align 1
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.else
  %12 = load %struct.httpd_server** %hs, align 8
  %server_hostname15 = getelementptr inbounds %struct.httpd_server* %12, i32 0, i32 1
  %13 = load i8** %server_hostname15, align 8
  %cmp16 = icmp eq i8* %13, null
  br i1 %cmp16, label %if.then17, label %if.end23

if.then17:                                        ; preds = %if.end14
  %14 = load i8* getelementptr inbounds ([256 x i8]* @httpd_initialize.ghnbuf, i32 0, i64 0), align 1
  %conv = sext i8 %14 to i32
  %cmp18 = icmp ne i32 %conv, 0
  br i1 %cmp18, label %if.then20, label %if.end22

if.then20:                                        ; preds = %if.then17
  %15 = load %struct.httpd_server** %hs, align 8
  %server_hostname21 = getelementptr inbounds %struct.httpd_server* %15, i32 0, i32 1
  store i8* getelementptr inbounds ([256 x i8]* @httpd_initialize.ghnbuf, i32 0, i32 0), i8** %server_hostname21, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.then20, %if.then17
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %if.end14
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %if.end7
  %16 = load i16* %port.addr, align 2
  %17 = load %struct.httpd_server** %hs, align 8
  %port25 = getelementptr inbounds %struct.httpd_server* %17, i32 0, i32 2
  store i16 %16, i16* %port25, align 2
  %18 = load i8** %cgi_pattern.addr, align 8
  %cmp26 = icmp eq i8* %18, null
  br i1 %cmp26, label %if.then28, label %if.else30

if.then28:                                        ; preds = %if.end24
  %19 = load %struct.httpd_server** %hs, align 8
  %cgi_pattern29 = getelementptr inbounds %struct.httpd_server* %19, i32 0, i32 3
  store i8* null, i8** %cgi_pattern29, align 8
  br label %if.end50

if.else30:                                        ; preds = %if.end24
  %20 = load i8** %cgi_pattern.addr, align 8
  %arrayidx = getelementptr inbounds i8* %20, i64 0
  %21 = load i8* %arrayidx, align 1
  %conv31 = sext i8 %21 to i32
  %cmp32 = icmp eq i32 %conv31, 47
  br i1 %cmp32, label %if.then34, label %if.end35

if.then34:                                        ; preds = %if.else30
  %22 = load i8** %cgi_pattern.addr, align 8
  %incdec.ptr = getelementptr inbounds i8* %22, i32 1
  store i8* %incdec.ptr, i8** %cgi_pattern.addr, align 8
  br label %if.end35

if.end35:                                         ; preds = %if.then34, %if.else30
  %23 = load i8** %cgi_pattern.addr, align 8
  %call36 = call noalias i8* @strdup(i8* %23) #5
  %24 = load %struct.httpd_server** %hs, align 8
  %cgi_pattern37 = getelementptr inbounds %struct.httpd_server* %24, i32 0, i32 3
  store i8* %call36, i8** %cgi_pattern37, align 8
  %25 = load %struct.httpd_server** %hs, align 8
  %cgi_pattern38 = getelementptr inbounds %struct.httpd_server* %25, i32 0, i32 3
  %26 = load i8** %cgi_pattern38, align 8
  %cmp39 = icmp eq i8* %26, null
  br i1 %cmp39, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.end35
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([34 x i8]* @.str2134, i32 0, i32 0))
  store %struct.httpd_server* null, %struct.httpd_server** %retval
  br label %return

if.end42:                                         ; preds = %if.end35
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end42
  %27 = load %struct.httpd_server** %hs, align 8
  %cgi_pattern43 = getelementptr inbounds %struct.httpd_server* %27, i32 0, i32 3
  %28 = load i8** %cgi_pattern43, align 8
  %call44 = call i8* @strstr(i8* %28, i8* getelementptr inbounds ([3 x i8]* @.str3135, i32 0, i32 0)) #8
  store i8* %call44, i8** %cp, align 8
  %cmp45 = icmp ne i8* %call44, null
  br i1 %cmp45, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %29 = load i8** %cp, align 8
  %add.ptr = getelementptr inbounds i8* %29, i64 1
  %30 = load i8** %cp, align 8
  %add.ptr47 = getelementptr inbounds i8* %30, i64 2
  %31 = load i8** %cp, align 8
  %add.ptr48 = getelementptr inbounds i8* %31, i64 2
  %call49 = call i64 @strlen(i8* %add.ptr48) #8
  %add = add i64 %call49, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %add.ptr, i8* %add.ptr47, i64 %add, i32 1, i1 false)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end50

if.end50:                                         ; preds = %while.end, %if.then28
  %32 = load i32* %cgi_limit.addr, align 4
  %33 = load %struct.httpd_server** %hs, align 8
  %cgi_limit51 = getelementptr inbounds %struct.httpd_server* %33, i32 0, i32 4
  store i32 %32, i32* %cgi_limit51, align 4
  %34 = load %struct.httpd_server** %hs, align 8
  %cgi_count = getelementptr inbounds %struct.httpd_server* %34, i32 0, i32 5
  store i32 0, i32* %cgi_count, align 4
  %35 = load i8** %charset.addr, align 8
  %call52 = call noalias i8* @strdup(i8* %35) #5
  %36 = load %struct.httpd_server** %hs, align 8
  %charset53 = getelementptr inbounds %struct.httpd_server* %36, i32 0, i32 6
  store i8* %call52, i8** %charset53, align 8
  %37 = load i8** %p3p.addr, align 8
  %call54 = call noalias i8* @strdup(i8* %37) #5
  %38 = load %struct.httpd_server** %hs, align 8
  %p3p55 = getelementptr inbounds %struct.httpd_server* %38, i32 0, i32 7
  store i8* %call54, i8** %p3p55, align 8
  %39 = load i32* %max_age.addr, align 4
  %40 = load %struct.httpd_server** %hs, align 8
  %max_age56 = getelementptr inbounds %struct.httpd_server* %40, i32 0, i32 8
  store i32 %39, i32* %max_age56, align 4
  %41 = load i8** %cwd.addr, align 8
  %call57 = call noalias i8* @strdup(i8* %41) #5
  %42 = load %struct.httpd_server** %hs, align 8
  %cwd58 = getelementptr inbounds %struct.httpd_server* %42, i32 0, i32 9
  store i8* %call57, i8** %cwd58, align 8
  %43 = load %struct.httpd_server** %hs, align 8
  %cwd59 = getelementptr inbounds %struct.httpd_server* %43, i32 0, i32 9
  %44 = load i8** %cwd59, align 8
  %cmp60 = icmp eq i8* %44, null
  br i1 %cmp60, label %if.then62, label %if.end63

if.then62:                                        ; preds = %if.end50
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([26 x i8]* @.str4136, i32 0, i32 0))
  store %struct.httpd_server* null, %struct.httpd_server** %retval
  br label %return

if.end63:                                         ; preds = %if.end50
  %45 = load i8** %url_pattern.addr, align 8
  %cmp64 = icmp eq i8* %45, null
  br i1 %cmp64, label %if.then66, label %if.else68

if.then66:                                        ; preds = %if.end63
  %46 = load %struct.httpd_server** %hs, align 8
  %url_pattern67 = getelementptr inbounds %struct.httpd_server* %46, i32 0, i32 17
  store i8* null, i8** %url_pattern67, align 8
  br label %if.end76

if.else68:                                        ; preds = %if.end63
  %47 = load i8** %url_pattern.addr, align 8
  %call69 = call noalias i8* @strdup(i8* %47) #5
  %48 = load %struct.httpd_server** %hs, align 8
  %url_pattern70 = getelementptr inbounds %struct.httpd_server* %48, i32 0, i32 17
  store i8* %call69, i8** %url_pattern70, align 8
  %49 = load %struct.httpd_server** %hs, align 8
  %url_pattern71 = getelementptr inbounds %struct.httpd_server* %49, i32 0, i32 17
  %50 = load i8** %url_pattern71, align 8
  %cmp72 = icmp eq i8* %50, null
  br i1 %cmp72, label %if.then74, label %if.end75

if.then74:                                        ; preds = %if.else68
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([34 x i8]* @.str5137, i32 0, i32 0))
  store %struct.httpd_server* null, %struct.httpd_server** %retval
  br label %return

if.end75:                                         ; preds = %if.else68
  br label %if.end76

if.end76:                                         ; preds = %if.end75, %if.then66
  %51 = load i8** %local_pattern.addr, align 8
  %cmp77 = icmp eq i8* %51, null
  br i1 %cmp77, label %if.then79, label %if.else81

if.then79:                                        ; preds = %if.end76
  %52 = load %struct.httpd_server** %hs, align 8
  %local_pattern80 = getelementptr inbounds %struct.httpd_server* %52, i32 0, i32 18
  store i8* null, i8** %local_pattern80, align 8
  br label %if.end89

if.else81:                                        ; preds = %if.end76
  %53 = load i8** %local_pattern.addr, align 8
  %call82 = call noalias i8* @strdup(i8* %53) #5
  %54 = load %struct.httpd_server** %hs, align 8
  %local_pattern83 = getelementptr inbounds %struct.httpd_server* %54, i32 0, i32 18
  store i8* %call82, i8** %local_pattern83, align 8
  %55 = load %struct.httpd_server** %hs, align 8
  %local_pattern84 = getelementptr inbounds %struct.httpd_server* %55, i32 0, i32 18
  %56 = load i8** %local_pattern84, align 8
  %cmp85 = icmp eq i8* %56, null
  br i1 %cmp85, label %if.then87, label %if.end88

if.then87:                                        ; preds = %if.else81
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([36 x i8]* @.str6138, i32 0, i32 0))
  store %struct.httpd_server* null, %struct.httpd_server** %retval
  br label %return

if.end88:                                         ; preds = %if.else81
  br label %if.end89

if.end89:                                         ; preds = %if.end88, %if.then79
  %57 = load i32* %no_log.addr, align 4
  %58 = load %struct.httpd_server** %hs, align 8
  %no_log90 = getelementptr inbounds %struct.httpd_server* %58, i32 0, i32 12
  store i32 %57, i32* %no_log90, align 4
  %59 = load %struct.httpd_server** %hs, align 8
  %logfp91 = getelementptr inbounds %struct.httpd_server* %59, i32 0, i32 13
  store %struct._IO_FILE* null, %struct._IO_FILE** %logfp91, align 8
  %60 = load %struct.httpd_server** %hs, align 8
  %61 = load %struct._IO_FILE** %logfp.addr, align 8
  call void @httpd_set_logfp(%struct.httpd_server* %60, %struct._IO_FILE* %61)
  %62 = load i32* %no_symlink_check.addr, align 4
  %63 = load %struct.httpd_server** %hs, align 8
  %no_symlink_check92 = getelementptr inbounds %struct.httpd_server* %63, i32 0, i32 14
  store i32 %62, i32* %no_symlink_check92, align 4
  %64 = load i32* %vhost.addr, align 4
  %65 = load %struct.httpd_server** %hs, align 8
  %vhost93 = getelementptr inbounds %struct.httpd_server* %65, i32 0, i32 15
  store i32 %64, i32* %vhost93, align 4
  %66 = load i32* %global_passwd.addr, align 4
  %67 = load %struct.httpd_server** %hs, align 8
  %global_passwd94 = getelementptr inbounds %struct.httpd_server* %67, i32 0, i32 16
  store i32 %66, i32* %global_passwd94, align 4
  %68 = load i32* %no_empty_referrers.addr, align 4
  %69 = load %struct.httpd_server** %hs, align 8
  %no_empty_referrers95 = getelementptr inbounds %struct.httpd_server* %69, i32 0, i32 19
  store i32 %68, i32* %no_empty_referrers95, align 4
  %70 = load %union.httpd_sockaddr** %sa6P.addr, align 8
  %cmp96 = icmp eq %union.httpd_sockaddr* %70, null
  br i1 %cmp96, label %if.then98, label %if.else99

if.then98:                                        ; preds = %if.end89
  %71 = load %struct.httpd_server** %hs, align 8
  %listen6_fd = getelementptr inbounds %struct.httpd_server* %71, i32 0, i32 11
  store i32 -1, i32* %listen6_fd, align 4
  br label %if.end102

if.else99:                                        ; preds = %if.end89
  %72 = load %union.httpd_sockaddr** %sa6P.addr, align 8
  %call100 = call i32 @initialize_listen_socket(%union.httpd_sockaddr* %72)
  %73 = load %struct.httpd_server** %hs, align 8
  %listen6_fd101 = getelementptr inbounds %struct.httpd_server* %73, i32 0, i32 11
  store i32 %call100, i32* %listen6_fd101, align 4
  br label %if.end102

if.end102:                                        ; preds = %if.else99, %if.then98
  %74 = load %union.httpd_sockaddr** %sa4P.addr, align 8
  %cmp103 = icmp eq %union.httpd_sockaddr* %74, null
  br i1 %cmp103, label %if.then105, label %if.else106

if.then105:                                       ; preds = %if.end102
  %75 = load %struct.httpd_server** %hs, align 8
  %listen4_fd = getelementptr inbounds %struct.httpd_server* %75, i32 0, i32 10
  store i32 -1, i32* %listen4_fd, align 4
  br label %if.end109

if.else106:                                       ; preds = %if.end102
  %76 = load %union.httpd_sockaddr** %sa4P.addr, align 8
  %call107 = call i32 @initialize_listen_socket(%union.httpd_sockaddr* %76)
  %77 = load %struct.httpd_server** %hs, align 8
  %listen4_fd108 = getelementptr inbounds %struct.httpd_server* %77, i32 0, i32 10
  store i32 %call107, i32* %listen4_fd108, align 4
  br label %if.end109

if.end109:                                        ; preds = %if.else106, %if.then105
  %78 = load %struct.httpd_server** %hs, align 8
  %listen4_fd110 = getelementptr inbounds %struct.httpd_server* %78, i32 0, i32 10
  %79 = load i32* %listen4_fd110, align 4
  %cmp111 = icmp eq i32 %79, -1
  br i1 %cmp111, label %land.lhs.true, label %if.end117

land.lhs.true:                                    ; preds = %if.end109
  %80 = load %struct.httpd_server** %hs, align 8
  %listen6_fd113 = getelementptr inbounds %struct.httpd_server* %80, i32 0, i32 11
  %81 = load i32* %listen6_fd113, align 4
  %cmp114 = icmp eq i32 %81, -1
  br i1 %cmp114, label %if.then116, label %if.end117

if.then116:                                       ; preds = %land.lhs.true
  %82 = load %struct.httpd_server** %hs, align 8
  call void @free_httpd_server(%struct.httpd_server* %82)
  store %struct.httpd_server* null, %struct.httpd_server** %retval
  br label %return

if.end117:                                        ; preds = %land.lhs.true, %if.end109
  call void @init_mime()
  %83 = load %struct.httpd_server** %hs, align 8
  %binding_hostname118 = getelementptr inbounds %struct.httpd_server* %83, i32 0, i32 0
  %84 = load i8** %binding_hostname118, align 8
  %cmp119 = icmp eq i8* %84, null
  br i1 %cmp119, label %if.then121, label %if.else124

if.then121:                                       ; preds = %if.end117
  %85 = load %struct.httpd_server** %hs, align 8
  %port122 = getelementptr inbounds %struct.httpd_server* %85, i32 0, i32 2
  %86 = load i16* %port122, align 2
  %conv123 = zext i16 %86 to i32
  call void (i32, i8*, ...)* @syslog(i32 5, i8* getelementptr inbounds ([26 x i8]* @.str7139, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8]* @.str8140, i32 0, i32 0), i32 %conv123)
  br label %if.end131

if.else124:                                       ; preds = %if.end117
  %87 = load %struct.httpd_server** %hs, align 8
  %listen4_fd125 = getelementptr inbounds %struct.httpd_server* %87, i32 0, i32 10
  %88 = load i32* %listen4_fd125, align 4
  %cmp126 = icmp ne i32 %88, -1
  br i1 %cmp126, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else124
  %89 = load %union.httpd_sockaddr** %sa4P.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else124
  %90 = load %union.httpd_sockaddr** %sa6P.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.httpd_sockaddr* [ %89, %cond.true ], [ %90, %cond.false ]
  %call128 = call i8* @httpd_ntoa(%union.httpd_sockaddr* %cond)
  %91 = load %struct.httpd_server** %hs, align 8
  %port129 = getelementptr inbounds %struct.httpd_server* %91, i32 0, i32 2
  %92 = load i16* %port129, align 2
  %conv130 = zext i16 %92 to i32
  call void (i32, i8*, ...)* @syslog(i32 5, i8* getelementptr inbounds ([33 x i8]* @.str9141, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8]* @.str8140, i32 0, i32 0), i8* %call128, i32 %conv130)
  br label %if.end131

if.end131:                                        ; preds = %cond.end, %if.then121
  %93 = load %struct.httpd_server** %hs, align 8
  store %struct.httpd_server* %93, %struct.httpd_server** %retval
  br label %return

return:                                           ; preds = %if.end131, %if.then116, %if.then87, %if.then74, %if.then62, %if.then41, %if.then6, %if.then
  %94 = load %struct.httpd_server** %retval
  ret %struct.httpd_server* %94
}

; Function Attrs: nounwind
declare i32 @gethostname(i8*, i64) #3

; Function Attrs: nounwind uwtable
define internal void @httpd_set_logfp(%struct.httpd_server* %hs, %struct._IO_FILE* %logfp) #0 {
entry:
  %hs.addr = alloca %struct.httpd_server*, align 8
  %logfp.addr = alloca %struct._IO_FILE*, align 8
  store %struct.httpd_server* %hs, %struct.httpd_server** %hs.addr, align 8
  store %struct._IO_FILE* %logfp, %struct._IO_FILE** %logfp.addr, align 8
  %0 = load %struct.httpd_server** %hs.addr, align 8
  %logfp1 = getelementptr inbounds %struct.httpd_server* %0, i32 0, i32 13
  %1 = load %struct._IO_FILE** %logfp1, align 8
  %cmp = icmp ne %struct._IO_FILE* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.httpd_server** %hs.addr, align 8
  %logfp2 = getelementptr inbounds %struct.httpd_server* %2, i32 0, i32 13
  %3 = load %struct._IO_FILE** %logfp2, align 8
  %call = call i32 @fclose(%struct._IO_FILE* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct._IO_FILE** %logfp.addr, align 8
  %5 = load %struct.httpd_server** %hs.addr, align 8
  %logfp3 = getelementptr inbounds %struct.httpd_server* %5, i32 0, i32 13
  store %struct._IO_FILE* %4, %struct._IO_FILE** %logfp3, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal i8* @httpd_ntoa(%union.httpd_sockaddr* %saP) #0 {
entry:
  %saP.addr = alloca %union.httpd_sockaddr*, align 8
  %__a = alloca %struct.in6_addr*, align 8
  %tmp = alloca i32, align 4
  store %union.httpd_sockaddr* %saP, %union.httpd_sockaddr** %saP.addr, align 8
  %0 = load %union.httpd_sockaddr** %saP.addr, align 8
  %sa = bitcast %union.httpd_sockaddr* %0 to %struct.sockaddr*
  %1 = load %union.httpd_sockaddr** %saP.addr, align 8
  %call = call i64 @sockaddr_len(%union.httpd_sockaddr* %1)
  %conv = trunc i64 %call to i32
  %call1 = call i32 @getnameinfo(%struct.sockaddr* %sa, i32 %conv, i8* getelementptr inbounds ([200 x i8]* @httpd_ntoa.str, i32 0, i32 0), i32 200, i8* null, i32 0, i32 1)
  %cmp = icmp ne i32 %call1, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i8 63, i8* getelementptr inbounds ([200 x i8]* @httpd_ntoa.str, i32 0, i64 0), align 1
  store i8 0, i8* getelementptr inbounds ([200 x i8]* @httpd_ntoa.str, i32 0, i64 1), align 1
  br label %if.end22

if.else:                                          ; preds = %entry
  %2 = load %union.httpd_sockaddr** %saP.addr, align 8
  %sa_in6 = bitcast %union.httpd_sockaddr* %2 to %struct.sockaddr_in6*
  %sin6_addr = getelementptr inbounds %struct.sockaddr_in6* %sa_in6, i32 0, i32 3
  store %struct.in6_addr* %sin6_addr, %struct.in6_addr** %__a, align 8
  %3 = load %struct.in6_addr** %__a, align 8
  %__in6_u = getelementptr inbounds %struct.in6_addr* %3, i32 0, i32 0
  %__u6_addr32 = bitcast %union.anon* %__in6_u to [4 x i32]*
  %arrayidx = getelementptr inbounds [4 x i32]* %__u6_addr32, i32 0, i64 0
  %4 = load i32* %arrayidx, align 4
  %cmp3 = icmp eq i32 %4, 0
  br i1 %cmp3, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %if.else
  %5 = load %struct.in6_addr** %__a, align 8
  %__in6_u5 = getelementptr inbounds %struct.in6_addr* %5, i32 0, i32 0
  %__u6_addr326 = bitcast %union.anon* %__in6_u5 to [4 x i32]*
  %arrayidx7 = getelementptr inbounds [4 x i32]* %__u6_addr326, i32 0, i64 1
  %6 = load i32* %arrayidx7, align 4
  %cmp8 = icmp eq i32 %6, 0
  br i1 %cmp8, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %7 = load %struct.in6_addr** %__a, align 8
  %__in6_u10 = getelementptr inbounds %struct.in6_addr* %7, i32 0, i32 0
  %__u6_addr3211 = bitcast %union.anon* %__in6_u10 to [4 x i32]*
  %arrayidx12 = getelementptr inbounds [4 x i32]* %__u6_addr3211, i32 0, i64 2
  %8 = load i32* %arrayidx12, align 4
  %call13 = call i32 @htonl(i32 65535) #10
  %cmp14 = icmp eq i32 %8, %call13
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %if.else
  %9 = phi i1 [ false, %land.lhs.true ], [ false, %if.else ], [ %cmp14, %land.rhs ]
  %land.ext = zext i1 %9 to i32
  store i32 %land.ext, i32* %tmp
  %10 = load i32* %tmp
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %land.lhs.true16, label %if.end

land.lhs.true16:                                  ; preds = %land.end
  %call17 = call i32 @strncmp(i8* getelementptr inbounds ([200 x i8]* @httpd_ntoa.str, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str57201, i32 0, i32 0), i64 7) #8
  %cmp18 = icmp eq i32 %call17, 0
  br i1 %cmp18, label %if.then20, label %if.end

if.then20:                                        ; preds = %land.lhs.true16
  %call21 = call i64 @strlen(i8* getelementptr inbounds ([200 x i8]* @httpd_ntoa.str, i32 0, i64 7)) #8
  %add = add i64 %call21, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* getelementptr inbounds ([200 x i8]* @httpd_ntoa.str, i32 0, i32 0), i8* getelementptr inbounds ([200 x i8]* @httpd_ntoa.str, i32 0, i64 7), i64 %add, i32 1, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.then20, %land.lhs.true16, %land.end
  br label %if.end22

if.end22:                                         ; preds = %if.end, %if.then
  ret i8* getelementptr inbounds ([200 x i8]* @httpd_ntoa.str, i32 0, i32 0)
}

; Function Attrs: nounwind uwtable
define internal void @httpd_terminate(%struct.httpd_server* %hs) #0 {
entry:
  %hs.addr = alloca %struct.httpd_server*, align 8
  store %struct.httpd_server* %hs, %struct.httpd_server** %hs.addr, align 8
  %0 = load %struct.httpd_server** %hs.addr, align 8
  call void @httpd_unlisten(%struct.httpd_server* %0)
  %1 = load %struct.httpd_server** %hs.addr, align 8
  %logfp = getelementptr inbounds %struct.httpd_server* %1, i32 0, i32 13
  %2 = load %struct._IO_FILE** %logfp, align 8
  %cmp = icmp ne %struct._IO_FILE* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.httpd_server** %hs.addr, align 8
  %logfp1 = getelementptr inbounds %struct.httpd_server* %3, i32 0, i32 13
  %4 = load %struct._IO_FILE** %logfp1, align 8
  %call = call i32 @fclose(%struct._IO_FILE* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.httpd_server** %hs.addr, align 8
  call void @free_httpd_server(%struct.httpd_server* %5)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @httpd_unlisten(%struct.httpd_server* %hs) #0 {
entry:
  %hs.addr = alloca %struct.httpd_server*, align 8
  store %struct.httpd_server* %hs, %struct.httpd_server** %hs.addr, align 8
  %0 = load %struct.httpd_server** %hs.addr, align 8
  %listen4_fd = getelementptr inbounds %struct.httpd_server* %0, i32 0, i32 10
  %1 = load i32* %listen4_fd, align 4
  %cmp = icmp ne i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.httpd_server** %hs.addr, align 8
  %listen4_fd1 = getelementptr inbounds %struct.httpd_server* %2, i32 0, i32 10
  %3 = load i32* %listen4_fd1, align 4
  %call = call i32 @close(i32 %3)
  %4 = load %struct.httpd_server** %hs.addr, align 8
  %listen4_fd2 = getelementptr inbounds %struct.httpd_server* %4, i32 0, i32 10
  store i32 -1, i32* %listen4_fd2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.httpd_server** %hs.addr, align 8
  %listen6_fd = getelementptr inbounds %struct.httpd_server* %5, i32 0, i32 11
  %6 = load i32* %listen6_fd, align 4
  %cmp3 = icmp ne i32 %6, -1
  br i1 %cmp3, label %if.then4, label %if.end8

if.then4:                                         ; preds = %if.end
  %7 = load %struct.httpd_server** %hs.addr, align 8
  %listen6_fd5 = getelementptr inbounds %struct.httpd_server* %7, i32 0, i32 11
  %8 = load i32* %listen6_fd5, align 4
  %call6 = call i32 @close(i32 %8)
  %9 = load %struct.httpd_server** %hs.addr, align 8
  %listen6_fd7 = getelementptr inbounds %struct.httpd_server* %9, i32 0, i32 11
  store i32 -1, i32* %listen6_fd7, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then4, %if.end
  ret void
}

declare i32 @close(i32) #2

; Function Attrs: nounwind uwtable
define internal void @httpd_write_response(%struct.httpd_conn* %hc) #0 {
entry:
  %hc.addr = alloca %struct.httpd_conn*, align 8
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  %0 = load i32* @sub_process, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd = getelementptr inbounds %struct.httpd_conn* %1, i32 0, i32 60
  %2 = load i32* %conn_fd, align 4
  call void @httpd_clear_ndelay(i32 %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.httpd_conn** %hc.addr, align 8
  %responselen = getelementptr inbounds %struct.httpd_conn* %3, i32 0, i32 45
  %4 = load i64* %responselen, align 8
  %cmp = icmp ugt i64 %4, 0
  br i1 %cmp, label %if.then1, label %if.end5

if.then1:                                         ; preds = %if.end
  %5 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd2 = getelementptr inbounds %struct.httpd_conn* %5, i32 0, i32 60
  %6 = load i32* %conn_fd2, align 4
  %7 = load %struct.httpd_conn** %hc.addr, align 8
  %response = getelementptr inbounds %struct.httpd_conn* %7, i32 0, i32 32
  %8 = load i8** %response, align 8
  %9 = load %struct.httpd_conn** %hc.addr, align 8
  %responselen3 = getelementptr inbounds %struct.httpd_conn* %9, i32 0, i32 45
  %10 = load i64* %responselen3, align 8
  %call = call i32 @httpd_write_fully(i32 %6, i8* %8, i64 %10)
  %11 = load %struct.httpd_conn** %hc.addr, align 8
  %responselen4 = getelementptr inbounds %struct.httpd_conn* %11, i32 0, i32 45
  store i64 0, i64* %responselen4, align 8
  br label %if.end5

if.end5:                                          ; preds = %if.then1, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @httpd_clear_ndelay(i32 %fd) #0 {
entry:
  %fd.addr = alloca i32, align 4
  %flags = alloca i32, align 4
  %newflags = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  %0 = load i32* %fd.addr, align 4
  %call = call i32 (i32, i32, ...)* @fcntl(i32 %0, i32 3, i32 0)
  store i32 %call, i32* %flags, align 4
  %1 = load i32* %flags, align 4
  %cmp = icmp ne i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  %2 = load i32* %flags, align 4
  %and = and i32 %2, -2049
  store i32 %and, i32* %newflags, align 4
  %3 = load i32* %newflags, align 4
  %4 = load i32* %flags, align 4
  %cmp1 = icmp ne i32 %3, %4
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %5 = load i32* %fd.addr, align 4
  %6 = load i32* %newflags, align 4
  %call3 = call i32 (i32, i32, ...)* @fcntl(i32 %5, i32 4, i32 %6)
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @httpd_write_fully(i32 %fd, i8* %buf, i64 %nbytes) #0 {
entry:
  %retval = alloca i32, align 4
  %fd.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %nbytes.addr = alloca i64, align 8
  %nwritten = alloca i32, align 4
  %r = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %nbytes, i64* %nbytes.addr, align 8
  store i32 0, i32* %nwritten, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end20, %if.then, %entry
  %0 = load i32* %nwritten, align 4
  %conv = sext i32 %0 to i64
  %1 = load i64* %nbytes.addr, align 8
  %cmp = icmp ult i64 %conv, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32* %fd.addr, align 4
  %3 = load i8** %buf.addr, align 8
  %4 = load i32* %nwritten, align 4
  %idx.ext = sext i32 %4 to i64
  %add.ptr = getelementptr inbounds i8* %3, i64 %idx.ext
  %5 = load i64* %nbytes.addr, align 8
  %6 = load i32* %nwritten, align 4
  %conv2 = sext i32 %6 to i64
  %sub = sub i64 %5, %conv2
  %call = call i64 @write(i32 %2, i8* %add.ptr, i64 %sub)
  %conv3 = trunc i64 %call to i32
  store i32 %conv3, i32* %r, align 4
  %7 = load i32* %r, align 4
  %cmp4 = icmp slt i32 %7, 0
  br i1 %cmp4, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %while.body
  %call6 = call i32* @__errno_location() #10
  %8 = load i32* %call6, align 4
  %cmp7 = icmp eq i32 %8, 4
  br i1 %cmp7, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %call9 = call i32* @__errno_location() #10
  %9 = load i32* %call9, align 4
  %cmp10 = icmp eq i32 %9, 11
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %call12 = call i32 @sleep(i32 1)
  br label %while.cond

if.end:                                           ; preds = %lor.lhs.false, %while.body
  %10 = load i32* %r, align 4
  %cmp13 = icmp slt i32 %10, 0
  br i1 %cmp13, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end
  %11 = load i32* %r, align 4
  store i32 %11, i32* %retval
  br label %return

if.end16:                                         ; preds = %if.end
  %12 = load i32* %r, align 4
  %cmp17 = icmp eq i32 %12, 0
  br i1 %cmp17, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.end16
  br label %while.end

if.end20:                                         ; preds = %if.end16
  %13 = load i32* %r, align 4
  %14 = load i32* %nwritten, align 4
  %add = add nsw i32 %14, %13
  store i32 %add, i32* %nwritten, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then19, %while.cond
  %15 = load i32* %nwritten, align 4
  store i32 %15, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then15
  %16 = load i32* %retval
  ret i32 %16
}

; Function Attrs: nounwind uwtable
define internal void @httpd_set_ndelay(i32 %fd) #0 {
entry:
  %fd.addr = alloca i32, align 4
  %flags = alloca i32, align 4
  %newflags = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  %0 = load i32* %fd.addr, align 4
  %call = call i32 (i32, i32, ...)* @fcntl(i32 %0, i32 3, i32 0)
  store i32 %call, i32* %flags, align 4
  %1 = load i32* %flags, align 4
  %cmp = icmp ne i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  %2 = load i32* %flags, align 4
  %or = or i32 %2, 2048
  store i32 %or, i32* %newflags, align 4
  %3 = load i32* %newflags, align 4
  %4 = load i32* %flags, align 4
  %cmp1 = icmp ne i32 %3, %4
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %5 = load i32* %fd.addr, align 4
  %6 = load i32* %newflags, align 4
  %call3 = call i32 (i32, i32, ...)* @fcntl(i32 %5, i32 4, i32 %6)
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @httpd_realloc_str(i8** %strP, i64* %maxsizeP, i64 %size) #0 {
entry:
  %strP.addr = alloca i8**, align 8
  %maxsizeP.addr = alloca i64*, align 8
  %size.addr = alloca i64, align 8
  store i8** %strP, i8*** %strP.addr, align 8
  store i64* %maxsizeP, i64** %maxsizeP.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i64** %maxsizeP.addr, align 8
  %1 = load i64* %0, align 8
  %cmp = icmp eq i64 %1, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i64* %size.addr, align 8
  %add = add i64 %2, 100
  %cmp1 = icmp ugt i64 200, %add
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %3 = load i64* %size.addr, align 8
  %add2 = add i64 %3, 100
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 200, %cond.true ], [ %add2, %cond.false ]
  %4 = load i64** %maxsizeP.addr, align 8
  store i64 %cond, i64* %4, align 8
  %5 = load i64** %maxsizeP.addr, align 8
  %6 = load i64* %5, align 8
  %add3 = add i64 %6, 1
  %mul = mul i64 1, %add3
  %call = call noalias i8* @malloc(i64 %mul) #5
  %7 = load i8*** %strP.addr, align 8
  store i8* %call, i8** %7, align 8
  %8 = load i32* @str_alloc_count, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* @str_alloc_count, align 4
  %9 = load i64** %maxsizeP.addr, align 8
  %10 = load i64* %9, align 8
  %11 = load i64* @str_alloc_size, align 8
  %add4 = add i64 %11, %10
  store i64 %add4, i64* @str_alloc_size, align 8
  br label %if.end22

if.else:                                          ; preds = %entry
  %12 = load i64* %size.addr, align 8
  %13 = load i64** %maxsizeP.addr, align 8
  %14 = load i64* %13, align 8
  %cmp5 = icmp ugt i64 %12, %14
  br i1 %cmp5, label %if.then6, label %if.else21

if.then6:                                         ; preds = %if.else
  %15 = load i64** %maxsizeP.addr, align 8
  %16 = load i64* %15, align 8
  %17 = load i64* @str_alloc_size, align 8
  %sub = sub i64 %17, %16
  store i64 %sub, i64* @str_alloc_size, align 8
  %18 = load i64** %maxsizeP.addr, align 8
  %19 = load i64* %18, align 8
  %mul7 = mul i64 %19, 2
  %20 = load i64* %size.addr, align 8
  %mul8 = mul i64 %20, 5
  %div = udiv i64 %mul8, 4
  %cmp9 = icmp ugt i64 %mul7, %div
  br i1 %cmp9, label %cond.true10, label %cond.false12

cond.true10:                                      ; preds = %if.then6
  %21 = load i64** %maxsizeP.addr, align 8
  %22 = load i64* %21, align 8
  %mul11 = mul i64 %22, 2
  br label %cond.end15

cond.false12:                                     ; preds = %if.then6
  %23 = load i64* %size.addr, align 8
  %mul13 = mul i64 %23, 5
  %div14 = udiv i64 %mul13, 4
  br label %cond.end15

cond.end15:                                       ; preds = %cond.false12, %cond.true10
  %cond16 = phi i64 [ %mul11, %cond.true10 ], [ %div14, %cond.false12 ]
  %24 = load i64** %maxsizeP.addr, align 8
  store i64 %cond16, i64* %24, align 8
  %25 = load i8*** %strP.addr, align 8
  %26 = load i8** %25, align 8
  %27 = load i64** %maxsizeP.addr, align 8
  %28 = load i64* %27, align 8
  %add17 = add i64 %28, 1
  %mul18 = mul i64 1, %add17
  %call19 = call i8* @realloc(i8* %26, i64 %mul18) #5
  %29 = load i8*** %strP.addr, align 8
  store i8* %call19, i8** %29, align 8
  %30 = load i64** %maxsizeP.addr, align 8
  %31 = load i64* %30, align 8
  %32 = load i64* @str_alloc_size, align 8
  %add20 = add i64 %32, %31
  store i64 %add20, i64* @str_alloc_size, align 8
  br label %if.end

if.else21:                                        ; preds = %if.else
  br label %if.end25

if.end:                                           ; preds = %cond.end15
  br label %if.end22

if.end22:                                         ; preds = %if.end, %cond.end
  %33 = load i8*** %strP.addr, align 8
  %34 = load i8** %33, align 8
  %cmp23 = icmp eq i8* %34, null
  br i1 %cmp23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.end22
  %35 = load i64** %maxsizeP.addr, align 8
  %36 = load i64* %35, align 8
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([49 x i8]* @.str16160, i32 0, i32 0), i64 %36)
  call void @exit(i32 1) #9
  unreachable

if.end25:                                         ; preds = %if.end22, %if.else21
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @httpd_send_err(%struct.httpd_conn* %hc, i32 %status, i8* %title, i8* %extraheads, i8* %form, i8* %arg) #0 {
entry:
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %status.addr = alloca i32, align 4
  %title.addr = alloca i8*, align 8
  %extraheads.addr = alloca i8*, align 8
  %form.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %filename = alloca [1000 x i8], align 16
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  store i32 %status, i32* %status.addr, align 4
  store i8* %title, i8** %title.addr, align 8
  store i8* %extraheads, i8** %extraheads.addr, align 8
  store i8* %form, i8** %form.addr, align 8
  store i8* %arg, i8** %arg.addr, align 8
  %0 = load %struct.httpd_conn** %hc.addr, align 8
  %hs = getelementptr inbounds %struct.httpd_conn* %0, i32 0, i32 1
  %1 = load %struct.httpd_server** %hs, align 8
  %vhost = getelementptr inbounds %struct.httpd_server* %1, i32 0, i32 15
  %2 = load i32* %vhost, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %land.lhs.true, label %if.end7

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.httpd_conn** %hc.addr, align 8
  %hostdir = getelementptr inbounds %struct.httpd_conn* %3, i32 0, i32 29
  %4 = load i8** %hostdir, align 8
  %arrayidx = getelementptr inbounds i8* %4, i64 0
  %5 = load i8* %arrayidx, align 1
  %conv = sext i8 %5 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.end7

if.then:                                          ; preds = %land.lhs.true
  %arraydecay = getelementptr inbounds [1000 x i8]* %filename, i32 0, i32 0
  %6 = load %struct.httpd_conn** %hc.addr, align 8
  %hostdir2 = getelementptr inbounds %struct.httpd_conn* %6, i32 0, i32 29
  %7 = load i8** %hostdir2, align 8
  %8 = load i32* %status.addr, align 4
  %call = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %arraydecay, i64 1000, i8* getelementptr inbounds ([17 x i8]* @.str17161, i32 0, i32 0), i8* %7, i8* getelementptr inbounds ([7 x i8]* @.str18162, i32 0, i32 0), i32 %8)
  %9 = load %struct.httpd_conn** %hc.addr, align 8
  %10 = load i32* %status.addr, align 4
  %11 = load i8** %title.addr, align 8
  %12 = load i8** %extraheads.addr, align 8
  %arraydecay3 = getelementptr inbounds [1000 x i8]* %filename, i32 0, i32 0
  %call4 = call i32 @send_err_file(%struct.httpd_conn* %9, i32 %10, i8* %11, i8* %12, i8* %arraydecay3)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then6, label %if.end

if.then6:                                         ; preds = %if.then
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end7

if.end7:                                          ; preds = %if.end, %land.lhs.true, %entry
  %arraydecay8 = getelementptr inbounds [1000 x i8]* %filename, i32 0, i32 0
  %13 = load i32* %status.addr, align 4
  %call9 = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %arraydecay8, i64 1000, i8* getelementptr inbounds ([14 x i8]* @.str19163, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str18162, i32 0, i32 0), i32 %13)
  %14 = load %struct.httpd_conn** %hc.addr, align 8
  %15 = load i32* %status.addr, align 4
  %16 = load i8** %title.addr, align 8
  %17 = load i8** %extraheads.addr, align 8
  %arraydecay10 = getelementptr inbounds [1000 x i8]* %filename, i32 0, i32 0
  %call11 = call i32 @send_err_file(%struct.httpd_conn* %14, i32 %15, i8* %16, i8* %17, i8* %arraydecay10)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end7
  br label %return

if.end14:                                         ; preds = %if.end7
  %18 = load %struct.httpd_conn** %hc.addr, align 8
  %19 = load i32* %status.addr, align 4
  %20 = load i8** %title.addr, align 8
  %21 = load i8** %extraheads.addr, align 8
  %22 = load i8** %form.addr, align 8
  %23 = load i8** %arg.addr, align 8
  call void @send_response(%struct.httpd_conn* %18, i32 %19, i8* %20, i8* %21, i8* %22, i8* %23)
  br label %return

return:                                           ; preds = %if.end14, %if.then13, %if.then6
  ret void
}

; Function Attrs: nounwind uwtable
define internal i8* @httpd_method_str(i32 %method) #0 {
entry:
  %retval = alloca i8*, align 8
  %method.addr = alloca i32, align 4
  store i32 %method, i32* %method.addr, align 4
  %0 = load i32* %method.addr, align 4
  switch i32 %0, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb1
    i32 3, label %sw.bb2
  ]

sw.bb:                                            ; preds = %entry
  store i8* getelementptr inbounds ([4 x i8]* @.str20164, i32 0, i32 0), i8** %retval
  br label %return

sw.bb1:                                           ; preds = %entry
  store i8* getelementptr inbounds ([5 x i8]* @.str21165, i32 0, i32 0), i8** %retval
  br label %return

sw.bb2:                                           ; preds = %entry
  store i8* getelementptr inbounds ([5 x i8]* @.str22166, i32 0, i32 0), i8** %retval
  br label %return

sw.default:                                       ; preds = %entry
  store i8* getelementptr inbounds ([8 x i8]* @.str23167, i32 0, i32 0), i8** %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb2, %sw.bb1, %sw.bb
  %1 = load i8** %retval
  ret i8* %1
}

; Function Attrs: nounwind uwtable
define internal i32 @httpd_get_conn(%struct.httpd_server* %hs, i32 %listen_fd, %struct.httpd_conn* %hc) #0 {
entry:
  %retval = alloca i32, align 4
  %hs.addr = alloca %struct.httpd_server*, align 8
  %listen_fd.addr = alloca i32, align 4
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %sa = alloca %union.httpd_sockaddr, align 8
  %sz = alloca i32, align 4
  store %struct.httpd_server* %hs, %struct.httpd_server** %hs.addr, align 8
  store i32 %listen_fd, i32* %listen_fd.addr, align 4
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  %0 = load %struct.httpd_conn** %hc.addr, align 8
  %initialized = getelementptr inbounds %struct.httpd_conn* %0, i32 0, i32 0
  %1 = load i32* %initialized, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.httpd_conn** %hc.addr, align 8
  %read_size = getelementptr inbounds %struct.httpd_conn* %2, i32 0, i32 4
  store i64 0, i64* %read_size, align 8
  %3 = load %struct.httpd_conn** %hc.addr, align 8
  %read_buf = getelementptr inbounds %struct.httpd_conn* %3, i32 0, i32 3
  %4 = load %struct.httpd_conn** %hc.addr, align 8
  %read_size1 = getelementptr inbounds %struct.httpd_conn* %4, i32 0, i32 4
  call void @httpd_realloc_str(i8** %read_buf, i64* %read_size1, i64 500)
  %5 = load %struct.httpd_conn** %hc.addr, align 8
  %maxresponse = getelementptr inbounds %struct.httpd_conn* %5, i32 0, i32 44
  store i64 0, i64* %maxresponse, align 8
  %6 = load %struct.httpd_conn** %hc.addr, align 8
  %maxremoteuser = getelementptr inbounds %struct.httpd_conn* %6, i32 0, i32 43
  store i64 0, i64* %maxremoteuser, align 8
  %7 = load %struct.httpd_conn** %hc.addr, align 8
  %maxhostdir = getelementptr inbounds %struct.httpd_conn* %7, i32 0, i32 42
  store i64 0, i64* %maxhostdir, align 8
  %8 = load %struct.httpd_conn** %hc.addr, align 8
  %maxreqhost = getelementptr inbounds %struct.httpd_conn* %8, i32 0, i32 41
  store i64 0, i64* %maxreqhost, align 8
  %9 = load %struct.httpd_conn** %hc.addr, align 8
  %maxaccepte = getelementptr inbounds %struct.httpd_conn* %9, i32 0, i32 40
  store i64 0, i64* %maxaccepte, align 8
  %10 = load %struct.httpd_conn** %hc.addr, align 8
  %maxaccept = getelementptr inbounds %struct.httpd_conn* %10, i32 0, i32 39
  store i64 0, i64* %maxaccept, align 8
  %11 = load %struct.httpd_conn** %hc.addr, align 8
  %maxquery = getelementptr inbounds %struct.httpd_conn* %11, i32 0, i32 38
  store i64 0, i64* %maxquery, align 8
  %12 = load %struct.httpd_conn** %hc.addr, align 8
  %maxpathinfo = getelementptr inbounds %struct.httpd_conn* %12, i32 0, i32 37
  store i64 0, i64* %maxpathinfo, align 8
  %13 = load %struct.httpd_conn** %hc.addr, align 8
  %maxencodings = getelementptr inbounds %struct.httpd_conn* %13, i32 0, i32 36
  store i64 0, i64* %maxencodings, align 8
  %14 = load %struct.httpd_conn** %hc.addr, align 8
  %maxexpnfilename = getelementptr inbounds %struct.httpd_conn* %14, i32 0, i32 35
  store i64 0, i64* %maxexpnfilename, align 8
  %15 = load %struct.httpd_conn** %hc.addr, align 8
  %maxorigfilename = getelementptr inbounds %struct.httpd_conn* %15, i32 0, i32 34
  store i64 0, i64* %maxorigfilename, align 8
  %16 = load %struct.httpd_conn** %hc.addr, align 8
  %maxdecodedurl = getelementptr inbounds %struct.httpd_conn* %16, i32 0, i32 33
  store i64 0, i64* %maxdecodedurl, align 8
  %17 = load %struct.httpd_conn** %hc.addr, align 8
  %decodedurl = getelementptr inbounds %struct.httpd_conn* %17, i32 0, i32 13
  %18 = load %struct.httpd_conn** %hc.addr, align 8
  %maxdecodedurl2 = getelementptr inbounds %struct.httpd_conn* %18, i32 0, i32 33
  call void @httpd_realloc_str(i8** %decodedurl, i64* %maxdecodedurl2, i64 1)
  %19 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename = getelementptr inbounds %struct.httpd_conn* %19, i32 0, i32 15
  %20 = load %struct.httpd_conn** %hc.addr, align 8
  %maxorigfilename3 = getelementptr inbounds %struct.httpd_conn* %20, i32 0, i32 34
  call void @httpd_realloc_str(i8** %origfilename, i64* %maxorigfilename3, i64 1)
  %21 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename = getelementptr inbounds %struct.httpd_conn* %21, i32 0, i32 16
  %22 = load %struct.httpd_conn** %hc.addr, align 8
  %maxexpnfilename4 = getelementptr inbounds %struct.httpd_conn* %22, i32 0, i32 35
  call void @httpd_realloc_str(i8** %expnfilename, i64* %maxexpnfilename4, i64 0)
  %23 = load %struct.httpd_conn** %hc.addr, align 8
  %encodings = getelementptr inbounds %struct.httpd_conn* %23, i32 0, i32 17
  %24 = load %struct.httpd_conn** %hc.addr, align 8
  %maxencodings5 = getelementptr inbounds %struct.httpd_conn* %24, i32 0, i32 36
  call void @httpd_realloc_str(i8** %encodings, i64* %maxencodings5, i64 0)
  %25 = load %struct.httpd_conn** %hc.addr, align 8
  %pathinfo = getelementptr inbounds %struct.httpd_conn* %25, i32 0, i32 18
  %26 = load %struct.httpd_conn** %hc.addr, align 8
  %maxpathinfo6 = getelementptr inbounds %struct.httpd_conn* %26, i32 0, i32 37
  call void @httpd_realloc_str(i8** %pathinfo, i64* %maxpathinfo6, i64 0)
  %27 = load %struct.httpd_conn** %hc.addr, align 8
  %query = getelementptr inbounds %struct.httpd_conn* %27, i32 0, i32 19
  %28 = load %struct.httpd_conn** %hc.addr, align 8
  %maxquery7 = getelementptr inbounds %struct.httpd_conn* %28, i32 0, i32 38
  call void @httpd_realloc_str(i8** %query, i64* %maxquery7, i64 0)
  %29 = load %struct.httpd_conn** %hc.addr, align 8
  %accept = getelementptr inbounds %struct.httpd_conn* %29, i32 0, i32 22
  %30 = load %struct.httpd_conn** %hc.addr, align 8
  %maxaccept8 = getelementptr inbounds %struct.httpd_conn* %30, i32 0, i32 39
  call void @httpd_realloc_str(i8** %accept, i64* %maxaccept8, i64 0)
  %31 = load %struct.httpd_conn** %hc.addr, align 8
  %accepte = getelementptr inbounds %struct.httpd_conn* %31, i32 0, i32 23
  %32 = load %struct.httpd_conn** %hc.addr, align 8
  %maxaccepte9 = getelementptr inbounds %struct.httpd_conn* %32, i32 0, i32 40
  call void @httpd_realloc_str(i8** %accepte, i64* %maxaccepte9, i64 0)
  %33 = load %struct.httpd_conn** %hc.addr, align 8
  %reqhost = getelementptr inbounds %struct.httpd_conn* %33, i32 0, i32 27
  %34 = load %struct.httpd_conn** %hc.addr, align 8
  %maxreqhost10 = getelementptr inbounds %struct.httpd_conn* %34, i32 0, i32 41
  call void @httpd_realloc_str(i8** %reqhost, i64* %maxreqhost10, i64 0)
  %35 = load %struct.httpd_conn** %hc.addr, align 8
  %hostdir = getelementptr inbounds %struct.httpd_conn* %35, i32 0, i32 29
  %36 = load %struct.httpd_conn** %hc.addr, align 8
  %maxhostdir11 = getelementptr inbounds %struct.httpd_conn* %36, i32 0, i32 42
  call void @httpd_realloc_str(i8** %hostdir, i64* %maxhostdir11, i64 0)
  %37 = load %struct.httpd_conn** %hc.addr, align 8
  %remoteuser = getelementptr inbounds %struct.httpd_conn* %37, i32 0, i32 31
  %38 = load %struct.httpd_conn** %hc.addr, align 8
  %maxremoteuser12 = getelementptr inbounds %struct.httpd_conn* %38, i32 0, i32 43
  call void @httpd_realloc_str(i8** %remoteuser, i64* %maxremoteuser12, i64 0)
  %39 = load %struct.httpd_conn** %hc.addr, align 8
  %response = getelementptr inbounds %struct.httpd_conn* %39, i32 0, i32 32
  %40 = load %struct.httpd_conn** %hc.addr, align 8
  %maxresponse13 = getelementptr inbounds %struct.httpd_conn* %40, i32 0, i32 44
  call void @httpd_realloc_str(i8** %response, i64* %maxresponse13, i64 0)
  %41 = load %struct.httpd_conn** %hc.addr, align 8
  %initialized14 = getelementptr inbounds %struct.httpd_conn* %41, i32 0, i32 0
  store i32 1, i32* %initialized14, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 128, i32* %sz, align 4
  %42 = load i32* %listen_fd.addr, align 4
  %sa15 = bitcast %union.httpd_sockaddr* %sa to %struct.sockaddr*
  %call = call i32 @accept(i32 %42, %struct.sockaddr* %sa15, i32* %sz)
  %43 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd = getelementptr inbounds %struct.httpd_conn* %43, i32 0, i32 60
  store i32 %call, i32* %conn_fd, align 4
  %44 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd16 = getelementptr inbounds %struct.httpd_conn* %44, i32 0, i32 60
  %45 = load i32* %conn_fd16, align 4
  %cmp = icmp slt i32 %45, 0
  br i1 %cmp, label %if.then17, label %if.end26

if.then17:                                        ; preds = %if.end
  %call18 = call i32* @__errno_location() #10
  %46 = load i32* %call18, align 4
  %cmp19 = icmp eq i32 %46, 11
  br i1 %cmp19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.then17
  store i32 2, i32* %retval
  br label %return

if.end21:                                         ; preds = %if.then17
  %call22 = call i32* @__errno_location() #10
  %47 = load i32* %call22, align 4
  %cmp23 = icmp ne i32 %47, 103
  br i1 %cmp23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.end21
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([12 x i8]* @.str24168, i32 0, i32 0))
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %if.end21
  store i32 0, i32* %retval
  br label %return

if.end26:                                         ; preds = %if.end
  %call27 = call i32 @sockaddr_check(%union.httpd_sockaddr* %sa)
  %tobool28 = icmp ne i32 %call27, 0
  br i1 %tobool28, label %if.end33, label %if.then29

if.then29:                                        ; preds = %if.end26
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([24 x i8]* @.str25169, i32 0, i32 0))
  %48 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd30 = getelementptr inbounds %struct.httpd_conn* %48, i32 0, i32 60
  %49 = load i32* %conn_fd30, align 4
  %call31 = call i32 @close(i32 %49)
  %50 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd32 = getelementptr inbounds %struct.httpd_conn* %50, i32 0, i32 60
  store i32 -1, i32* %conn_fd32, align 4
  store i32 0, i32* %retval
  br label %return

if.end33:                                         ; preds = %if.end26
  %51 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd34 = getelementptr inbounds %struct.httpd_conn* %51, i32 0, i32 60
  %52 = load i32* %conn_fd34, align 4
  %call35 = call i32 (i32, i32, ...)* @fcntl(i32 %52, i32 2, i32 1)
  %53 = load %struct.httpd_server** %hs.addr, align 8
  %54 = load %struct.httpd_conn** %hc.addr, align 8
  %hs36 = getelementptr inbounds %struct.httpd_conn* %54, i32 0, i32 1
  store %struct.httpd_server* %53, %struct.httpd_server** %hs36, align 8
  %55 = load %struct.httpd_conn** %hc.addr, align 8
  %client_addr = getelementptr inbounds %struct.httpd_conn* %55, i32 0, i32 2
  %56 = bitcast %union.httpd_sockaddr* %client_addr to i8*
  call void @llvm.memset.p0i8.i64(i8* %56, i8 0, i64 128, i32 8, i1 false)
  %57 = load %struct.httpd_conn** %hc.addr, align 8
  %client_addr37 = getelementptr inbounds %struct.httpd_conn* %57, i32 0, i32 2
  %58 = bitcast %union.httpd_sockaddr* %client_addr37 to i8*
  %59 = bitcast %union.httpd_sockaddr* %sa to i8*
  %call38 = call i64 @sockaddr_len(%union.httpd_sockaddr* %sa)
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %58, i8* %59, i64 %call38, i32 8, i1 false)
  %60 = load %struct.httpd_conn** %hc.addr, align 8
  %read_idx = getelementptr inbounds %struct.httpd_conn* %60, i32 0, i32 5
  store i64 0, i64* %read_idx, align 8
  %61 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_idx = getelementptr inbounds %struct.httpd_conn* %61, i32 0, i32 6
  store i64 0, i64* %checked_idx, align 8
  %62 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_state = getelementptr inbounds %struct.httpd_conn* %62, i32 0, i32 7
  store i32 0, i32* %checked_state, align 4
  %63 = load %struct.httpd_conn** %hc.addr, align 8
  %method = getelementptr inbounds %struct.httpd_conn* %63, i32 0, i32 8
  store i32 0, i32* %method, align 4
  %64 = load %struct.httpd_conn** %hc.addr, align 8
  %status = getelementptr inbounds %struct.httpd_conn* %64, i32 0, i32 9
  store i32 0, i32* %status, align 4
  %65 = load %struct.httpd_conn** %hc.addr, align 8
  %bytes_to_send = getelementptr inbounds %struct.httpd_conn* %65, i32 0, i32 10
  store i64 0, i64* %bytes_to_send, align 8
  %66 = load %struct.httpd_conn** %hc.addr, align 8
  %bytes_sent = getelementptr inbounds %struct.httpd_conn* %66, i32 0, i32 11
  store i64 0, i64* %bytes_sent, align 8
  %67 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl = getelementptr inbounds %struct.httpd_conn* %67, i32 0, i32 12
  store i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8** %encodedurl, align 8
  %68 = load %struct.httpd_conn** %hc.addr, align 8
  %decodedurl39 = getelementptr inbounds %struct.httpd_conn* %68, i32 0, i32 13
  %69 = load i8** %decodedurl39, align 8
  %arrayidx = getelementptr inbounds i8* %69, i64 0
  store i8 0, i8* %arrayidx, align 1
  %70 = load %struct.httpd_conn** %hc.addr, align 8
  %protocol = getelementptr inbounds %struct.httpd_conn* %70, i32 0, i32 14
  store i8* getelementptr inbounds ([8 x i8]* @.str23167, i32 0, i32 0), i8** %protocol, align 8
  %71 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename40 = getelementptr inbounds %struct.httpd_conn* %71, i32 0, i32 15
  %72 = load i8** %origfilename40, align 8
  %arrayidx41 = getelementptr inbounds i8* %72, i64 0
  store i8 0, i8* %arrayidx41, align 1
  %73 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename42 = getelementptr inbounds %struct.httpd_conn* %73, i32 0, i32 16
  %74 = load i8** %expnfilename42, align 8
  %arrayidx43 = getelementptr inbounds i8* %74, i64 0
  store i8 0, i8* %arrayidx43, align 1
  %75 = load %struct.httpd_conn** %hc.addr, align 8
  %encodings44 = getelementptr inbounds %struct.httpd_conn* %75, i32 0, i32 17
  %76 = load i8** %encodings44, align 8
  %arrayidx45 = getelementptr inbounds i8* %76, i64 0
  store i8 0, i8* %arrayidx45, align 1
  %77 = load %struct.httpd_conn** %hc.addr, align 8
  %pathinfo46 = getelementptr inbounds %struct.httpd_conn* %77, i32 0, i32 18
  %78 = load i8** %pathinfo46, align 8
  %arrayidx47 = getelementptr inbounds i8* %78, i64 0
  store i8 0, i8* %arrayidx47, align 1
  %79 = load %struct.httpd_conn** %hc.addr, align 8
  %query48 = getelementptr inbounds %struct.httpd_conn* %79, i32 0, i32 19
  %80 = load i8** %query48, align 8
  %arrayidx49 = getelementptr inbounds i8* %80, i64 0
  store i8 0, i8* %arrayidx49, align 1
  %81 = load %struct.httpd_conn** %hc.addr, align 8
  %referrer = getelementptr inbounds %struct.httpd_conn* %81, i32 0, i32 20
  store i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8** %referrer, align 8
  %82 = load %struct.httpd_conn** %hc.addr, align 8
  %useragent = getelementptr inbounds %struct.httpd_conn* %82, i32 0, i32 21
  store i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8** %useragent, align 8
  %83 = load %struct.httpd_conn** %hc.addr, align 8
  %accept50 = getelementptr inbounds %struct.httpd_conn* %83, i32 0, i32 22
  %84 = load i8** %accept50, align 8
  %arrayidx51 = getelementptr inbounds i8* %84, i64 0
  store i8 0, i8* %arrayidx51, align 1
  %85 = load %struct.httpd_conn** %hc.addr, align 8
  %accepte52 = getelementptr inbounds %struct.httpd_conn* %85, i32 0, i32 23
  %86 = load i8** %accepte52, align 8
  %arrayidx53 = getelementptr inbounds i8* %86, i64 0
  store i8 0, i8* %arrayidx53, align 1
  %87 = load %struct.httpd_conn** %hc.addr, align 8
  %acceptl = getelementptr inbounds %struct.httpd_conn* %87, i32 0, i32 24
  store i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8** %acceptl, align 8
  %88 = load %struct.httpd_conn** %hc.addr, align 8
  %cookie = getelementptr inbounds %struct.httpd_conn* %88, i32 0, i32 25
  store i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8** %cookie, align 8
  %89 = load %struct.httpd_conn** %hc.addr, align 8
  %contenttype = getelementptr inbounds %struct.httpd_conn* %89, i32 0, i32 26
  store i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8** %contenttype, align 8
  %90 = load %struct.httpd_conn** %hc.addr, align 8
  %reqhost54 = getelementptr inbounds %struct.httpd_conn* %90, i32 0, i32 27
  %91 = load i8** %reqhost54, align 8
  %arrayidx55 = getelementptr inbounds i8* %91, i64 0
  store i8 0, i8* %arrayidx55, align 1
  %92 = load %struct.httpd_conn** %hc.addr, align 8
  %hdrhost = getelementptr inbounds %struct.httpd_conn* %92, i32 0, i32 28
  store i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8** %hdrhost, align 8
  %93 = load %struct.httpd_conn** %hc.addr, align 8
  %hostdir56 = getelementptr inbounds %struct.httpd_conn* %93, i32 0, i32 29
  %94 = load i8** %hostdir56, align 8
  %arrayidx57 = getelementptr inbounds i8* %94, i64 0
  store i8 0, i8* %arrayidx57, align 1
  %95 = load %struct.httpd_conn** %hc.addr, align 8
  %authorization = getelementptr inbounds %struct.httpd_conn* %95, i32 0, i32 30
  store i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8** %authorization, align 8
  %96 = load %struct.httpd_conn** %hc.addr, align 8
  %remoteuser58 = getelementptr inbounds %struct.httpd_conn* %96, i32 0, i32 31
  %97 = load i8** %remoteuser58, align 8
  %arrayidx59 = getelementptr inbounds i8* %97, i64 0
  store i8 0, i8* %arrayidx59, align 1
  %98 = load %struct.httpd_conn** %hc.addr, align 8
  %response60 = getelementptr inbounds %struct.httpd_conn* %98, i32 0, i32 32
  %99 = load i8** %response60, align 8
  %arrayidx61 = getelementptr inbounds i8* %99, i64 0
  store i8 0, i8* %arrayidx61, align 1
  %100 = load %struct.httpd_conn** %hc.addr, align 8
  %responselen = getelementptr inbounds %struct.httpd_conn* %100, i32 0, i32 45
  store i64 0, i64* %responselen, align 8
  %101 = load %struct.httpd_conn** %hc.addr, align 8
  %if_modified_since = getelementptr inbounds %struct.httpd_conn* %101, i32 0, i32 46
  store i64 -1, i64* %if_modified_since, align 8
  %102 = load %struct.httpd_conn** %hc.addr, align 8
  %range_if = getelementptr inbounds %struct.httpd_conn* %102, i32 0, i32 47
  store i64 -1, i64* %range_if, align 8
  %103 = load %struct.httpd_conn** %hc.addr, align 8
  %contentlength = getelementptr inbounds %struct.httpd_conn* %103, i32 0, i32 48
  store i64 -1, i64* %contentlength, align 8
  %104 = load %struct.httpd_conn** %hc.addr, align 8
  %type = getelementptr inbounds %struct.httpd_conn* %104, i32 0, i32 49
  store i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8** %type, align 8
  %105 = load %struct.httpd_conn** %hc.addr, align 8
  %hostname = getelementptr inbounds %struct.httpd_conn* %105, i32 0, i32 50
  store i8* null, i8** %hostname, align 8
  %106 = load %struct.httpd_conn** %hc.addr, align 8
  %mime_flag = getelementptr inbounds %struct.httpd_conn* %106, i32 0, i32 51
  store i32 1, i32* %mime_flag, align 4
  %107 = load %struct.httpd_conn** %hc.addr, align 8
  %one_one = getelementptr inbounds %struct.httpd_conn* %107, i32 0, i32 52
  store i32 0, i32* %one_one, align 4
  %108 = load %struct.httpd_conn** %hc.addr, align 8
  %got_range = getelementptr inbounds %struct.httpd_conn* %108, i32 0, i32 53
  store i32 0, i32* %got_range, align 4
  %109 = load %struct.httpd_conn** %hc.addr, align 8
  %tildemapped = getelementptr inbounds %struct.httpd_conn* %109, i32 0, i32 54
  store i32 0, i32* %tildemapped, align 4
  %110 = load %struct.httpd_conn** %hc.addr, align 8
  %first_byte_index = getelementptr inbounds %struct.httpd_conn* %110, i32 0, i32 55
  store i64 0, i64* %first_byte_index, align 8
  %111 = load %struct.httpd_conn** %hc.addr, align 8
  %last_byte_index = getelementptr inbounds %struct.httpd_conn* %111, i32 0, i32 56
  store i64 -1, i64* %last_byte_index, align 8
  %112 = load %struct.httpd_conn** %hc.addr, align 8
  %keep_alive = getelementptr inbounds %struct.httpd_conn* %112, i32 0, i32 57
  store i32 0, i32* %keep_alive, align 4
  %113 = load %struct.httpd_conn** %hc.addr, align 8
  %should_linger = getelementptr inbounds %struct.httpd_conn* %113, i32 0, i32 58
  store i32 0, i32* %should_linger, align 4
  %114 = load %struct.httpd_conn** %hc.addr, align 8
  %file_address = getelementptr inbounds %struct.httpd_conn* %114, i32 0, i32 61
  store i8* null, i8** %file_address, align 8
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end33, %if.then29, %if.end25, %if.then20
  %115 = load i32* %retval
  ret i32 %115
}

declare i32 @accept(i32, %struct.sockaddr*, i32*) #2

; Function Attrs: nounwind uwtable
define internal i32 @httpd_got_request(%struct.httpd_conn* %hc) #0 {
entry:
  %retval = alloca i32, align 4
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %c = alloca i8, align 1
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_idx = getelementptr inbounds %struct.httpd_conn* %0, i32 0, i32 6
  %1 = load i64* %checked_idx, align 8
  %2 = load %struct.httpd_conn** %hc.addr, align 8
  %read_idx = getelementptr inbounds %struct.httpd_conn* %2, i32 0, i32 5
  %3 = load i64* %read_idx, align 8
  %cmp = icmp ult i64 %1, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_idx1 = getelementptr inbounds %struct.httpd_conn* %4, i32 0, i32 6
  %5 = load i64* %checked_idx1, align 8
  %6 = load %struct.httpd_conn** %hc.addr, align 8
  %read_buf = getelementptr inbounds %struct.httpd_conn* %6, i32 0, i32 3
  %7 = load i8** %read_buf, align 8
  %arrayidx = getelementptr inbounds i8* %7, i64 %5
  %8 = load i8* %arrayidx, align 1
  store i8 %8, i8* %c, align 1
  %9 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_state = getelementptr inbounds %struct.httpd_conn* %9, i32 0, i32 7
  %10 = load i32* %checked_state, align 4
  switch i32 %10, label %sw.epilog84 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb6
    i32 2, label %sw.bb13
    i32 3, label %sw.bb19
    i32 4, label %sw.bb27
    i32 5, label %sw.bb36
    i32 6, label %sw.bb46
    i32 7, label %sw.bb53
    i32 8, label %sw.bb61
    i32 9, label %sw.bb69
    i32 10, label %sw.bb77
    i32 11, label %sw.bb83
  ]

sw.bb:                                            ; preds = %for.body
  %11 = load i8* %c, align 1
  %conv = sext i8 %11 to i32
  switch i32 %conv, label %sw.epilog [
    i32 32, label %sw.bb2
    i32 9, label %sw.bb2
    i32 10, label %sw.bb4
    i32 13, label %sw.bb4
  ]

sw.bb2:                                           ; preds = %sw.bb, %sw.bb
  %12 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_state3 = getelementptr inbounds %struct.httpd_conn* %12, i32 0, i32 7
  store i32 1, i32* %checked_state3, align 4
  br label %sw.epilog

sw.bb4:                                           ; preds = %sw.bb, %sw.bb
  %13 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_state5 = getelementptr inbounds %struct.httpd_conn* %13, i32 0, i32 7
  store i32 11, i32* %checked_state5, align 4
  store i32 2, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb2, %sw.bb
  br label %sw.epilog84

sw.bb6:                                           ; preds = %for.body
  %14 = load i8* %c, align 1
  %conv7 = sext i8 %14 to i32
  switch i32 %conv7, label %sw.default [
    i32 32, label %sw.bb8
    i32 9, label %sw.bb8
    i32 10, label %sw.bb9
    i32 13, label %sw.bb9
  ]

sw.bb8:                                           ; preds = %sw.bb6, %sw.bb6
  br label %sw.epilog12

sw.bb9:                                           ; preds = %sw.bb6, %sw.bb6
  %15 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_state10 = getelementptr inbounds %struct.httpd_conn* %15, i32 0, i32 7
  store i32 11, i32* %checked_state10, align 4
  store i32 2, i32* %retval
  br label %return

sw.default:                                       ; preds = %sw.bb6
  %16 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_state11 = getelementptr inbounds %struct.httpd_conn* %16, i32 0, i32 7
  store i32 2, i32* %checked_state11, align 4
  br label %sw.epilog12

sw.epilog12:                                      ; preds = %sw.default, %sw.bb8
  br label %sw.epilog84

sw.bb13:                                          ; preds = %for.body
  %17 = load i8* %c, align 1
  %conv14 = sext i8 %17 to i32
  switch i32 %conv14, label %sw.epilog18 [
    i32 32, label %sw.bb15
    i32 9, label %sw.bb15
    i32 10, label %sw.bb17
    i32 13, label %sw.bb17
  ]

sw.bb15:                                          ; preds = %sw.bb13, %sw.bb13
  %18 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_state16 = getelementptr inbounds %struct.httpd_conn* %18, i32 0, i32 7
  store i32 3, i32* %checked_state16, align 4
  br label %sw.epilog18

sw.bb17:                                          ; preds = %sw.bb13, %sw.bb13
  store i32 1, i32* %retval
  br label %return

sw.epilog18:                                      ; preds = %sw.bb15, %sw.bb13
  br label %sw.epilog84

sw.bb19:                                          ; preds = %for.body
  %19 = load i8* %c, align 1
  %conv20 = sext i8 %19 to i32
  switch i32 %conv20, label %sw.default24 [
    i32 32, label %sw.bb21
    i32 9, label %sw.bb21
    i32 10, label %sw.bb22
    i32 13, label %sw.bb22
  ]

sw.bb21:                                          ; preds = %sw.bb19, %sw.bb19
  br label %sw.epilog26

sw.bb22:                                          ; preds = %sw.bb19, %sw.bb19
  %20 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_state23 = getelementptr inbounds %struct.httpd_conn* %20, i32 0, i32 7
  store i32 11, i32* %checked_state23, align 4
  store i32 2, i32* %retval
  br label %return

sw.default24:                                     ; preds = %sw.bb19
  %21 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_state25 = getelementptr inbounds %struct.httpd_conn* %21, i32 0, i32 7
  store i32 4, i32* %checked_state25, align 4
  br label %sw.epilog26

sw.epilog26:                                      ; preds = %sw.default24, %sw.bb21
  br label %sw.epilog84

sw.bb27:                                          ; preds = %for.body
  %22 = load i8* %c, align 1
  %conv28 = sext i8 %22 to i32
  switch i32 %conv28, label %sw.epilog35 [
    i32 32, label %sw.bb29
    i32 9, label %sw.bb29
    i32 10, label %sw.bb31
    i32 13, label %sw.bb33
  ]

sw.bb29:                                          ; preds = %sw.bb27, %sw.bb27
  %23 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_state30 = getelementptr inbounds %struct.httpd_conn* %23, i32 0, i32 7
  store i32 5, i32* %checked_state30, align 4
  br label %sw.epilog35

sw.bb31:                                          ; preds = %sw.bb27
  %24 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_state32 = getelementptr inbounds %struct.httpd_conn* %24, i32 0, i32 7
  store i32 7, i32* %checked_state32, align 4
  br label %sw.epilog35

sw.bb33:                                          ; preds = %sw.bb27
  %25 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_state34 = getelementptr inbounds %struct.httpd_conn* %25, i32 0, i32 7
  store i32 8, i32* %checked_state34, align 4
  br label %sw.epilog35

sw.epilog35:                                      ; preds = %sw.bb33, %sw.bb31, %sw.bb29, %sw.bb27
  br label %sw.epilog84

sw.bb36:                                          ; preds = %for.body
  %26 = load i8* %c, align 1
  %conv37 = sext i8 %26 to i32
  switch i32 %conv37, label %sw.default43 [
    i32 32, label %sw.bb38
    i32 9, label %sw.bb38
    i32 10, label %sw.bb39
    i32 13, label %sw.bb41
  ]

sw.bb38:                                          ; preds = %sw.bb36, %sw.bb36
  br label %sw.epilog45

sw.bb39:                                          ; preds = %sw.bb36
  %27 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_state40 = getelementptr inbounds %struct.httpd_conn* %27, i32 0, i32 7
  store i32 7, i32* %checked_state40, align 4
  br label %sw.epilog45

sw.bb41:                                          ; preds = %sw.bb36
  %28 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_state42 = getelementptr inbounds %struct.httpd_conn* %28, i32 0, i32 7
  store i32 8, i32* %checked_state42, align 4
  br label %sw.epilog45

sw.default43:                                     ; preds = %sw.bb36
  %29 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_state44 = getelementptr inbounds %struct.httpd_conn* %29, i32 0, i32 7
  store i32 11, i32* %checked_state44, align 4
  store i32 2, i32* %retval
  br label %return

sw.epilog45:                                      ; preds = %sw.bb41, %sw.bb39, %sw.bb38
  br label %sw.epilog84

sw.bb46:                                          ; preds = %for.body
  %30 = load i8* %c, align 1
  %conv47 = sext i8 %30 to i32
  switch i32 %conv47, label %sw.epilog52 [
    i32 10, label %sw.bb48
    i32 13, label %sw.bb50
  ]

sw.bb48:                                          ; preds = %sw.bb46
  %31 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_state49 = getelementptr inbounds %struct.httpd_conn* %31, i32 0, i32 7
  store i32 7, i32* %checked_state49, align 4
  br label %sw.epilog52

sw.bb50:                                          ; preds = %sw.bb46
  %32 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_state51 = getelementptr inbounds %struct.httpd_conn* %32, i32 0, i32 7
  store i32 8, i32* %checked_state51, align 4
  br label %sw.epilog52

sw.epilog52:                                      ; preds = %sw.bb50, %sw.bb48, %sw.bb46
  br label %sw.epilog84

sw.bb53:                                          ; preds = %for.body
  %33 = load i8* %c, align 1
  %conv54 = sext i8 %33 to i32
  switch i32 %conv54, label %sw.default58 [
    i32 10, label %sw.bb55
    i32 13, label %sw.bb56
  ]

sw.bb55:                                          ; preds = %sw.bb53
  store i32 1, i32* %retval
  br label %return

sw.bb56:                                          ; preds = %sw.bb53
  %34 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_state57 = getelementptr inbounds %struct.httpd_conn* %34, i32 0, i32 7
  store i32 8, i32* %checked_state57, align 4
  br label %sw.epilog60

sw.default58:                                     ; preds = %sw.bb53
  %35 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_state59 = getelementptr inbounds %struct.httpd_conn* %35, i32 0, i32 7
  store i32 6, i32* %checked_state59, align 4
  br label %sw.epilog60

sw.epilog60:                                      ; preds = %sw.default58, %sw.bb56
  br label %sw.epilog84

sw.bb61:                                          ; preds = %for.body
  %36 = load i8* %c, align 1
  %conv62 = sext i8 %36 to i32
  switch i32 %conv62, label %sw.default66 [
    i32 10, label %sw.bb63
    i32 13, label %sw.bb65
  ]

sw.bb63:                                          ; preds = %sw.bb61
  %37 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_state64 = getelementptr inbounds %struct.httpd_conn* %37, i32 0, i32 7
  store i32 9, i32* %checked_state64, align 4
  br label %sw.epilog68

sw.bb65:                                          ; preds = %sw.bb61
  store i32 1, i32* %retval
  br label %return

sw.default66:                                     ; preds = %sw.bb61
  %38 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_state67 = getelementptr inbounds %struct.httpd_conn* %38, i32 0, i32 7
  store i32 6, i32* %checked_state67, align 4
  br label %sw.epilog68

sw.epilog68:                                      ; preds = %sw.default66, %sw.bb63
  br label %sw.epilog84

sw.bb69:                                          ; preds = %for.body
  %39 = load i8* %c, align 1
  %conv70 = sext i8 %39 to i32
  switch i32 %conv70, label %sw.default74 [
    i32 10, label %sw.bb71
    i32 13, label %sw.bb72
  ]

sw.bb71:                                          ; preds = %sw.bb69
  store i32 1, i32* %retval
  br label %return

sw.bb72:                                          ; preds = %sw.bb69
  %40 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_state73 = getelementptr inbounds %struct.httpd_conn* %40, i32 0, i32 7
  store i32 10, i32* %checked_state73, align 4
  br label %sw.epilog76

sw.default74:                                     ; preds = %sw.bb69
  %41 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_state75 = getelementptr inbounds %struct.httpd_conn* %41, i32 0, i32 7
  store i32 6, i32* %checked_state75, align 4
  br label %sw.epilog76

sw.epilog76:                                      ; preds = %sw.default74, %sw.bb72
  br label %sw.epilog84

sw.bb77:                                          ; preds = %for.body
  %42 = load i8* %c, align 1
  %conv78 = sext i8 %42 to i32
  switch i32 %conv78, label %sw.default80 [
    i32 10, label %sw.bb79
    i32 13, label %sw.bb79
  ]

sw.bb79:                                          ; preds = %sw.bb77, %sw.bb77
  store i32 1, i32* %retval
  br label %return

sw.default80:                                     ; preds = %sw.bb77
  %43 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_state81 = getelementptr inbounds %struct.httpd_conn* %43, i32 0, i32 7
  store i32 6, i32* %checked_state81, align 4
  br label %sw.epilog82

sw.epilog82:                                      ; preds = %sw.default80
  br label %sw.epilog84

sw.bb83:                                          ; preds = %for.body
  store i32 2, i32* %retval
  br label %return

sw.epilog84:                                      ; preds = %sw.epilog82, %sw.epilog76, %sw.epilog68, %sw.epilog60, %sw.epilog52, %sw.epilog45, %sw.epilog35, %sw.epilog26, %sw.epilog18, %sw.epilog12, %sw.epilog, %for.body
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog84
  %44 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_idx85 = getelementptr inbounds %struct.httpd_conn* %44, i32 0, i32 6
  %45 = load i64* %checked_idx85, align 8
  %inc = add i64 %45, 1
  store i64 %inc, i64* %checked_idx85, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %sw.bb83, %sw.bb79, %sw.bb71, %sw.bb65, %sw.bb55, %sw.default43, %sw.bb22, %sw.bb17, %sw.bb9, %sw.bb4
  %46 = load i32* %retval
  ret i32 %46
}

; Function Attrs: nounwind uwtable
define internal i32 @httpd_parse_request(%struct.httpd_conn* %hc) #0 {
entry:
  %retval = alloca i32, align 4
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %buf = alloca i8*, align 8
  %method_str = alloca i8*, align 8
  %url = alloca i8*, align 8
  %protocol = alloca i8*, align 8
  %reqhost = alloca i8*, align 8
  %eol = alloca i8*, align 8
  %cp = alloca i8*, align 8
  %pi = alloca i8*, align 8
  %cp_dash = alloca i8*, align 8
  %i = alloca i32, align 4
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  %0 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_idx = getelementptr inbounds %struct.httpd_conn* %0, i32 0, i32 6
  store i64 0, i64* %checked_idx, align 8
  %1 = load %struct.httpd_conn** %hc.addr, align 8
  %call = call i8* @bufgets(%struct.httpd_conn* %1)
  store i8* %call, i8** %method_str, align 8
  %2 = load i8** %method_str, align 8
  %call1 = call i8* @strpbrk(i8* %2, i8* getelementptr inbounds ([5 x i8]* @.str27171, i32 0, i32 0)) #8
  store i8* %call1, i8** %url, align 8
  %3 = load i8** %url, align 8
  %cmp = icmp eq i8* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.httpd_conn** %hc.addr, align 8
  %5 = load i8** @httpd_err400title, align 8
  %6 = load i8** @httpd_err400form, align 8
  call void @httpd_send_err(%struct.httpd_conn* %4, i32 400, i8* %5, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %6, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %7 = load i8** %url, align 8
  %incdec.ptr = getelementptr inbounds i8* %7, i32 1
  store i8* %incdec.ptr, i8** %url, align 8
  store i8 0, i8* %7, align 1
  %8 = load i8** %url, align 8
  %call2 = call i64 @strspn(i8* %8, i8* getelementptr inbounds ([5 x i8]* @.str27171, i32 0, i32 0)) #8
  %9 = load i8** %url, align 8
  %add.ptr = getelementptr inbounds i8* %9, i64 %call2
  store i8* %add.ptr, i8** %url, align 8
  %10 = load i8** %url, align 8
  %call3 = call i8* @strpbrk(i8* %10, i8* getelementptr inbounds ([5 x i8]* @.str27171, i32 0, i32 0)) #8
  store i8* %call3, i8** %protocol, align 8
  %11 = load i8** %protocol, align 8
  %cmp4 = icmp eq i8* %11, null
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  store i8* getelementptr inbounds ([9 x i8]* @.str28172, i32 0, i32 0), i8** %protocol, align 8
  %12 = load %struct.httpd_conn** %hc.addr, align 8
  %mime_flag = getelementptr inbounds %struct.httpd_conn* %12, i32 0, i32 51
  store i32 0, i32* %mime_flag, align 4
  br label %if.end23

if.else:                                          ; preds = %if.end
  %13 = load i8** %protocol, align 8
  %incdec.ptr6 = getelementptr inbounds i8* %13, i32 1
  store i8* %incdec.ptr6, i8** %protocol, align 8
  store i8 0, i8* %13, align 1
  %14 = load i8** %protocol, align 8
  %call7 = call i64 @strspn(i8* %14, i8* getelementptr inbounds ([5 x i8]* @.str27171, i32 0, i32 0)) #8
  %15 = load i8** %protocol, align 8
  %add.ptr8 = getelementptr inbounds i8* %15, i64 %call7
  store i8* %add.ptr8, i8** %protocol, align 8
  %16 = load i8** %protocol, align 8
  %17 = load i8* %16, align 1
  %conv = sext i8 %17 to i32
  %cmp9 = icmp ne i32 %conv, 0
  br i1 %cmp9, label %if.then11, label %if.end22

if.then11:                                        ; preds = %if.else
  %18 = load i8** %protocol, align 8
  %call12 = call i8* @strpbrk(i8* %18, i8* getelementptr inbounds ([5 x i8]* @.str27171, i32 0, i32 0)) #8
  store i8* %call12, i8** %eol, align 8
  %19 = load i8** %eol, align 8
  %cmp13 = icmp ne i8* %19, null
  br i1 %cmp13, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.then11
  %20 = load i8** %eol, align 8
  store i8 0, i8* %20, align 1
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %if.then11
  %21 = load i8** %protocol, align 8
  %call17 = call i32 @strcasecmp(i8* %21, i8* getelementptr inbounds ([9 x i8]* @.str29173, i32 0, i32 0)) #8
  %cmp18 = icmp ne i32 %call17, 0
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end16
  %22 = load %struct.httpd_conn** %hc.addr, align 8
  %one_one = getelementptr inbounds %struct.httpd_conn* %22, i32 0, i32 52
  store i32 1, i32* %one_one, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then20, %if.end16
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.else
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %if.then5
  %23 = load i8** %protocol, align 8
  %24 = load %struct.httpd_conn** %hc.addr, align 8
  %protocol24 = getelementptr inbounds %struct.httpd_conn* %24, i32 0, i32 14
  store i8* %23, i8** %protocol24, align 8
  %25 = load i8** %url, align 8
  %call25 = call i32 @strncasecmp(i8* %25, i8* getelementptr inbounds ([8 x i8]* @.str30174, i32 0, i32 0), i64 7) #8
  %cmp26 = icmp eq i32 %call25, 0
  br i1 %cmp26, label %if.then28, label %if.end50

if.then28:                                        ; preds = %if.end23
  %26 = load %struct.httpd_conn** %hc.addr, align 8
  %one_one29 = getelementptr inbounds %struct.httpd_conn* %26, i32 0, i32 52
  %27 = load i32* %one_one29, align 4
  %tobool = icmp ne i32 %27, 0
  br i1 %tobool, label %if.end31, label %if.then30

if.then30:                                        ; preds = %if.then28
  %28 = load %struct.httpd_conn** %hc.addr, align 8
  %29 = load i8** @httpd_err400title, align 8
  %30 = load i8** @httpd_err400form, align 8
  call void @httpd_send_err(%struct.httpd_conn* %28, i32 400, i8* %29, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %30, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end31:                                         ; preds = %if.then28
  %31 = load i8** %url, align 8
  %add.ptr32 = getelementptr inbounds i8* %31, i64 7
  store i8* %add.ptr32, i8** %reqhost, align 8
  %32 = load i8** %reqhost, align 8
  %call33 = call i8* @strchr(i8* %32, i32 47) #8
  store i8* %call33, i8** %url, align 8
  %33 = load i8** %url, align 8
  %cmp34 = icmp eq i8* %33, null
  br i1 %cmp34, label %if.then36, label %if.end37

if.then36:                                        ; preds = %if.end31
  %34 = load %struct.httpd_conn** %hc.addr, align 8
  %35 = load i8** @httpd_err400title, align 8
  %36 = load i8** @httpd_err400form, align 8
  call void @httpd_send_err(%struct.httpd_conn* %34, i32 400, i8* %35, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %36, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end37:                                         ; preds = %if.end31
  %37 = load i8** %url, align 8
  store i8 0, i8* %37, align 1
  %38 = load i8** %reqhost, align 8
  %call38 = call i8* @strchr(i8* %38, i32 47) #8
  %cmp39 = icmp ne i8* %call38, null
  br i1 %cmp39, label %if.then44, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end37
  %39 = load i8** %reqhost, align 8
  %arrayidx = getelementptr inbounds i8* %39, i64 0
  %40 = load i8* %arrayidx, align 1
  %conv41 = sext i8 %40 to i32
  %cmp42 = icmp eq i32 %conv41, 46
  br i1 %cmp42, label %if.then44, label %if.end45

if.then44:                                        ; preds = %lor.lhs.false, %if.end37
  %41 = load %struct.httpd_conn** %hc.addr, align 8
  %42 = load i8** @httpd_err400title, align 8
  %43 = load i8** @httpd_err400form, align 8
  call void @httpd_send_err(%struct.httpd_conn* %41, i32 400, i8* %42, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %43, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end45:                                         ; preds = %lor.lhs.false
  %44 = load %struct.httpd_conn** %hc.addr, align 8
  %reqhost46 = getelementptr inbounds %struct.httpd_conn* %44, i32 0, i32 27
  %45 = load %struct.httpd_conn** %hc.addr, align 8
  %maxreqhost = getelementptr inbounds %struct.httpd_conn* %45, i32 0, i32 41
  %46 = load i8** %reqhost, align 8
  %call47 = call i64 @strlen(i8* %46) #8
  call void @httpd_realloc_str(i8** %reqhost46, i64* %maxreqhost, i64 %call47)
  %47 = load %struct.httpd_conn** %hc.addr, align 8
  %reqhost48 = getelementptr inbounds %struct.httpd_conn* %47, i32 0, i32 27
  %48 = load i8** %reqhost48, align 8
  %49 = load i8** %reqhost, align 8
  %call49 = call i8* @strcpy(i8* %48, i8* %49) #5
  %50 = load i8** %url, align 8
  store i8 47, i8* %50, align 1
  br label %if.end50

if.end50:                                         ; preds = %if.end45, %if.end23
  %51 = load i8** %url, align 8
  %52 = load i8* %51, align 1
  %conv51 = sext i8 %52 to i32
  %cmp52 = icmp ne i32 %conv51, 47
  br i1 %cmp52, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.end50
  %53 = load %struct.httpd_conn** %hc.addr, align 8
  %54 = load i8** @httpd_err400title, align 8
  %55 = load i8** @httpd_err400form, align 8
  call void @httpd_send_err(%struct.httpd_conn* %53, i32 400, i8* %54, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %55, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end55:                                         ; preds = %if.end50
  %56 = load i8** %method_str, align 8
  %call56 = call i8* @httpd_method_str(i32 1)
  %call57 = call i32 @strcasecmp(i8* %56, i8* %call56) #8
  %cmp58 = icmp eq i32 %call57, 0
  br i1 %cmp58, label %if.then60, label %if.else61

if.then60:                                        ; preds = %if.end55
  %57 = load %struct.httpd_conn** %hc.addr, align 8
  %method = getelementptr inbounds %struct.httpd_conn* %57, i32 0, i32 8
  store i32 1, i32* %method, align 4
  br label %if.end78

if.else61:                                        ; preds = %if.end55
  %58 = load i8** %method_str, align 8
  %call62 = call i8* @httpd_method_str(i32 2)
  %call63 = call i32 @strcasecmp(i8* %58, i8* %call62) #8
  %cmp64 = icmp eq i32 %call63, 0
  br i1 %cmp64, label %if.then66, label %if.else68

if.then66:                                        ; preds = %if.else61
  %59 = load %struct.httpd_conn** %hc.addr, align 8
  %method67 = getelementptr inbounds %struct.httpd_conn* %59, i32 0, i32 8
  store i32 2, i32* %method67, align 4
  br label %if.end77

if.else68:                                        ; preds = %if.else61
  %60 = load i8** %method_str, align 8
  %call69 = call i8* @httpd_method_str(i32 3)
  %call70 = call i32 @strcasecmp(i8* %60, i8* %call69) #8
  %cmp71 = icmp eq i32 %call70, 0
  br i1 %cmp71, label %if.then73, label %if.else75

if.then73:                                        ; preds = %if.else68
  %61 = load %struct.httpd_conn** %hc.addr, align 8
  %method74 = getelementptr inbounds %struct.httpd_conn* %61, i32 0, i32 8
  store i32 3, i32* %method74, align 4
  br label %if.end76

if.else75:                                        ; preds = %if.else68
  %62 = load %struct.httpd_conn** %hc.addr, align 8
  %63 = load i8** @err501title, align 8
  %64 = load i8** @err501form, align 8
  %65 = load i8** %method_str, align 8
  call void @httpd_send_err(%struct.httpd_conn* %62, i32 501, i8* %63, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %64, i8* %65)
  store i32 -1, i32* %retval
  br label %return

if.end76:                                         ; preds = %if.then73
  br label %if.end77

if.end77:                                         ; preds = %if.end76, %if.then66
  br label %if.end78

if.end78:                                         ; preds = %if.end77, %if.then60
  %66 = load i8** %url, align 8
  %67 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl = getelementptr inbounds %struct.httpd_conn* %67, i32 0, i32 12
  store i8* %66, i8** %encodedurl, align 8
  %68 = load %struct.httpd_conn** %hc.addr, align 8
  %decodedurl = getelementptr inbounds %struct.httpd_conn* %68, i32 0, i32 13
  %69 = load %struct.httpd_conn** %hc.addr, align 8
  %maxdecodedurl = getelementptr inbounds %struct.httpd_conn* %69, i32 0, i32 33
  %70 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl79 = getelementptr inbounds %struct.httpd_conn* %70, i32 0, i32 12
  %71 = load i8** %encodedurl79, align 8
  %call80 = call i64 @strlen(i8* %71) #8
  call void @httpd_realloc_str(i8** %decodedurl, i64* %maxdecodedurl, i64 %call80)
  %72 = load %struct.httpd_conn** %hc.addr, align 8
  %decodedurl81 = getelementptr inbounds %struct.httpd_conn* %72, i32 0, i32 13
  %73 = load i8** %decodedurl81, align 8
  %74 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl82 = getelementptr inbounds %struct.httpd_conn* %74, i32 0, i32 12
  %75 = load i8** %encodedurl82, align 8
  call void @strdecode(i8* %73, i8* %75)
  %76 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename = getelementptr inbounds %struct.httpd_conn* %76, i32 0, i32 15
  %77 = load %struct.httpd_conn** %hc.addr, align 8
  %maxorigfilename = getelementptr inbounds %struct.httpd_conn* %77, i32 0, i32 34
  %78 = load %struct.httpd_conn** %hc.addr, align 8
  %decodedurl83 = getelementptr inbounds %struct.httpd_conn* %78, i32 0, i32 13
  %79 = load i8** %decodedurl83, align 8
  %call84 = call i64 @strlen(i8* %79) #8
  call void @httpd_realloc_str(i8** %origfilename, i64* %maxorigfilename, i64 %call84)
  %80 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename85 = getelementptr inbounds %struct.httpd_conn* %80, i32 0, i32 15
  %81 = load i8** %origfilename85, align 8
  %82 = load %struct.httpd_conn** %hc.addr, align 8
  %decodedurl86 = getelementptr inbounds %struct.httpd_conn* %82, i32 0, i32 13
  %83 = load i8** %decodedurl86, align 8
  %arrayidx87 = getelementptr inbounds i8* %83, i64 1
  %call88 = call i8* @strcpy(i8* %81, i8* %arrayidx87) #5
  %84 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename89 = getelementptr inbounds %struct.httpd_conn* %84, i32 0, i32 15
  %85 = load i8** %origfilename89, align 8
  %arrayidx90 = getelementptr inbounds i8* %85, i64 0
  %86 = load i8* %arrayidx90, align 1
  %conv91 = sext i8 %86 to i32
  %cmp92 = icmp eq i32 %conv91, 0
  br i1 %cmp92, label %if.then94, label %if.end97

if.then94:                                        ; preds = %if.end78
  %87 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename95 = getelementptr inbounds %struct.httpd_conn* %87, i32 0, i32 15
  %88 = load i8** %origfilename95, align 8
  %call96 = call i8* @strcpy(i8* %88, i8* getelementptr inbounds ([2 x i8]* @.str31175, i32 0, i32 0)) #5
  br label %if.end97

if.end97:                                         ; preds = %if.then94, %if.end78
  %89 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl98 = getelementptr inbounds %struct.httpd_conn* %89, i32 0, i32 12
  %90 = load i8** %encodedurl98, align 8
  %call99 = call i8* @strchr(i8* %90, i32 63) #8
  store i8* %call99, i8** %cp, align 8
  %91 = load i8** %cp, align 8
  %cmp100 = icmp ne i8* %91, null
  br i1 %cmp100, label %if.then102, label %if.end113

if.then102:                                       ; preds = %if.end97
  %92 = load i8** %cp, align 8
  %incdec.ptr103 = getelementptr inbounds i8* %92, i32 1
  store i8* %incdec.ptr103, i8** %cp, align 8
  %93 = load %struct.httpd_conn** %hc.addr, align 8
  %query = getelementptr inbounds %struct.httpd_conn* %93, i32 0, i32 19
  %94 = load %struct.httpd_conn** %hc.addr, align 8
  %maxquery = getelementptr inbounds %struct.httpd_conn* %94, i32 0, i32 38
  %95 = load i8** %cp, align 8
  %call104 = call i64 @strlen(i8* %95) #8
  call void @httpd_realloc_str(i8** %query, i64* %maxquery, i64 %call104)
  %96 = load %struct.httpd_conn** %hc.addr, align 8
  %query105 = getelementptr inbounds %struct.httpd_conn* %96, i32 0, i32 19
  %97 = load i8** %query105, align 8
  %98 = load i8** %cp, align 8
  %call106 = call i8* @strcpy(i8* %97, i8* %98) #5
  %99 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename107 = getelementptr inbounds %struct.httpd_conn* %99, i32 0, i32 15
  %100 = load i8** %origfilename107, align 8
  %call108 = call i8* @strchr(i8* %100, i32 63) #8
  store i8* %call108, i8** %cp, align 8
  %101 = load i8** %cp, align 8
  %cmp109 = icmp ne i8* %101, null
  br i1 %cmp109, label %if.then111, label %if.end112

if.then111:                                       ; preds = %if.then102
  %102 = load i8** %cp, align 8
  store i8 0, i8* %102, align 1
  br label %if.end112

if.end112:                                        ; preds = %if.then111, %if.then102
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %if.end97
  %103 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename114 = getelementptr inbounds %struct.httpd_conn* %103, i32 0, i32 15
  %104 = load i8** %origfilename114, align 8
  call void @de_dotdot(i8* %104)
  %105 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename115 = getelementptr inbounds %struct.httpd_conn* %105, i32 0, i32 15
  %106 = load i8** %origfilename115, align 8
  %arrayidx116 = getelementptr inbounds i8* %106, i64 0
  %107 = load i8* %arrayidx116, align 1
  %conv117 = sext i8 %107 to i32
  %cmp118 = icmp eq i32 %conv117, 47
  br i1 %cmp118, label %if.then143, label %lor.lhs.false120

lor.lhs.false120:                                 ; preds = %if.end113
  %108 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename121 = getelementptr inbounds %struct.httpd_conn* %108, i32 0, i32 15
  %109 = load i8** %origfilename121, align 8
  %arrayidx122 = getelementptr inbounds i8* %109, i64 0
  %110 = load i8* %arrayidx122, align 1
  %conv123 = sext i8 %110 to i32
  %cmp124 = icmp eq i32 %conv123, 46
  br i1 %cmp124, label %land.lhs.true, label %if.end144

land.lhs.true:                                    ; preds = %lor.lhs.false120
  %111 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename126 = getelementptr inbounds %struct.httpd_conn* %111, i32 0, i32 15
  %112 = load i8** %origfilename126, align 8
  %arrayidx127 = getelementptr inbounds i8* %112, i64 1
  %113 = load i8* %arrayidx127, align 1
  %conv128 = sext i8 %113 to i32
  %cmp129 = icmp eq i32 %conv128, 46
  br i1 %cmp129, label %land.lhs.true131, label %if.end144

land.lhs.true131:                                 ; preds = %land.lhs.true
  %114 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename132 = getelementptr inbounds %struct.httpd_conn* %114, i32 0, i32 15
  %115 = load i8** %origfilename132, align 8
  %arrayidx133 = getelementptr inbounds i8* %115, i64 2
  %116 = load i8* %arrayidx133, align 1
  %conv134 = sext i8 %116 to i32
  %cmp135 = icmp eq i32 %conv134, 0
  br i1 %cmp135, label %if.then143, label %lor.lhs.false137

lor.lhs.false137:                                 ; preds = %land.lhs.true131
  %117 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename138 = getelementptr inbounds %struct.httpd_conn* %117, i32 0, i32 15
  %118 = load i8** %origfilename138, align 8
  %arrayidx139 = getelementptr inbounds i8* %118, i64 2
  %119 = load i8* %arrayidx139, align 1
  %conv140 = sext i8 %119 to i32
  %cmp141 = icmp eq i32 %conv140, 47
  br i1 %cmp141, label %if.then143, label %if.end144

if.then143:                                       ; preds = %lor.lhs.false137, %land.lhs.true131, %if.end113
  %120 = load %struct.httpd_conn** %hc.addr, align 8
  %121 = load i8** @httpd_err400title, align 8
  %122 = load i8** @httpd_err400form, align 8
  call void @httpd_send_err(%struct.httpd_conn* %120, i32 400, i8* %121, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %122, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end144:                                        ; preds = %lor.lhs.false137, %land.lhs.true, %lor.lhs.false120
  %123 = load %struct.httpd_conn** %hc.addr, align 8
  %mime_flag145 = getelementptr inbounds %struct.httpd_conn* %123, i32 0, i32 51
  %124 = load i32* %mime_flag145, align 4
  %tobool146 = icmp ne i32 %124, 0
  br i1 %tobool146, label %if.then147, label %if.end421

if.then147:                                       ; preds = %if.end144
  br label %while.cond

while.cond:                                       ; preds = %if.end420, %if.then258, %if.then224, %if.then147
  %125 = load %struct.httpd_conn** %hc.addr, align 8
  %call148 = call i8* @bufgets(%struct.httpd_conn* %125)
  store i8* %call148, i8** %buf, align 8
  %cmp149 = icmp ne i8* %call148, null
  br i1 %cmp149, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %126 = load i8** %buf, align 8
  %arrayidx151 = getelementptr inbounds i8* %126, i64 0
  %127 = load i8* %arrayidx151, align 1
  %conv152 = sext i8 %127 to i32
  %cmp153 = icmp eq i32 %conv152, 0
  br i1 %cmp153, label %if.then155, label %if.end156

if.then155:                                       ; preds = %while.body
  br label %while.end

if.end156:                                        ; preds = %while.body
  %128 = load i8** %buf, align 8
  %call157 = call i32 @strncasecmp(i8* %128, i8* getelementptr inbounds ([9 x i8]* @.str32176, i32 0, i32 0), i64 8) #8
  %cmp158 = icmp eq i32 %call157, 0
  br i1 %cmp158, label %if.then160, label %if.else164

if.then160:                                       ; preds = %if.end156
  %129 = load i8** %buf, align 8
  %arrayidx161 = getelementptr inbounds i8* %129, i64 8
  store i8* %arrayidx161, i8** %cp, align 8
  %130 = load i8** %cp, align 8
  %call162 = call i64 @strspn(i8* %130, i8* getelementptr inbounds ([3 x i8]* @.str33177, i32 0, i32 0)) #8
  %131 = load i8** %cp, align 8
  %add.ptr163 = getelementptr inbounds i8* %131, i64 %call162
  store i8* %add.ptr163, i8** %cp, align 8
  %132 = load i8** %cp, align 8
  %133 = load %struct.httpd_conn** %hc.addr, align 8
  %referrer = getelementptr inbounds %struct.httpd_conn* %133, i32 0, i32 20
  store i8* %132, i8** %referrer, align 8
  br label %if.end420

if.else164:                                       ; preds = %if.end156
  %134 = load i8** %buf, align 8
  %call165 = call i32 @strncasecmp(i8* %134, i8* getelementptr inbounds ([10 x i8]* @.str34178, i32 0, i32 0), i64 9) #8
  %cmp166 = icmp eq i32 %call165, 0
  br i1 %cmp166, label %if.then168, label %if.else173

if.then168:                                       ; preds = %if.else164
  %135 = load i8** %buf, align 8
  %arrayidx169 = getelementptr inbounds i8* %135, i64 9
  store i8* %arrayidx169, i8** %cp, align 8
  %136 = load i8** %cp, align 8
  %call170 = call i64 @strspn(i8* %136, i8* getelementptr inbounds ([3 x i8]* @.str33177, i32 0, i32 0)) #8
  %137 = load i8** %cp, align 8
  %add.ptr171 = getelementptr inbounds i8* %137, i64 %call170
  store i8* %add.ptr171, i8** %cp, align 8
  %138 = load i8** %cp, align 8
  %139 = load %struct.httpd_conn** %hc.addr, align 8
  %referrer172 = getelementptr inbounds %struct.httpd_conn* %139, i32 0, i32 20
  store i8* %138, i8** %referrer172, align 8
  br label %if.end419

if.else173:                                       ; preds = %if.else164
  %140 = load i8** %buf, align 8
  %call174 = call i32 @strncasecmp(i8* %140, i8* getelementptr inbounds ([12 x i8]* @.str35179, i32 0, i32 0), i64 11) #8
  %cmp175 = icmp eq i32 %call174, 0
  br i1 %cmp175, label %if.then177, label %if.else181

if.then177:                                       ; preds = %if.else173
  %141 = load i8** %buf, align 8
  %arrayidx178 = getelementptr inbounds i8* %141, i64 11
  store i8* %arrayidx178, i8** %cp, align 8
  %142 = load i8** %cp, align 8
  %call179 = call i64 @strspn(i8* %142, i8* getelementptr inbounds ([3 x i8]* @.str33177, i32 0, i32 0)) #8
  %143 = load i8** %cp, align 8
  %add.ptr180 = getelementptr inbounds i8* %143, i64 %call179
  store i8* %add.ptr180, i8** %cp, align 8
  %144 = load i8** %cp, align 8
  %145 = load %struct.httpd_conn** %hc.addr, align 8
  %useragent = getelementptr inbounds %struct.httpd_conn* %145, i32 0, i32 21
  store i8* %144, i8** %useragent, align 8
  br label %if.end418

if.else181:                                       ; preds = %if.else173
  %146 = load i8** %buf, align 8
  %call182 = call i32 @strncasecmp(i8* %146, i8* getelementptr inbounds ([6 x i8]* @.str36180, i32 0, i32 0), i64 5) #8
  %cmp183 = icmp eq i32 %call182, 0
  br i1 %cmp183, label %if.then185, label %if.else207

if.then185:                                       ; preds = %if.else181
  %147 = load i8** %buf, align 8
  %arrayidx186 = getelementptr inbounds i8* %147, i64 5
  store i8* %arrayidx186, i8** %cp, align 8
  %148 = load i8** %cp, align 8
  %call187 = call i64 @strspn(i8* %148, i8* getelementptr inbounds ([3 x i8]* @.str33177, i32 0, i32 0)) #8
  %149 = load i8** %cp, align 8
  %add.ptr188 = getelementptr inbounds i8* %149, i64 %call187
  store i8* %add.ptr188, i8** %cp, align 8
  %150 = load i8** %cp, align 8
  %151 = load %struct.httpd_conn** %hc.addr, align 8
  %hdrhost = getelementptr inbounds %struct.httpd_conn* %151, i32 0, i32 28
  store i8* %150, i8** %hdrhost, align 8
  %152 = load %struct.httpd_conn** %hc.addr, align 8
  %hdrhost189 = getelementptr inbounds %struct.httpd_conn* %152, i32 0, i32 28
  %153 = load i8** %hdrhost189, align 8
  %call190 = call i8* @strchr(i8* %153, i32 58) #8
  store i8* %call190, i8** %cp, align 8
  %154 = load i8** %cp, align 8
  %cmp191 = icmp ne i8* %154, null
  br i1 %cmp191, label %if.then193, label %if.end194

if.then193:                                       ; preds = %if.then185
  %155 = load i8** %cp, align 8
  store i8 0, i8* %155, align 1
  br label %if.end194

if.end194:                                        ; preds = %if.then193, %if.then185
  %156 = load %struct.httpd_conn** %hc.addr, align 8
  %hdrhost195 = getelementptr inbounds %struct.httpd_conn* %156, i32 0, i32 28
  %157 = load i8** %hdrhost195, align 8
  %call196 = call i8* @strchr(i8* %157, i32 47) #8
  %cmp197 = icmp ne i8* %call196, null
  br i1 %cmp197, label %if.then205, label %lor.lhs.false199

lor.lhs.false199:                                 ; preds = %if.end194
  %158 = load %struct.httpd_conn** %hc.addr, align 8
  %hdrhost200 = getelementptr inbounds %struct.httpd_conn* %158, i32 0, i32 28
  %159 = load i8** %hdrhost200, align 8
  %arrayidx201 = getelementptr inbounds i8* %159, i64 0
  %160 = load i8* %arrayidx201, align 1
  %conv202 = sext i8 %160 to i32
  %cmp203 = icmp eq i32 %conv202, 46
  br i1 %cmp203, label %if.then205, label %if.end206

if.then205:                                       ; preds = %lor.lhs.false199, %if.end194
  %161 = load %struct.httpd_conn** %hc.addr, align 8
  %162 = load i8** @httpd_err400title, align 8
  %163 = load i8** @httpd_err400form, align 8
  call void @httpd_send_err(%struct.httpd_conn* %161, i32 400, i8* %162, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %163, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end206:                                        ; preds = %lor.lhs.false199
  br label %if.end417

if.else207:                                       ; preds = %if.else181
  %164 = load i8** %buf, align 8
  %call208 = call i32 @strncasecmp(i8* %164, i8* getelementptr inbounds ([8 x i8]* @.str37181, i32 0, i32 0), i64 7) #8
  %cmp209 = icmp eq i32 %call208, 0
  br i1 %cmp209, label %if.then211, label %if.else241

if.then211:                                       ; preds = %if.else207
  %165 = load i8** %buf, align 8
  %arrayidx212 = getelementptr inbounds i8* %165, i64 7
  store i8* %arrayidx212, i8** %cp, align 8
  %166 = load i8** %cp, align 8
  %call213 = call i64 @strspn(i8* %166, i8* getelementptr inbounds ([3 x i8]* @.str33177, i32 0, i32 0)) #8
  %167 = load i8** %cp, align 8
  %add.ptr214 = getelementptr inbounds i8* %167, i64 %call213
  store i8* %add.ptr214, i8** %cp, align 8
  %168 = load %struct.httpd_conn** %hc.addr, align 8
  %accept = getelementptr inbounds %struct.httpd_conn* %168, i32 0, i32 22
  %169 = load i8** %accept, align 8
  %arrayidx215 = getelementptr inbounds i8* %169, i64 0
  %170 = load i8* %arrayidx215, align 1
  %conv216 = sext i8 %170 to i32
  %cmp217 = icmp ne i32 %conv216, 0
  br i1 %cmp217, label %if.then219, label %if.else234

if.then219:                                       ; preds = %if.then211
  %171 = load %struct.httpd_conn** %hc.addr, align 8
  %accept220 = getelementptr inbounds %struct.httpd_conn* %171, i32 0, i32 22
  %172 = load i8** %accept220, align 8
  %call221 = call i64 @strlen(i8* %172) #8
  %cmp222 = icmp ugt i64 %call221, 5000
  br i1 %cmp222, label %if.then224, label %if.end226

if.then224:                                       ; preds = %if.then219
  %173 = load %struct.httpd_conn** %hc.addr, align 8
  %client_addr = getelementptr inbounds %struct.httpd_conn* %173, i32 0, i32 2
  %call225 = call i8* @httpd_ntoa(%union.httpd_sockaddr* %client_addr)
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([32 x i8]* @.str38182, i32 0, i32 0), i8* %call225)
  br label %while.cond

if.end226:                                        ; preds = %if.then219
  %174 = load %struct.httpd_conn** %hc.addr, align 8
  %accept227 = getelementptr inbounds %struct.httpd_conn* %174, i32 0, i32 22
  %175 = load %struct.httpd_conn** %hc.addr, align 8
  %maxaccept = getelementptr inbounds %struct.httpd_conn* %175, i32 0, i32 39
  %176 = load %struct.httpd_conn** %hc.addr, align 8
  %accept228 = getelementptr inbounds %struct.httpd_conn* %176, i32 0, i32 22
  %177 = load i8** %accept228, align 8
  %call229 = call i64 @strlen(i8* %177) #8
  %add = add i64 %call229, 2
  %178 = load i8** %cp, align 8
  %call230 = call i64 @strlen(i8* %178) #8
  %add231 = add i64 %add, %call230
  call void @httpd_realloc_str(i8** %accept227, i64* %maxaccept, i64 %add231)
  %179 = load %struct.httpd_conn** %hc.addr, align 8
  %accept232 = getelementptr inbounds %struct.httpd_conn* %179, i32 0, i32 22
  %180 = load i8** %accept232, align 8
  %call233 = call i8* @strcat(i8* %180, i8* getelementptr inbounds ([3 x i8]* @.str39183, i32 0, i32 0)) #5
  br label %if.end238

if.else234:                                       ; preds = %if.then211
  %181 = load %struct.httpd_conn** %hc.addr, align 8
  %accept235 = getelementptr inbounds %struct.httpd_conn* %181, i32 0, i32 22
  %182 = load %struct.httpd_conn** %hc.addr, align 8
  %maxaccept236 = getelementptr inbounds %struct.httpd_conn* %182, i32 0, i32 39
  %183 = load i8** %cp, align 8
  %call237 = call i64 @strlen(i8* %183) #8
  call void @httpd_realloc_str(i8** %accept235, i64* %maxaccept236, i64 %call237)
  br label %if.end238

if.end238:                                        ; preds = %if.else234, %if.end226
  %184 = load %struct.httpd_conn** %hc.addr, align 8
  %accept239 = getelementptr inbounds %struct.httpd_conn* %184, i32 0, i32 22
  %185 = load i8** %accept239, align 8
  %186 = load i8** %cp, align 8
  %call240 = call i8* @strcat(i8* %185, i8* %186) #5
  br label %if.end416

if.else241:                                       ; preds = %if.else207
  %187 = load i8** %buf, align 8
  %call242 = call i32 @strncasecmp(i8* %187, i8* getelementptr inbounds ([17 x i8]* @.str40184, i32 0, i32 0), i64 16) #8
  %cmp243 = icmp eq i32 %call242, 0
  br i1 %cmp243, label %if.then245, label %if.else277

if.then245:                                       ; preds = %if.else241
  %188 = load i8** %buf, align 8
  %arrayidx246 = getelementptr inbounds i8* %188, i64 16
  store i8* %arrayidx246, i8** %cp, align 8
  %189 = load i8** %cp, align 8
  %call247 = call i64 @strspn(i8* %189, i8* getelementptr inbounds ([3 x i8]* @.str33177, i32 0, i32 0)) #8
  %190 = load i8** %cp, align 8
  %add.ptr248 = getelementptr inbounds i8* %190, i64 %call247
  store i8* %add.ptr248, i8** %cp, align 8
  %191 = load %struct.httpd_conn** %hc.addr, align 8
  %accepte = getelementptr inbounds %struct.httpd_conn* %191, i32 0, i32 23
  %192 = load i8** %accepte, align 8
  %arrayidx249 = getelementptr inbounds i8* %192, i64 0
  %193 = load i8* %arrayidx249, align 1
  %conv250 = sext i8 %193 to i32
  %cmp251 = icmp ne i32 %conv250, 0
  br i1 %cmp251, label %if.then253, label %if.else270

if.then253:                                       ; preds = %if.then245
  %194 = load %struct.httpd_conn** %hc.addr, align 8
  %accepte254 = getelementptr inbounds %struct.httpd_conn* %194, i32 0, i32 23
  %195 = load i8** %accepte254, align 8
  %call255 = call i64 @strlen(i8* %195) #8
  %cmp256 = icmp ugt i64 %call255, 5000
  br i1 %cmp256, label %if.then258, label %if.end261

if.then258:                                       ; preds = %if.then253
  %196 = load %struct.httpd_conn** %hc.addr, align 8
  %client_addr259 = getelementptr inbounds %struct.httpd_conn* %196, i32 0, i32 2
  %call260 = call i8* @httpd_ntoa(%union.httpd_sockaddr* %client_addr259)
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([41 x i8]* @.str41185, i32 0, i32 0), i8* %call260)
  br label %while.cond

if.end261:                                        ; preds = %if.then253
  %197 = load %struct.httpd_conn** %hc.addr, align 8
  %accepte262 = getelementptr inbounds %struct.httpd_conn* %197, i32 0, i32 23
  %198 = load %struct.httpd_conn** %hc.addr, align 8
  %maxaccepte = getelementptr inbounds %struct.httpd_conn* %198, i32 0, i32 40
  %199 = load %struct.httpd_conn** %hc.addr, align 8
  %accepte263 = getelementptr inbounds %struct.httpd_conn* %199, i32 0, i32 23
  %200 = load i8** %accepte263, align 8
  %call264 = call i64 @strlen(i8* %200) #8
  %add265 = add i64 %call264, 2
  %201 = load i8** %cp, align 8
  %call266 = call i64 @strlen(i8* %201) #8
  %add267 = add i64 %add265, %call266
  call void @httpd_realloc_str(i8** %accepte262, i64* %maxaccepte, i64 %add267)
  %202 = load %struct.httpd_conn** %hc.addr, align 8
  %accepte268 = getelementptr inbounds %struct.httpd_conn* %202, i32 0, i32 23
  %203 = load i8** %accepte268, align 8
  %call269 = call i8* @strcat(i8* %203, i8* getelementptr inbounds ([3 x i8]* @.str39183, i32 0, i32 0)) #5
  br label %if.end274

if.else270:                                       ; preds = %if.then245
  %204 = load %struct.httpd_conn** %hc.addr, align 8
  %accepte271 = getelementptr inbounds %struct.httpd_conn* %204, i32 0, i32 23
  %205 = load %struct.httpd_conn** %hc.addr, align 8
  %maxaccepte272 = getelementptr inbounds %struct.httpd_conn* %205, i32 0, i32 40
  %206 = load i8** %cp, align 8
  %call273 = call i64 @strlen(i8* %206) #8
  call void @httpd_realloc_str(i8** %accepte271, i64* %maxaccepte272, i64 %call273)
  br label %if.end274

if.end274:                                        ; preds = %if.else270, %if.end261
  %207 = load %struct.httpd_conn** %hc.addr, align 8
  %accepte275 = getelementptr inbounds %struct.httpd_conn* %207, i32 0, i32 23
  %208 = load i8** %accepte275, align 8
  %209 = load i8** %cp, align 8
  %call276 = call i8* @strcpy(i8* %208, i8* %209) #5
  br label %if.end415

if.else277:                                       ; preds = %if.else241
  %210 = load i8** %buf, align 8
  %call278 = call i32 @strncasecmp(i8* %210, i8* getelementptr inbounds ([17 x i8]* @.str42186, i32 0, i32 0), i64 16) #8
  %cmp279 = icmp eq i32 %call278, 0
  br i1 %cmp279, label %if.then281, label %if.else285

if.then281:                                       ; preds = %if.else277
  %211 = load i8** %buf, align 8
  %arrayidx282 = getelementptr inbounds i8* %211, i64 16
  store i8* %arrayidx282, i8** %cp, align 8
  %212 = load i8** %cp, align 8
  %call283 = call i64 @strspn(i8* %212, i8* getelementptr inbounds ([3 x i8]* @.str33177, i32 0, i32 0)) #8
  %213 = load i8** %cp, align 8
  %add.ptr284 = getelementptr inbounds i8* %213, i64 %call283
  store i8* %add.ptr284, i8** %cp, align 8
  %214 = load i8** %cp, align 8
  %215 = load %struct.httpd_conn** %hc.addr, align 8
  %acceptl = getelementptr inbounds %struct.httpd_conn* %215, i32 0, i32 24
  store i8* %214, i8** %acceptl, align 8
  br label %if.end414

if.else285:                                       ; preds = %if.else277
  %216 = load i8** %buf, align 8
  %call286 = call i32 @strncasecmp(i8* %216, i8* getelementptr inbounds ([19 x i8]* @.str43187, i32 0, i32 0), i64 18) #8
  %cmp287 = icmp eq i32 %call286, 0
  br i1 %cmp287, label %if.then289, label %if.else297

if.then289:                                       ; preds = %if.else285
  %217 = load i8** %buf, align 8
  %arrayidx290 = getelementptr inbounds i8* %217, i64 18
  store i8* %arrayidx290, i8** %cp, align 8
  %218 = load i8** %cp, align 8
  %call291 = call i64 @tdate_parse(i8* %218)
  %219 = load %struct.httpd_conn** %hc.addr, align 8
  %if_modified_since = getelementptr inbounds %struct.httpd_conn* %219, i32 0, i32 46
  store i64 %call291, i64* %if_modified_since, align 8
  %220 = load %struct.httpd_conn** %hc.addr, align 8
  %if_modified_since292 = getelementptr inbounds %struct.httpd_conn* %220, i32 0, i32 46
  %221 = load i64* %if_modified_since292, align 8
  %cmp293 = icmp eq i64 %221, -1
  br i1 %cmp293, label %if.then295, label %if.end296

if.then295:                                       ; preds = %if.then289
  %222 = load i8** %cp, align 8
  call void (i32, i8*, ...)* @syslog(i32 7, i8* getelementptr inbounds ([23 x i8]* @.str44188, i32 0, i32 0), i8* %222)
  br label %if.end296

if.end296:                                        ; preds = %if.then295, %if.then289
  br label %if.end413

if.else297:                                       ; preds = %if.else285
  %223 = load i8** %buf, align 8
  %call298 = call i32 @strncasecmp(i8* %223, i8* getelementptr inbounds ([8 x i8]* @.str45189, i32 0, i32 0), i64 7) #8
  %cmp299 = icmp eq i32 %call298, 0
  br i1 %cmp299, label %if.then301, label %if.else305

if.then301:                                       ; preds = %if.else297
  %224 = load i8** %buf, align 8
  %arrayidx302 = getelementptr inbounds i8* %224, i64 7
  store i8* %arrayidx302, i8** %cp, align 8
  %225 = load i8** %cp, align 8
  %call303 = call i64 @strspn(i8* %225, i8* getelementptr inbounds ([3 x i8]* @.str33177, i32 0, i32 0)) #8
  %226 = load i8** %cp, align 8
  %add.ptr304 = getelementptr inbounds i8* %226, i64 %call303
  store i8* %add.ptr304, i8** %cp, align 8
  %227 = load i8** %cp, align 8
  %228 = load %struct.httpd_conn** %hc.addr, align 8
  %cookie = getelementptr inbounds %struct.httpd_conn* %228, i32 0, i32 25
  store i8* %227, i8** %cookie, align 8
  br label %if.end412

if.else305:                                       ; preds = %if.else297
  %229 = load i8** %buf, align 8
  %call306 = call i32 @strncasecmp(i8* %229, i8* getelementptr inbounds ([7 x i8]* @.str46190, i32 0, i32 0), i64 6) #8
  %cmp307 = icmp eq i32 %call306, 0
  br i1 %cmp307, label %if.then309, label %if.else354

if.then309:                                       ; preds = %if.else305
  %230 = load i8** %buf, align 8
  %call310 = call i8* @strchr(i8* %230, i32 44) #8
  %cmp311 = icmp eq i8* %call310, null
  br i1 %cmp311, label %if.then313, label %if.end353

if.then313:                                       ; preds = %if.then309
  %231 = load i8** %buf, align 8
  %call314 = call i8* @strpbrk(i8* %231, i8* getelementptr inbounds ([2 x i8]* @.str47191, i32 0, i32 0)) #8
  store i8* %call314, i8** %cp, align 8
  %232 = load i8** %cp, align 8
  %cmp315 = icmp ne i8* %232, null
  br i1 %cmp315, label %if.then317, label %if.end352

if.then317:                                       ; preds = %if.then313
  %233 = load i8** %cp, align 8
  %add.ptr318 = getelementptr inbounds i8* %233, i64 1
  %call319 = call i8* @strchr(i8* %add.ptr318, i32 45) #8
  store i8* %call319, i8** %cp_dash, align 8
  %234 = load i8** %cp_dash, align 8
  %cmp320 = icmp ne i8* %234, null
  br i1 %cmp320, label %land.lhs.true322, label %if.end351

land.lhs.true322:                                 ; preds = %if.then317
  %235 = load i8** %cp_dash, align 8
  %236 = load i8** %cp, align 8
  %add.ptr323 = getelementptr inbounds i8* %236, i64 1
  %cmp324 = icmp ne i8* %235, %add.ptr323
  br i1 %cmp324, label %if.then326, label %if.end351

if.then326:                                       ; preds = %land.lhs.true322
  %237 = load i8** %cp_dash, align 8
  store i8 0, i8* %237, align 1
  %238 = load %struct.httpd_conn** %hc.addr, align 8
  %got_range = getelementptr inbounds %struct.httpd_conn* %238, i32 0, i32 53
  store i32 1, i32* %got_range, align 4
  %239 = load i8** %cp, align 8
  %add.ptr327 = getelementptr inbounds i8* %239, i64 1
  %call328 = call i64 @atoll(i8* %add.ptr327) #8
  %240 = load %struct.httpd_conn** %hc.addr, align 8
  %first_byte_index = getelementptr inbounds %struct.httpd_conn* %240, i32 0, i32 55
  store i64 %call328, i64* %first_byte_index, align 8
  %241 = load %struct.httpd_conn** %hc.addr, align 8
  %first_byte_index329 = getelementptr inbounds %struct.httpd_conn* %241, i32 0, i32 55
  %242 = load i64* %first_byte_index329, align 8
  %cmp330 = icmp slt i64 %242, 0
  br i1 %cmp330, label %if.then332, label %if.end334

if.then332:                                       ; preds = %if.then326
  %243 = load %struct.httpd_conn** %hc.addr, align 8
  %first_byte_index333 = getelementptr inbounds %struct.httpd_conn* %243, i32 0, i32 55
  store i64 0, i64* %first_byte_index333, align 8
  br label %if.end334

if.end334:                                        ; preds = %if.then332, %if.then326
  %244 = load i8** %cp_dash, align 8
  %arrayidx335 = getelementptr inbounds i8* %244, i64 1
  %245 = load i8* %arrayidx335, align 1
  %conv336 = sext i8 %245 to i32
  %idxprom = sext i32 %conv336 to i64
  %call337 = call i16** @__ctype_b_loc() #10
  %246 = load i16** %call337, align 8
  %arrayidx338 = getelementptr inbounds i16* %246, i64 %idxprom
  %247 = load i16* %arrayidx338, align 2
  %conv339 = zext i16 %247 to i32
  %and = and i32 %conv339, 2048
  %tobool340 = icmp ne i32 %and, 0
  br i1 %tobool340, label %if.then341, label %if.end350

if.then341:                                       ; preds = %if.end334
  %248 = load i8** %cp_dash, align 8
  %add.ptr342 = getelementptr inbounds i8* %248, i64 1
  %call343 = call i64 @atoll(i8* %add.ptr342) #8
  %249 = load %struct.httpd_conn** %hc.addr, align 8
  %last_byte_index = getelementptr inbounds %struct.httpd_conn* %249, i32 0, i32 56
  store i64 %call343, i64* %last_byte_index, align 8
  %250 = load %struct.httpd_conn** %hc.addr, align 8
  %last_byte_index344 = getelementptr inbounds %struct.httpd_conn* %250, i32 0, i32 56
  %251 = load i64* %last_byte_index344, align 8
  %cmp345 = icmp slt i64 %251, 0
  br i1 %cmp345, label %if.then347, label %if.end349

if.then347:                                       ; preds = %if.then341
  %252 = load %struct.httpd_conn** %hc.addr, align 8
  %last_byte_index348 = getelementptr inbounds %struct.httpd_conn* %252, i32 0, i32 56
  store i64 -1, i64* %last_byte_index348, align 8
  br label %if.end349

if.end349:                                        ; preds = %if.then347, %if.then341
  br label %if.end350

if.end350:                                        ; preds = %if.end349, %if.end334
  br label %if.end351

if.end351:                                        ; preds = %if.end350, %land.lhs.true322, %if.then317
  br label %if.end352

if.end352:                                        ; preds = %if.end351, %if.then313
  br label %if.end353

if.end353:                                        ; preds = %if.end352, %if.then309
  br label %if.end411

if.else354:                                       ; preds = %if.else305
  %253 = load i8** %buf, align 8
  %call355 = call i32 @strncasecmp(i8* %253, i8* getelementptr inbounds ([10 x i8]* @.str48192, i32 0, i32 0), i64 9) #8
  %cmp356 = icmp eq i32 %call355, 0
  br i1 %cmp356, label %if.then362, label %lor.lhs.false358

lor.lhs.false358:                                 ; preds = %if.else354
  %254 = load i8** %buf, align 8
  %call359 = call i32 @strncasecmp(i8* %254, i8* getelementptr inbounds ([10 x i8]* @.str49193, i32 0, i32 0), i64 9) #8
  %cmp360 = icmp eq i32 %call359, 0
  br i1 %cmp360, label %if.then362, label %if.else370

if.then362:                                       ; preds = %lor.lhs.false358, %if.else354
  %255 = load i8** %buf, align 8
  %arrayidx363 = getelementptr inbounds i8* %255, i64 9
  store i8* %arrayidx363, i8** %cp, align 8
  %256 = load i8** %cp, align 8
  %call364 = call i64 @tdate_parse(i8* %256)
  %257 = load %struct.httpd_conn** %hc.addr, align 8
  %range_if = getelementptr inbounds %struct.httpd_conn* %257, i32 0, i32 47
  store i64 %call364, i64* %range_if, align 8
  %258 = load %struct.httpd_conn** %hc.addr, align 8
  %range_if365 = getelementptr inbounds %struct.httpd_conn* %258, i32 0, i32 47
  %259 = load i64* %range_if365, align 8
  %cmp366 = icmp eq i64 %259, -1
  br i1 %cmp366, label %if.then368, label %if.end369

if.then368:                                       ; preds = %if.then362
  %260 = load i8** %cp, align 8
  call void (i32, i8*, ...)* @syslog(i32 7, i8* getelementptr inbounds ([23 x i8]* @.str44188, i32 0, i32 0), i8* %260)
  br label %if.end369

if.end369:                                        ; preds = %if.then368, %if.then362
  br label %if.end410

if.else370:                                       ; preds = %lor.lhs.false358
  %261 = load i8** %buf, align 8
  %call371 = call i32 @strncasecmp(i8* %261, i8* getelementptr inbounds ([14 x i8]* @.str50194, i32 0, i32 0), i64 13) #8
  %cmp372 = icmp eq i32 %call371, 0
  br i1 %cmp372, label %if.then374, label %if.else378

if.then374:                                       ; preds = %if.else370
  %262 = load i8** %buf, align 8
  %arrayidx375 = getelementptr inbounds i8* %262, i64 13
  store i8* %arrayidx375, i8** %cp, align 8
  %263 = load i8** %cp, align 8
  %call376 = call i64 @strspn(i8* %263, i8* getelementptr inbounds ([3 x i8]* @.str33177, i32 0, i32 0)) #8
  %264 = load i8** %cp, align 8
  %add.ptr377 = getelementptr inbounds i8* %264, i64 %call376
  store i8* %add.ptr377, i8** %cp, align 8
  %265 = load i8** %cp, align 8
  %266 = load %struct.httpd_conn** %hc.addr, align 8
  %contenttype = getelementptr inbounds %struct.httpd_conn* %266, i32 0, i32 26
  store i8* %265, i8** %contenttype, align 8
  br label %if.end409

if.else378:                                       ; preds = %if.else370
  %267 = load i8** %buf, align 8
  %call379 = call i32 @strncasecmp(i8* %267, i8* getelementptr inbounds ([16 x i8]* @.str51195, i32 0, i32 0), i64 15) #8
  %cmp380 = icmp eq i32 %call379, 0
  br i1 %cmp380, label %if.then382, label %if.else385

if.then382:                                       ; preds = %if.else378
  %268 = load i8** %buf, align 8
  %arrayidx383 = getelementptr inbounds i8* %268, i64 15
  store i8* %arrayidx383, i8** %cp, align 8
  %269 = load i8** %cp, align 8
  %call384 = call i64 @atol(i8* %269) #8
  %270 = load %struct.httpd_conn** %hc.addr, align 8
  %contentlength = getelementptr inbounds %struct.httpd_conn* %270, i32 0, i32 48
  store i64 %call384, i64* %contentlength, align 8
  br label %if.end408

if.else385:                                       ; preds = %if.else378
  %271 = load i8** %buf, align 8
  %call386 = call i32 @strncasecmp(i8* %271, i8* getelementptr inbounds ([15 x i8]* @.str52196, i32 0, i32 0), i64 14) #8
  %cmp387 = icmp eq i32 %call386, 0
  br i1 %cmp387, label %if.then389, label %if.else393

if.then389:                                       ; preds = %if.else385
  %272 = load i8** %buf, align 8
  %arrayidx390 = getelementptr inbounds i8* %272, i64 14
  store i8* %arrayidx390, i8** %cp, align 8
  %273 = load i8** %cp, align 8
  %call391 = call i64 @strspn(i8* %273, i8* getelementptr inbounds ([3 x i8]* @.str33177, i32 0, i32 0)) #8
  %274 = load i8** %cp, align 8
  %add.ptr392 = getelementptr inbounds i8* %274, i64 %call391
  store i8* %add.ptr392, i8** %cp, align 8
  %275 = load i8** %cp, align 8
  %276 = load %struct.httpd_conn** %hc.addr, align 8
  %authorization = getelementptr inbounds %struct.httpd_conn* %276, i32 0, i32 30
  store i8* %275, i8** %authorization, align 8
  br label %if.end407

if.else393:                                       ; preds = %if.else385
  %277 = load i8** %buf, align 8
  %call394 = call i32 @strncasecmp(i8* %277, i8* getelementptr inbounds ([12 x i8]* @.str53197, i32 0, i32 0), i64 11) #8
  %cmp395 = icmp eq i32 %call394, 0
  br i1 %cmp395, label %if.then397, label %if.end406

if.then397:                                       ; preds = %if.else393
  %278 = load i8** %buf, align 8
  %arrayidx398 = getelementptr inbounds i8* %278, i64 11
  store i8* %arrayidx398, i8** %cp, align 8
  %279 = load i8** %cp, align 8
  %call399 = call i64 @strspn(i8* %279, i8* getelementptr inbounds ([3 x i8]* @.str33177, i32 0, i32 0)) #8
  %280 = load i8** %cp, align 8
  %add.ptr400 = getelementptr inbounds i8* %280, i64 %call399
  store i8* %add.ptr400, i8** %cp, align 8
  %281 = load i8** %cp, align 8
  %call401 = call i32 @strcasecmp(i8* %281, i8* getelementptr inbounds ([11 x i8]* @.str54198, i32 0, i32 0)) #8
  %cmp402 = icmp eq i32 %call401, 0
  br i1 %cmp402, label %if.then404, label %if.end405

if.then404:                                       ; preds = %if.then397
  %282 = load %struct.httpd_conn** %hc.addr, align 8
  %keep_alive = getelementptr inbounds %struct.httpd_conn* %282, i32 0, i32 57
  store i32 1, i32* %keep_alive, align 4
  br label %if.end405

if.end405:                                        ; preds = %if.then404, %if.then397
  br label %if.end406

if.end406:                                        ; preds = %if.end405, %if.else393
  br label %if.end407

if.end407:                                        ; preds = %if.end406, %if.then389
  br label %if.end408

if.end408:                                        ; preds = %if.end407, %if.then382
  br label %if.end409

if.end409:                                        ; preds = %if.end408, %if.then374
  br label %if.end410

if.end410:                                        ; preds = %if.end409, %if.end369
  br label %if.end411

if.end411:                                        ; preds = %if.end410, %if.end353
  br label %if.end412

if.end412:                                        ; preds = %if.end411, %if.then301
  br label %if.end413

if.end413:                                        ; preds = %if.end412, %if.end296
  br label %if.end414

if.end414:                                        ; preds = %if.end413, %if.then281
  br label %if.end415

if.end415:                                        ; preds = %if.end414, %if.end274
  br label %if.end416

if.end416:                                        ; preds = %if.end415, %if.end238
  br label %if.end417

if.end417:                                        ; preds = %if.end416, %if.end206
  br label %if.end418

if.end418:                                        ; preds = %if.end417, %if.then177
  br label %if.end419

if.end419:                                        ; preds = %if.end418, %if.then168
  br label %if.end420

if.end420:                                        ; preds = %if.end419, %if.then160
  br label %while.cond

while.end:                                        ; preds = %if.then155, %while.cond
  br label %if.end421

if.end421:                                        ; preds = %while.end, %if.end144
  %283 = load %struct.httpd_conn** %hc.addr, align 8
  %one_one422 = getelementptr inbounds %struct.httpd_conn* %283, i32 0, i32 52
  %284 = load i32* %one_one422, align 4
  %tobool423 = icmp ne i32 %284, 0
  br i1 %tobool423, label %if.then424, label %if.end442

if.then424:                                       ; preds = %if.end421
  %285 = load %struct.httpd_conn** %hc.addr, align 8
  %reqhost425 = getelementptr inbounds %struct.httpd_conn* %285, i32 0, i32 27
  %286 = load i8** %reqhost425, align 8
  %arrayidx426 = getelementptr inbounds i8* %286, i64 0
  %287 = load i8* %arrayidx426, align 1
  %conv427 = sext i8 %287 to i32
  %cmp428 = icmp eq i32 %conv427, 0
  br i1 %cmp428, label %land.lhs.true430, label %if.end437

land.lhs.true430:                                 ; preds = %if.then424
  %288 = load %struct.httpd_conn** %hc.addr, align 8
  %hdrhost431 = getelementptr inbounds %struct.httpd_conn* %288, i32 0, i32 28
  %289 = load i8** %hdrhost431, align 8
  %arrayidx432 = getelementptr inbounds i8* %289, i64 0
  %290 = load i8* %arrayidx432, align 1
  %conv433 = sext i8 %290 to i32
  %cmp434 = icmp eq i32 %conv433, 0
  br i1 %cmp434, label %if.then436, label %if.end437

if.then436:                                       ; preds = %land.lhs.true430
  %291 = load %struct.httpd_conn** %hc.addr, align 8
  %292 = load i8** @httpd_err400title, align 8
  %293 = load i8** @httpd_err400form, align 8
  call void @httpd_send_err(%struct.httpd_conn* %291, i32 400, i8* %292, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %293, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end437:                                        ; preds = %land.lhs.true430, %if.then424
  %294 = load %struct.httpd_conn** %hc.addr, align 8
  %keep_alive438 = getelementptr inbounds %struct.httpd_conn* %294, i32 0, i32 57
  %295 = load i32* %keep_alive438, align 4
  %tobool439 = icmp ne i32 %295, 0
  br i1 %tobool439, label %if.then440, label %if.end441

if.then440:                                       ; preds = %if.end437
  %296 = load %struct.httpd_conn** %hc.addr, align 8
  %should_linger = getelementptr inbounds %struct.httpd_conn* %296, i32 0, i32 58
  store i32 1, i32* %should_linger, align 4
  br label %if.end441

if.end441:                                        ; preds = %if.then440, %if.end437
  br label %if.end442

if.end442:                                        ; preds = %if.end441, %if.end421
  %297 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename = getelementptr inbounds %struct.httpd_conn* %297, i32 0, i32 16
  %298 = load %struct.httpd_conn** %hc.addr, align 8
  %maxexpnfilename = getelementptr inbounds %struct.httpd_conn* %298, i32 0, i32 35
  %299 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename443 = getelementptr inbounds %struct.httpd_conn* %299, i32 0, i32 15
  %300 = load i8** %origfilename443, align 8
  %call444 = call i64 @strlen(i8* %300) #8
  call void @httpd_realloc_str(i8** %expnfilename, i64* %maxexpnfilename, i64 %call444)
  %301 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename445 = getelementptr inbounds %struct.httpd_conn* %301, i32 0, i32 16
  %302 = load i8** %expnfilename445, align 8
  %303 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename446 = getelementptr inbounds %struct.httpd_conn* %303, i32 0, i32 15
  %304 = load i8** %origfilename446, align 8
  %call447 = call i8* @strcpy(i8* %302, i8* %304) #5
  %305 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename448 = getelementptr inbounds %struct.httpd_conn* %305, i32 0, i32 16
  %306 = load i8** %expnfilename448, align 8
  %arrayidx449 = getelementptr inbounds i8* %306, i64 0
  %307 = load i8* %arrayidx449, align 1
  %conv450 = sext i8 %307 to i32
  %cmp451 = icmp eq i32 %conv450, 126
  br i1 %cmp451, label %if.then453, label %if.end454

if.then453:                                       ; preds = %if.end442
  br label %if.end454

if.end454:                                        ; preds = %if.then453, %if.end442
  %308 = load %struct.httpd_conn** %hc.addr, align 8
  %hs = getelementptr inbounds %struct.httpd_conn* %308, i32 0, i32 1
  %309 = load %struct.httpd_server** %hs, align 8
  %vhost = getelementptr inbounds %struct.httpd_server* %309, i32 0, i32 15
  %310 = load i32* %vhost, align 4
  %tobool455 = icmp ne i32 %310, 0
  br i1 %tobool455, label %if.then456, label %if.end462

if.then456:                                       ; preds = %if.end454
  %311 = load %struct.httpd_conn** %hc.addr, align 8
  %call457 = call i32 @vhost_map(%struct.httpd_conn* %311)
  %tobool458 = icmp ne i32 %call457, 0
  br i1 %tobool458, label %if.end461, label %if.then459

if.then459:                                       ; preds = %if.then456
  %312 = load %struct.httpd_conn** %hc.addr, align 8
  %313 = load i8** @err500title, align 8
  %314 = load i8** @err500form, align 8
  %315 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl460 = getelementptr inbounds %struct.httpd_conn* %315, i32 0, i32 12
  %316 = load i8** %encodedurl460, align 8
  call void @httpd_send_err(%struct.httpd_conn* %312, i32 500, i8* %313, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %314, i8* %316)
  store i32 -1, i32* %retval
  br label %return

if.end461:                                        ; preds = %if.then456
  br label %if.end462

if.end462:                                        ; preds = %if.end461, %if.end454
  %317 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename463 = getelementptr inbounds %struct.httpd_conn* %317, i32 0, i32 16
  %318 = load i8** %expnfilename463, align 8
  %319 = load %struct.httpd_conn** %hc.addr, align 8
  %hs464 = getelementptr inbounds %struct.httpd_conn* %319, i32 0, i32 1
  %320 = load %struct.httpd_server** %hs464, align 8
  %no_symlink_check = getelementptr inbounds %struct.httpd_server* %320, i32 0, i32 14
  %321 = load i32* %no_symlink_check, align 4
  %322 = load %struct.httpd_conn** %hc.addr, align 8
  %tildemapped = getelementptr inbounds %struct.httpd_conn* %322, i32 0, i32 54
  %323 = load i32* %tildemapped, align 4
  %call465 = call i8* @expand_symlinks(i8* %318, i8** %pi, i32 %321, i32 %323)
  store i8* %call465, i8** %cp, align 8
  %324 = load i8** %cp, align 8
  %cmp466 = icmp eq i8* %324, null
  br i1 %cmp466, label %if.then468, label %if.end470

if.then468:                                       ; preds = %if.end462
  %325 = load %struct.httpd_conn** %hc.addr, align 8
  %326 = load i8** @err500title, align 8
  %327 = load i8** @err500form, align 8
  %328 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl469 = getelementptr inbounds %struct.httpd_conn* %328, i32 0, i32 12
  %329 = load i8** %encodedurl469, align 8
  call void @httpd_send_err(%struct.httpd_conn* %325, i32 500, i8* %326, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %327, i8* %329)
  store i32 -1, i32* %retval
  br label %return

if.end470:                                        ; preds = %if.end462
  %330 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename471 = getelementptr inbounds %struct.httpd_conn* %330, i32 0, i32 16
  %331 = load %struct.httpd_conn** %hc.addr, align 8
  %maxexpnfilename472 = getelementptr inbounds %struct.httpd_conn* %331, i32 0, i32 35
  %332 = load i8** %cp, align 8
  %call473 = call i64 @strlen(i8* %332) #8
  call void @httpd_realloc_str(i8** %expnfilename471, i64* %maxexpnfilename472, i64 %call473)
  %333 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename474 = getelementptr inbounds %struct.httpd_conn* %333, i32 0, i32 16
  %334 = load i8** %expnfilename474, align 8
  %335 = load i8** %cp, align 8
  %call475 = call i8* @strcpy(i8* %334, i8* %335) #5
  %336 = load %struct.httpd_conn** %hc.addr, align 8
  %pathinfo = getelementptr inbounds %struct.httpd_conn* %336, i32 0, i32 18
  %337 = load %struct.httpd_conn** %hc.addr, align 8
  %maxpathinfo = getelementptr inbounds %struct.httpd_conn* %337, i32 0, i32 37
  %338 = load i8** %pi, align 8
  %call476 = call i64 @strlen(i8* %338) #8
  call void @httpd_realloc_str(i8** %pathinfo, i64* %maxpathinfo, i64 %call476)
  %339 = load %struct.httpd_conn** %hc.addr, align 8
  %pathinfo477 = getelementptr inbounds %struct.httpd_conn* %339, i32 0, i32 18
  %340 = load i8** %pathinfo477, align 8
  %341 = load i8** %pi, align 8
  %call478 = call i8* @strcpy(i8* %340, i8* %341) #5
  %342 = load %struct.httpd_conn** %hc.addr, align 8
  %pathinfo479 = getelementptr inbounds %struct.httpd_conn* %342, i32 0, i32 18
  %343 = load i8** %pathinfo479, align 8
  %arrayidx480 = getelementptr inbounds i8* %343, i64 0
  %344 = load i8* %arrayidx480, align 1
  %conv481 = sext i8 %344 to i32
  %cmp482 = icmp ne i32 %conv481, 0
  br i1 %cmp482, label %if.then484, label %if.end506

if.then484:                                       ; preds = %if.end470
  %345 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename485 = getelementptr inbounds %struct.httpd_conn* %345, i32 0, i32 15
  %346 = load i8** %origfilename485, align 8
  %call486 = call i64 @strlen(i8* %346) #8
  %347 = load %struct.httpd_conn** %hc.addr, align 8
  %pathinfo487 = getelementptr inbounds %struct.httpd_conn* %347, i32 0, i32 18
  %348 = load i8** %pathinfo487, align 8
  %call488 = call i64 @strlen(i8* %348) #8
  %sub = sub i64 %call486, %call488
  %conv489 = trunc i64 %sub to i32
  store i32 %conv489, i32* %i, align 4
  %349 = load i32* %i, align 4
  %cmp490 = icmp sgt i32 %349, 0
  br i1 %cmp490, label %land.lhs.true492, label %if.end505

land.lhs.true492:                                 ; preds = %if.then484
  %350 = load i32* %i, align 4
  %idxprom493 = sext i32 %350 to i64
  %351 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename494 = getelementptr inbounds %struct.httpd_conn* %351, i32 0, i32 15
  %352 = load i8** %origfilename494, align 8
  %arrayidx495 = getelementptr inbounds i8* %352, i64 %idxprom493
  %353 = load %struct.httpd_conn** %hc.addr, align 8
  %pathinfo496 = getelementptr inbounds %struct.httpd_conn* %353, i32 0, i32 18
  %354 = load i8** %pathinfo496, align 8
  %call497 = call i32 @strcmp(i8* %arrayidx495, i8* %354) #8
  %cmp498 = icmp eq i32 %call497, 0
  br i1 %cmp498, label %if.then500, label %if.end505

if.then500:                                       ; preds = %land.lhs.true492
  %355 = load i32* %i, align 4
  %sub501 = sub nsw i32 %355, 1
  %idxprom502 = sext i32 %sub501 to i64
  %356 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename503 = getelementptr inbounds %struct.httpd_conn* %356, i32 0, i32 15
  %357 = load i8** %origfilename503, align 8
  %arrayidx504 = getelementptr inbounds i8* %357, i64 %idxprom502
  store i8 0, i8* %arrayidx504, align 1
  br label %if.end505

if.end505:                                        ; preds = %if.then500, %land.lhs.true492, %if.then484
  br label %if.end506

if.end506:                                        ; preds = %if.end505, %if.end470
  %358 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename507 = getelementptr inbounds %struct.httpd_conn* %358, i32 0, i32 16
  %359 = load i8** %expnfilename507, align 8
  %arrayidx508 = getelementptr inbounds i8* %359, i64 0
  %360 = load i8* %arrayidx508, align 1
  %conv509 = sext i8 %360 to i32
  %cmp510 = icmp eq i32 %conv509, 47
  br i1 %cmp510, label %if.then512, label %if.end541

if.then512:                                       ; preds = %if.end506
  %361 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename513 = getelementptr inbounds %struct.httpd_conn* %361, i32 0, i32 16
  %362 = load i8** %expnfilename513, align 8
  %363 = load %struct.httpd_conn** %hc.addr, align 8
  %hs514 = getelementptr inbounds %struct.httpd_conn* %363, i32 0, i32 1
  %364 = load %struct.httpd_server** %hs514, align 8
  %cwd = getelementptr inbounds %struct.httpd_server* %364, i32 0, i32 9
  %365 = load i8** %cwd, align 8
  %366 = load %struct.httpd_conn** %hc.addr, align 8
  %hs515 = getelementptr inbounds %struct.httpd_conn* %366, i32 0, i32 1
  %367 = load %struct.httpd_server** %hs515, align 8
  %cwd516 = getelementptr inbounds %struct.httpd_server* %367, i32 0, i32 9
  %368 = load i8** %cwd516, align 8
  %call517 = call i64 @strlen(i8* %368) #8
  %call518 = call i32 @strncmp(i8* %362, i8* %365, i64 %call517) #8
  %cmp519 = icmp eq i32 %call518, 0
  br i1 %cmp519, label %if.then521, label %if.else535

if.then521:                                       ; preds = %if.then512
  %369 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename522 = getelementptr inbounds %struct.httpd_conn* %369, i32 0, i32 16
  %370 = load i8** %expnfilename522, align 8
  %371 = load %struct.httpd_conn** %hc.addr, align 8
  %hs523 = getelementptr inbounds %struct.httpd_conn* %371, i32 0, i32 1
  %372 = load %struct.httpd_server** %hs523, align 8
  %cwd524 = getelementptr inbounds %struct.httpd_server* %372, i32 0, i32 9
  %373 = load i8** %cwd524, align 8
  %call525 = call i64 @strlen(i8* %373) #8
  %374 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename526 = getelementptr inbounds %struct.httpd_conn* %374, i32 0, i32 16
  %375 = load i8** %expnfilename526, align 8
  %arrayidx527 = getelementptr inbounds i8* %375, i64 %call525
  %376 = load %struct.httpd_conn** %hc.addr, align 8
  %hs528 = getelementptr inbounds %struct.httpd_conn* %376, i32 0, i32 1
  %377 = load %struct.httpd_server** %hs528, align 8
  %cwd529 = getelementptr inbounds %struct.httpd_server* %377, i32 0, i32 9
  %378 = load i8** %cwd529, align 8
  %call530 = call i64 @strlen(i8* %378) #8
  %379 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename531 = getelementptr inbounds %struct.httpd_conn* %379, i32 0, i32 16
  %380 = load i8** %expnfilename531, align 8
  %arrayidx532 = getelementptr inbounds i8* %380, i64 %call530
  %call533 = call i64 @strlen(i8* %arrayidx532) #8
  %add534 = add i64 %call533, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %370, i8* %arrayidx527, i64 %add534, i32 1, i1 false)
  br label %if.end540

if.else535:                                       ; preds = %if.then512
  %381 = load %struct.httpd_conn** %hc.addr, align 8
  %client_addr536 = getelementptr inbounds %struct.httpd_conn* %381, i32 0, i32 2
  %call537 = call i8* @httpd_ntoa(%union.httpd_sockaddr* %client_addr536)
  %382 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl538 = getelementptr inbounds %struct.httpd_conn* %382, i32 0, i32 12
  %383 = load i8** %encodedurl538, align 8
  call void (i32, i8*, ...)* @syslog(i32 5, i8* getelementptr inbounds ([44 x i8]* @.str55199, i32 0, i32 0), i8* %call537, i8* %383)
  %384 = load %struct.httpd_conn** %hc.addr, align 8
  %385 = load i8** @err403title, align 8
  %386 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl539 = getelementptr inbounds %struct.httpd_conn* %386, i32 0, i32 12
  %387 = load i8** %encodedurl539, align 8
  call void @httpd_send_err(%struct.httpd_conn* %384, i32 403, i8* %385, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* getelementptr inbounds ([95 x i8]* @.str56200, i32 0, i32 0), i8* %387)
  store i32 -1, i32* %retval
  br label %return

if.end540:                                        ; preds = %if.then521
  br label %if.end541

if.end541:                                        ; preds = %if.end540, %if.end506
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end541, %if.else535, %if.then468, %if.then459, %if.then436, %if.then205, %if.then143, %if.else75, %if.then54, %if.then44, %if.then36, %if.then30, %if.then
  %388 = load i32* %retval
  ret i32 %388
}

; Function Attrs: nounwind readonly
declare i8* @strpbrk(i8*, i8*) #1

; Function Attrs: nounwind readonly
declare i32 @strncasecmp(i8*, i8*, i64) #1

; Function Attrs: nounwind readonly
declare i64 @atoll(i8*) #1

; Function Attrs: nounwind readnone
declare i16** @__ctype_b_loc() #6

; Function Attrs: nounwind readonly
declare i64 @atol(i8*) #1

; Function Attrs: nounwind uwtable
define internal void @httpd_close_conn(%struct.httpd_conn* %hc, %struct.timeval* %nowP) #0 {
entry:
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %nowP.addr = alloca %struct.timeval*, align 8
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  store %struct.timeval* %nowP, %struct.timeval** %nowP.addr, align 8
  %0 = load %struct.httpd_conn** %hc.addr, align 8
  %1 = load %struct.timeval** %nowP.addr, align 8
  call void @make_log_entry(%struct.httpd_conn* %0, %struct.timeval* %1)
  %2 = load %struct.httpd_conn** %hc.addr, align 8
  %file_address = getelementptr inbounds %struct.httpd_conn* %2, i32 0, i32 61
  %3 = load i8** %file_address, align 8
  %cmp = icmp ne i8* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.httpd_conn** %hc.addr, align 8
  %file_address1 = getelementptr inbounds %struct.httpd_conn* %4, i32 0, i32 61
  %5 = load i8** %file_address1, align 8
  %6 = load %struct.httpd_conn** %hc.addr, align 8
  %sb = getelementptr inbounds %struct.httpd_conn* %6, i32 0, i32 59
  %7 = load %struct.timeval** %nowP.addr, align 8
  call void @mmc_unmap(i8* %5, %struct.stat* %sb, %struct.timeval* %7)
  %8 = load %struct.httpd_conn** %hc.addr, align 8
  %file_address2 = getelementptr inbounds %struct.httpd_conn* %8, i32 0, i32 61
  store i8* null, i8** %file_address2, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %9 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd = getelementptr inbounds %struct.httpd_conn* %9, i32 0, i32 60
  %10 = load i32* %conn_fd, align 4
  %cmp3 = icmp sge i32 %10, 0
  br i1 %cmp3, label %if.then4, label %if.end7

if.then4:                                         ; preds = %if.end
  %11 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd5 = getelementptr inbounds %struct.httpd_conn* %11, i32 0, i32 60
  %12 = load i32* %conn_fd5, align 4
  %call = call i32 @close(i32 %12)
  %13 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd6 = getelementptr inbounds %struct.httpd_conn* %13, i32 0, i32 60
  store i32 -1, i32* %conn_fd6, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then4, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @httpd_destroy_conn(%struct.httpd_conn* %hc) #0 {
entry:
  %hc.addr = alloca %struct.httpd_conn*, align 8
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  %0 = load %struct.httpd_conn** %hc.addr, align 8
  %initialized = getelementptr inbounds %struct.httpd_conn* %0, i32 0, i32 0
  %1 = load i32* %initialized, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.httpd_conn** %hc.addr, align 8
  %read_buf = getelementptr inbounds %struct.httpd_conn* %2, i32 0, i32 3
  %3 = load i8** %read_buf, align 8
  call void @free(i8* %3) #5
  %4 = load %struct.httpd_conn** %hc.addr, align 8
  %decodedurl = getelementptr inbounds %struct.httpd_conn* %4, i32 0, i32 13
  %5 = load i8** %decodedurl, align 8
  call void @free(i8* %5) #5
  %6 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename = getelementptr inbounds %struct.httpd_conn* %6, i32 0, i32 15
  %7 = load i8** %origfilename, align 8
  call void @free(i8* %7) #5
  %8 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename = getelementptr inbounds %struct.httpd_conn* %8, i32 0, i32 16
  %9 = load i8** %expnfilename, align 8
  call void @free(i8* %9) #5
  %10 = load %struct.httpd_conn** %hc.addr, align 8
  %encodings = getelementptr inbounds %struct.httpd_conn* %10, i32 0, i32 17
  %11 = load i8** %encodings, align 8
  call void @free(i8* %11) #5
  %12 = load %struct.httpd_conn** %hc.addr, align 8
  %pathinfo = getelementptr inbounds %struct.httpd_conn* %12, i32 0, i32 18
  %13 = load i8** %pathinfo, align 8
  call void @free(i8* %13) #5
  %14 = load %struct.httpd_conn** %hc.addr, align 8
  %query = getelementptr inbounds %struct.httpd_conn* %14, i32 0, i32 19
  %15 = load i8** %query, align 8
  call void @free(i8* %15) #5
  %16 = load %struct.httpd_conn** %hc.addr, align 8
  %accept = getelementptr inbounds %struct.httpd_conn* %16, i32 0, i32 22
  %17 = load i8** %accept, align 8
  call void @free(i8* %17) #5
  %18 = load %struct.httpd_conn** %hc.addr, align 8
  %accepte = getelementptr inbounds %struct.httpd_conn* %18, i32 0, i32 23
  %19 = load i8** %accepte, align 8
  call void @free(i8* %19) #5
  %20 = load %struct.httpd_conn** %hc.addr, align 8
  %reqhost = getelementptr inbounds %struct.httpd_conn* %20, i32 0, i32 27
  %21 = load i8** %reqhost, align 8
  call void @free(i8* %21) #5
  %22 = load %struct.httpd_conn** %hc.addr, align 8
  %hostdir = getelementptr inbounds %struct.httpd_conn* %22, i32 0, i32 29
  %23 = load i8** %hostdir, align 8
  call void @free(i8* %23) #5
  %24 = load %struct.httpd_conn** %hc.addr, align 8
  %remoteuser = getelementptr inbounds %struct.httpd_conn* %24, i32 0, i32 31
  %25 = load i8** %remoteuser, align 8
  call void @free(i8* %25) #5
  %26 = load %struct.httpd_conn** %hc.addr, align 8
  %response = getelementptr inbounds %struct.httpd_conn* %26, i32 0, i32 32
  %27 = load i8** %response, align 8
  call void @free(i8* %27) #5
  %28 = load %struct.httpd_conn** %hc.addr, align 8
  %initialized1 = getelementptr inbounds %struct.httpd_conn* %28, i32 0, i32 0
  store i32 0, i32* %initialized1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @httpd_start_request(%struct.httpd_conn* %hc, %struct.timeval* %nowP) #0 {
entry:
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %nowP.addr = alloca %struct.timeval*, align 8
  %r = alloca i32, align 4
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  store %struct.timeval* %nowP, %struct.timeval** %nowP.addr, align 8
  %0 = load %struct.httpd_conn** %hc.addr, align 8
  %1 = load %struct.timeval** %nowP.addr, align 8
  %call = call i32 @really_start_request(%struct.httpd_conn* %0, %struct.timeval* %1)
  store i32 %call, i32* %r, align 4
  %2 = load i32* %r, align 4
  ret i32 %2
}

declare i32 @getnameinfo(%struct.sockaddr*, i32, i8*, i32, i8*, i32, i32) #2

; Function Attrs: nounwind readnone
declare i32 @htonl(i32) #6

; Function Attrs: nounwind uwtable
define internal i32 @httpd_read_fully(i32 %fd, i8* %buf, i64 %nbytes) #0 {
entry:
  %retval = alloca i32, align 4
  %fd.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %nbytes.addr = alloca i64, align 8
  %nread = alloca i32, align 4
  %r = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %nbytes, i64* %nbytes.addr, align 8
  store i32 0, i32* %nread, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end20, %if.then, %entry
  %0 = load i32* %nread, align 4
  %conv = sext i32 %0 to i64
  %1 = load i64* %nbytes.addr, align 8
  %cmp = icmp ult i64 %conv, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32* %fd.addr, align 4
  %3 = load i8** %buf.addr, align 8
  %4 = load i32* %nread, align 4
  %idx.ext = sext i32 %4 to i64
  %add.ptr = getelementptr inbounds i8* %3, i64 %idx.ext
  %5 = load i64* %nbytes.addr, align 8
  %6 = load i32* %nread, align 4
  %conv2 = sext i32 %6 to i64
  %sub = sub i64 %5, %conv2
  %call = call i64 @read(i32 %2, i8* %add.ptr, i64 %sub)
  %conv3 = trunc i64 %call to i32
  store i32 %conv3, i32* %r, align 4
  %7 = load i32* %r, align 4
  %cmp4 = icmp slt i32 %7, 0
  br i1 %cmp4, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %while.body
  %call6 = call i32* @__errno_location() #10
  %8 = load i32* %call6, align 4
  %cmp7 = icmp eq i32 %8, 4
  br i1 %cmp7, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %call9 = call i32* @__errno_location() #10
  %9 = load i32* %call9, align 4
  %cmp10 = icmp eq i32 %9, 11
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %call12 = call i32 @sleep(i32 1)
  br label %while.cond

if.end:                                           ; preds = %lor.lhs.false, %while.body
  %10 = load i32* %r, align 4
  %cmp13 = icmp slt i32 %10, 0
  br i1 %cmp13, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end
  %11 = load i32* %r, align 4
  store i32 %11, i32* %retval
  br label %return

if.end16:                                         ; preds = %if.end
  %12 = load i32* %r, align 4
  %cmp17 = icmp eq i32 %12, 0
  br i1 %cmp17, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.end16
  br label %while.end

if.end20:                                         ; preds = %if.end16
  %13 = load i32* %r, align 4
  %14 = load i32* %nread, align 4
  %add = add nsw i32 %14, %13
  store i32 %add, i32* %nread, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then19, %while.cond
  %15 = load i32* %nread, align 4
  store i32 %15, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then15
  %16 = load i32* %retval
  ret i32 %16
}

declare i32 @sleep(i32) #2

; Function Attrs: nounwind uwtable
define internal void @httpd_logstats(i64 %secs) #0 {
entry:
  %secs.addr = alloca i64, align 8
  store i64 %secs, i64* %secs.addr, align 8
  %0 = load i32* @str_alloc_count, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32* @str_alloc_count, align 4
  %2 = load i64* @str_alloc_size, align 8
  %3 = load i64* @str_alloc_size, align 8
  %conv = uitofp i64 %3 to float
  %4 = load i32* @str_alloc_count, align 4
  %conv1 = sitofp i32 %4 to float
  %div = fdiv float %conv, %conv1
  %conv2 = fpext float %div to double
  call void (i32, i8*, ...)* @syslog(i32 5, i8* getelementptr inbounds ([60 x i8]* @.str58202, i32 0, i32 0), i32 %1, i64 %2, double %conv2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #5

; Function Attrs: nounwind
declare i32 @vsnprintf(i8*, i64, i8*, %struct.__va_list_tag*) #3

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #5

; Function Attrs: nounwind
declare %struct.tm* @localtime(i64*) #3

; Function Attrs: nounwind
declare i64 @strftime(i8*, i64, i8*, %struct.tm*) #3

declare i32 @fflush(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare i32 @stat(i8*, %struct.stat*) #3

; Function Attrs: nounwind
declare %struct.tm* @gmtime(i64*) #3

; Function Attrs: nounwind
declare i32 @fork() #3

; Function Attrs: nounwind
declare i32 @kill(i32, i32) #3

; Function Attrs: nounwind
declare i32 @dup2(i32, i32) #3

; Function Attrs: nounwind
declare i32 @pipe(i32*) #3

; Function Attrs: nounwind
declare i32 @nice(i32) #3

; Function Attrs: nounwind
declare i32 @execve(i8*, i8**, i8**) #3

; Function Attrs: noreturn
declare void @_exit(i32) #7

; Function Attrs: nounwind
declare i8* @getenv(i8*) #3

declare %struct.__dirstream* @opendir(i8*) #2

declare i32 @closedir(%struct.__dirstream*) #2

; Function Attrs: nounwind
declare %struct._IO_FILE* @fdopen(i32, i8*) #3

declare %struct.dirent* @readdir(%struct.__dirstream*) #2

; Function Attrs: nounwind
declare i8* @strncpy(i8*, i8*, i64) #3

declare void @qsort(i8*, i64, i64, i32 (i8*, i8*)*) #2

; Function Attrs: nounwind
declare i32 @lstat(i8*, %struct.stat*) #3

; Function Attrs: nounwind
declare i64 @readlink(i8*, i8*, i64) #3

; Function Attrs: nounwind
declare i8* @ctime(i64*) #3

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #3

; Function Attrs: nounwind
declare i32 @tolower(i32) #3

; Function Attrs: nounwind
declare void @llvm.var.annotation(i8*, i8*, i8*, i32) #5

declare i32 @crypt(...) #2

; Function Attrs: nounwind
declare i32 @getsockname(i32, %struct.sockaddr*, i32*) #3

declare i64 @fread(i8*, i64, i64, %struct._IO_FILE*) #2

; Function Attrs: nounwind
declare i32 @socket(i32, i32, i32) #3

; Function Attrs: nounwind
declare i32 @setsockopt(i32, i32, i32, i8*, i32) #3

; Function Attrs: nounwind
declare i32 @bind(i32, %struct.sockaddr*, i32) #3

; Function Attrs: nounwind
declare i32 @listen(i32, i32) #3

; Function Attrs: nounwind uwtable
define internal void @check_options() #0 {
entry:
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @initialize_listen_socket(%union.httpd_sockaddr* %saP) #0 {
entry:
  %retval = alloca i32, align 4
  %saP.addr = alloca %union.httpd_sockaddr*, align 8
  %listen_fd = alloca i32, align 4
  %on = alloca i32, align 4
  %flags = alloca i32, align 4
  store %union.httpd_sockaddr* %saP, %union.httpd_sockaddr** %saP.addr, align 8
  %0 = load %union.httpd_sockaddr** %saP.addr, align 8
  %call = call i32 @sockaddr_check(%union.httpd_sockaddr* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([41 x i8]* @.str542, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %union.httpd_sockaddr** %saP.addr, align 8
  %sa = bitcast %union.httpd_sockaddr* %1 to %struct.sockaddr*
  %sa_family = getelementptr inbounds %struct.sockaddr* %sa, i32 0, i32 0
  %2 = load i16* %sa_family, align 2
  %conv = zext i16 %2 to i32
  %call1 = call i32 @socket(i32 %conv, i32 1, i32 0) #5
  store i32 %call1, i32* %listen_fd, align 4
  %3 = load i32* %listen_fd, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %4 = load %union.httpd_sockaddr** %saP.addr, align 8
  %call4 = call i8* @httpd_ntoa(%union.httpd_sockaddr* %4)
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([18 x i8]* @.str543, i32 0, i32 0), i8* %call4)
  store i32 -1, i32* %retval
  br label %return

if.end5:                                          ; preds = %if.end
  %5 = load i32* %listen_fd, align 4
  %call6 = call i32 (i32, i32, ...)* @fcntl(i32 %5, i32 2, i32 1)
  store i32 1, i32* %on, align 4
  %6 = load i32* %listen_fd, align 4
  %7 = bitcast i32* %on to i8*
  %call7 = call i32 @setsockopt(i32 %6, i32 1, i32 2, i8* %7, i32 4) #5
  %cmp8 = icmp slt i32 %call7, 0
  br i1 %cmp8, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.end5
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([29 x i8]* @.str544, i32 0, i32 0))
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %if.end5
  %8 = load i32* %listen_fd, align 4
  %9 = load %union.httpd_sockaddr** %saP.addr, align 8
  %sa12 = bitcast %union.httpd_sockaddr* %9 to %struct.sockaddr*
  %10 = load %union.httpd_sockaddr** %saP.addr, align 8
  %call13 = call i64 @sockaddr_len(%union.httpd_sockaddr* %10)
  %conv14 = trunc i64 %call13 to i32
  %call15 = call i32 @bind(i32 %8, %struct.sockaddr* %sa12, i32 %conv14) #5
  %cmp16 = icmp slt i32 %call15, 0
  br i1 %cmp16, label %if.then18, label %if.end21

if.then18:                                        ; preds = %if.end11
  %11 = load %union.httpd_sockaddr** %saP.addr, align 8
  %call19 = call i8* @httpd_ntoa(%union.httpd_sockaddr* %11)
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([16 x i8]* @.str545, i32 0, i32 0), i8* %call19)
  %12 = load i32* %listen_fd, align 4
  %call20 = call i32 @close(i32 %12)
  store i32 -1, i32* %retval
  br label %return

if.end21:                                         ; preds = %if.end11
  %13 = load i32* %listen_fd, align 4
  %call22 = call i32 (i32, i32, ...)* @fcntl(i32 %13, i32 3, i32 0)
  store i32 %call22, i32* %flags, align 4
  %14 = load i32* %flags, align 4
  %cmp23 = icmp eq i32 %14, -1
  br i1 %cmp23, label %if.then25, label %if.end27

if.then25:                                        ; preds = %if.end21
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([19 x i8]* @.str546, i32 0, i32 0))
  %15 = load i32* %listen_fd, align 4
  %call26 = call i32 @close(i32 %15)
  store i32 -1, i32* %retval
  br label %return

if.end27:                                         ; preds = %if.end21
  %16 = load i32* %listen_fd, align 4
  %17 = load i32* %flags, align 4
  %or = or i32 %17, 2048
  %call28 = call i32 (i32, i32, ...)* @fcntl(i32 %16, i32 4, i32 %or)
  %cmp29 = icmp slt i32 %call28, 0
  br i1 %cmp29, label %if.then31, label %if.end33

if.then31:                                        ; preds = %if.end27
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([20 x i8]* @.str547, i32 0, i32 0))
  %18 = load i32* %listen_fd, align 4
  %call32 = call i32 @close(i32 %18)
  store i32 -1, i32* %retval
  br label %return

if.end33:                                         ; preds = %if.end27
  %19 = load i32* %listen_fd, align 4
  %call34 = call i32 @listen(i32 %19, i32 1024) #5
  %cmp35 = icmp slt i32 %call34, 0
  br i1 %cmp35, label %if.then37, label %if.end39

if.then37:                                        ; preds = %if.end33
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([12 x i8]* @.str548, i32 0, i32 0))
  %20 = load i32* %listen_fd, align 4
  %call38 = call i32 @close(i32 %20)
  store i32 -1, i32* %retval
  br label %return

if.end39:                                         ; preds = %if.end33
  %21 = load i32* %listen_fd, align 4
  store i32 %21, i32* %retval
  br label %return

return:                                           ; preds = %if.end39, %if.then37, %if.then31, %if.then25, %if.then18, %if.then3, %if.then
  %22 = load i32* %retval
  ret i32 %22
}

; Function Attrs: nounwind uwtable
define internal void @free_httpd_server(%struct.httpd_server* %hs) #0 {
entry:
  %hs.addr = alloca %struct.httpd_server*, align 8
  store %struct.httpd_server* %hs, %struct.httpd_server** %hs.addr, align 8
  %0 = load %struct.httpd_server** %hs.addr, align 8
  %binding_hostname = getelementptr inbounds %struct.httpd_server* %0, i32 0, i32 0
  %1 = load i8** %binding_hostname, align 8
  %cmp = icmp ne i8* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.httpd_server** %hs.addr, align 8
  %binding_hostname1 = getelementptr inbounds %struct.httpd_server* %2, i32 0, i32 0
  %3 = load i8** %binding_hostname1, align 8
  call void @free(i8* %3) #5
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.httpd_server** %hs.addr, align 8
  %cwd = getelementptr inbounds %struct.httpd_server* %4, i32 0, i32 9
  %5 = load i8** %cwd, align 8
  %cmp2 = icmp ne i8* %5, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %6 = load %struct.httpd_server** %hs.addr, align 8
  %cwd4 = getelementptr inbounds %struct.httpd_server* %6, i32 0, i32 9
  %7 = load i8** %cwd4, align 8
  call void @free(i8* %7) #5
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %8 = load %struct.httpd_server** %hs.addr, align 8
  %cgi_pattern = getelementptr inbounds %struct.httpd_server* %8, i32 0, i32 3
  %9 = load i8** %cgi_pattern, align 8
  %cmp6 = icmp ne i8* %9, null
  br i1 %cmp6, label %if.then7, label %if.end9

if.then7:                                         ; preds = %if.end5
  %10 = load %struct.httpd_server** %hs.addr, align 8
  %cgi_pattern8 = getelementptr inbounds %struct.httpd_server* %10, i32 0, i32 3
  %11 = load i8** %cgi_pattern8, align 8
  call void @free(i8* %11) #5
  br label %if.end9

if.end9:                                          ; preds = %if.then7, %if.end5
  %12 = load %struct.httpd_server** %hs.addr, align 8
  %charset = getelementptr inbounds %struct.httpd_server* %12, i32 0, i32 6
  %13 = load i8** %charset, align 8
  %cmp10 = icmp ne i8* %13, null
  br i1 %cmp10, label %if.then11, label %if.end13

if.then11:                                        ; preds = %if.end9
  %14 = load %struct.httpd_server** %hs.addr, align 8
  %charset12 = getelementptr inbounds %struct.httpd_server* %14, i32 0, i32 6
  %15 = load i8** %charset12, align 8
  call void @free(i8* %15) #5
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %if.end9
  %16 = load %struct.httpd_server** %hs.addr, align 8
  %p3p = getelementptr inbounds %struct.httpd_server* %16, i32 0, i32 7
  %17 = load i8** %p3p, align 8
  %cmp14 = icmp ne i8* %17, null
  br i1 %cmp14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.end13
  %18 = load %struct.httpd_server** %hs.addr, align 8
  %p3p16 = getelementptr inbounds %struct.httpd_server* %18, i32 0, i32 7
  %19 = load i8** %p3p16, align 8
  call void @free(i8* %19) #5
  br label %if.end17

if.end17:                                         ; preds = %if.then15, %if.end13
  %20 = load %struct.httpd_server** %hs.addr, align 8
  %url_pattern = getelementptr inbounds %struct.httpd_server* %20, i32 0, i32 17
  %21 = load i8** %url_pattern, align 8
  %cmp18 = icmp ne i8* %21, null
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %if.end17
  %22 = load %struct.httpd_server** %hs.addr, align 8
  %url_pattern20 = getelementptr inbounds %struct.httpd_server* %22, i32 0, i32 17
  %23 = load i8** %url_pattern20, align 8
  call void @free(i8* %23) #5
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %if.end17
  %24 = load %struct.httpd_server** %hs.addr, align 8
  %local_pattern = getelementptr inbounds %struct.httpd_server* %24, i32 0, i32 18
  %25 = load i8** %local_pattern, align 8
  %cmp22 = icmp ne i8* %25, null
  br i1 %cmp22, label %if.then23, label %if.end25

if.then23:                                        ; preds = %if.end21
  %26 = load %struct.httpd_server** %hs.addr, align 8
  %local_pattern24 = getelementptr inbounds %struct.httpd_server* %26, i32 0, i32 18
  %27 = load i8** %local_pattern24, align 8
  call void @free(i8* %27) #5
  br label %if.end25

if.end25:                                         ; preds = %if.then23, %if.end21
  %28 = load %struct.httpd_server** %hs.addr, align 8
  %29 = bitcast %struct.httpd_server* %28 to i8*
  call void @free(i8* %29) #5
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @init_mime() #0 {
entry:
  %i = alloca i32, align 4
  call void @qsort(i8* bitcast ([3 x %struct.mime_entry]* @enc_tab to i8*), i64 3, i64 32, i32 (i8*, i8*)* @ext_compare)
  call void @qsort(i8* bitcast ([193 x %struct.mime_entry]* @typ_tab to i8*), i64 193, i64 32, i32 (i8*, i8*)* @ext_compare)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32* %i, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [3 x %struct.mime_entry]* @enc_tab, i32 0, i64 %idxprom
  %ext = getelementptr inbounds %struct.mime_entry* %arrayidx, i32 0, i32 0
  %2 = load i8** %ext, align 8
  %call = call i64 @strlen(i8* %2) #8
  %3 = load i32* %i, align 4
  %idxprom1 = sext i32 %3 to i64
  %arrayidx2 = getelementptr inbounds [3 x %struct.mime_entry]* @enc_tab, i32 0, i64 %idxprom1
  %ext_len = getelementptr inbounds %struct.mime_entry* %arrayidx2, i32 0, i32 1
  store i64 %call, i64* %ext_len, align 8
  %4 = load i32* %i, align 4
  %idxprom3 = sext i32 %4 to i64
  %arrayidx4 = getelementptr inbounds [3 x %struct.mime_entry]* @enc_tab, i32 0, i64 %idxprom3
  %val = getelementptr inbounds %struct.mime_entry* %arrayidx4, i32 0, i32 2
  %5 = load i8** %val, align 8
  %call5 = call i64 @strlen(i8* %5) #8
  %6 = load i32* %i, align 4
  %idxprom6 = sext i32 %6 to i64
  %arrayidx7 = getelementptr inbounds [3 x %struct.mime_entry]* @enc_tab, i32 0, i64 %idxprom6
  %val_len = getelementptr inbounds %struct.mime_entry* %arrayidx7, i32 0, i32 3
  store i64 %call5, i64* %val_len, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc25, %for.end
  %8 = load i32* %i, align 4
  %cmp9 = icmp slt i32 %8, 193
  br i1 %cmp9, label %for.body10, label %for.end27

for.body10:                                       ; preds = %for.cond8
  %9 = load i32* %i, align 4
  %idxprom11 = sext i32 %9 to i64
  %arrayidx12 = getelementptr inbounds [193 x %struct.mime_entry]* @typ_tab, i32 0, i64 %idxprom11
  %ext13 = getelementptr inbounds %struct.mime_entry* %arrayidx12, i32 0, i32 0
  %10 = load i8** %ext13, align 8
  %call14 = call i64 @strlen(i8* %10) #8
  %11 = load i32* %i, align 4
  %idxprom15 = sext i32 %11 to i64
  %arrayidx16 = getelementptr inbounds [193 x %struct.mime_entry]* @typ_tab, i32 0, i64 %idxprom15
  %ext_len17 = getelementptr inbounds %struct.mime_entry* %arrayidx16, i32 0, i32 1
  store i64 %call14, i64* %ext_len17, align 8
  %12 = load i32* %i, align 4
  %idxprom18 = sext i32 %12 to i64
  %arrayidx19 = getelementptr inbounds [193 x %struct.mime_entry]* @typ_tab, i32 0, i64 %idxprom18
  %val20 = getelementptr inbounds %struct.mime_entry* %arrayidx19, i32 0, i32 2
  %13 = load i8** %val20, align 8
  %call21 = call i64 @strlen(i8* %13) #8
  %14 = load i32* %i, align 4
  %idxprom22 = sext i32 %14 to i64
  %arrayidx23 = getelementptr inbounds [193 x %struct.mime_entry]* @typ_tab, i32 0, i64 %idxprom22
  %val_len24 = getelementptr inbounds %struct.mime_entry* %arrayidx23, i32 0, i32 3
  store i64 %call21, i64* %val_len24, align 8
  br label %for.inc25

for.inc25:                                        ; preds = %for.body10
  %15 = load i32* %i, align 4
  %inc26 = add nsw i32 %15, 1
  store i32 %inc26, i32* %i, align 4
  br label %for.cond8

for.end27:                                        ; preds = %for.cond8
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @sockaddr_len(%union.httpd_sockaddr* %saP) #0 {
entry:
  %retval = alloca i64, align 8
  %saP.addr = alloca %union.httpd_sockaddr*, align 8
  store %union.httpd_sockaddr* %saP, %union.httpd_sockaddr** %saP.addr, align 8
  %0 = load %union.httpd_sockaddr** %saP.addr, align 8
  %sa = bitcast %union.httpd_sockaddr* %0 to %struct.sockaddr*
  %sa_family = getelementptr inbounds %struct.sockaddr* %sa, i32 0, i32 0
  %1 = load i16* %sa_family, align 2
  %conv = zext i16 %1 to i32
  switch i32 %conv, label %sw.default [
    i32 2, label %sw.bb
    i32 10, label %sw.bb1
  ]

sw.bb:                                            ; preds = %entry
  store i64 16, i64* %retval
  br label %return

sw.bb1:                                           ; preds = %entry
  store i64 28, i64* %retval
  br label %return

sw.default:                                       ; preds = %entry
  store i64 0, i64* %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb1, %sw.bb
  %2 = load i64* %retval
  ret i64 %2
}

; Function Attrs: nounwind uwtable
define internal i32 @my_snprintf(i8* %str, i64 %size, i8* %format, ...) #0 {
entry:
  %str.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %format.addr = alloca i8*, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %r = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i8* %format, i8** %format.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %0 = load i8** %str.addr, align 8
  %1 = load i64* %size.addr, align 8
  %2 = load i8** %format.addr, align 8
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %call = call i32 @vsnprintf(i8* %0, i64 %1, i8* %2, %struct.__va_list_tag* %arraydecay2) #5
  store i32 %call, i32* %r, align 4
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*
  call void @llvm.va_end(i8* %arraydecay34)
  %3 = load i32* %r, align 4
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define internal i32 @send_err_file(%struct.httpd_conn* %hc, i32 %status, i8* %title, i8* %extraheads, i8* %filename) #0 {
entry:
  %retval = alloca i32, align 4
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %status.addr = alloca i32, align 4
  %title.addr = alloca i8*, align 8
  %extraheads.addr = alloca i8*, align 8
  %filename.addr = alloca i8*, align 8
  %fp = alloca %struct._IO_FILE*, align 8
  %buf = alloca [1000 x i8], align 16
  %r = alloca i64, align 8
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  store i32 %status, i32* %status.addr, align 4
  store i8* %title, i8** %title.addr, align 8
  store i8* %extraheads, i8** %extraheads.addr, align 8
  store i8* %filename, i8** %filename.addr, align 8
  %0 = load i8** %filename.addr, align 8
  %call = call %struct._IO_FILE* @fopen(i8* %0, i8* getelementptr inbounds ([2 x i8]* @.str510, i32 0, i32 0))
  store %struct._IO_FILE* %call, %struct._IO_FILE** %fp, align 8
  %1 = load %struct._IO_FILE** %fp, align 8
  %cmp = icmp eq %struct._IO_FILE* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.httpd_conn** %hc.addr, align 8
  %3 = load i32* %status.addr, align 4
  %4 = load i8** %title.addr, align 8
  %5 = load i8** %extraheads.addr, align 8
  call void @send_mime(%struct.httpd_conn* %2, i32 %3, i8* %4, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %5, i8* getelementptr inbounds ([22 x i8]* @.str183, i32 0, i32 0), i64 -1, i64 0)
  br label %for.cond

for.cond:                                         ; preds = %if.end4, %if.end
  %arraydecay = getelementptr inbounds [1000 x i8]* %buf, i32 0, i32 0
  %6 = load %struct._IO_FILE** %fp, align 8
  %call1 = call i64 @fread(i8* %arraydecay, i64 1, i64 999, %struct._IO_FILE* %6)
  store i64 %call1, i64* %r, align 8
  %7 = load i64* %r, align 8
  %cmp2 = icmp eq i64 %7, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %for.cond
  br label %for.end

if.end4:                                          ; preds = %for.cond
  %8 = load i64* %r, align 8
  %arrayidx = getelementptr inbounds [1000 x i8]* %buf, i32 0, i64 %8
  store i8 0, i8* %arrayidx, align 1
  %9 = load %struct.httpd_conn** %hc.addr, align 8
  %arraydecay5 = getelementptr inbounds [1000 x i8]* %buf, i32 0, i32 0
  call void @add_response(%struct.httpd_conn* %9, i8* %arraydecay5)
  br label %for.cond

for.end:                                          ; preds = %if.then3
  %10 = load %struct._IO_FILE** %fp, align 8
  %call6 = call i32 @fclose(%struct._IO_FILE* %10)
  %11 = load %struct.httpd_conn** %hc.addr, align 8
  call void @send_response_tail(%struct.httpd_conn* %11)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %12 = load i32* %retval
  ret i32 %12
}

; Function Attrs: nounwind uwtable
define internal void @send_response(%struct.httpd_conn* %hc, i32 %status, i8* %title, i8* %extraheads, i8* %form, i8* %arg) #0 {
entry:
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %status.addr = alloca i32, align 4
  %title.addr = alloca i8*, align 8
  %extraheads.addr = alloca i8*, align 8
  %form.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %defanged_arg = alloca [1000 x i8], align 16
  %buf = alloca [2000 x i8], align 16
  %n = alloca i32, align 4
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  store i32 %status, i32* %status.addr, align 4
  store i8* %title, i8** %title.addr, align 8
  store i8* %extraheads, i8** %extraheads.addr, align 8
  store i8* %form, i8** %form.addr, align 8
  store i8* %arg, i8** %arg.addr, align 8
  %0 = load %struct.httpd_conn** %hc.addr, align 8
  %1 = load i32* %status.addr, align 4
  %2 = load i8** %title.addr, align 8
  %3 = load i8** %extraheads.addr, align 8
  call void @send_mime(%struct.httpd_conn* %0, i32 %1, i8* %2, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %3, i8* getelementptr inbounds ([22 x i8]* @.str183, i32 0, i32 0), i64 -1, i64 0)
  %arraydecay = getelementptr inbounds [2000 x i8]* %buf, i32 0, i32 0
  %4 = load i32* %status.addr, align 4
  %5 = load i8** %title.addr, align 8
  %6 = load i32* %status.addr, align 4
  %7 = load i8** %title.addr, align 8
  %call = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %arraydecay, i64 2000, i8* getelementptr inbounds ([322 x i8]* @.str537, i32 0, i32 0), i32 %4, i8* %5, i32 %6, i8* %7)
  %8 = load %struct.httpd_conn** %hc.addr, align 8
  %arraydecay1 = getelementptr inbounds [2000 x i8]* %buf, i32 0, i32 0
  call void @add_response(%struct.httpd_conn* %8, i8* %arraydecay1)
  %9 = load i8** %arg.addr, align 8
  %arraydecay2 = getelementptr inbounds [1000 x i8]* %defanged_arg, i32 0, i32 0
  call void @defang(i8* %9, i8* %arraydecay2, i32 1000)
  %arraydecay3 = getelementptr inbounds [2000 x i8]* %buf, i32 0, i32 0
  %10 = load i8** %form.addr, align 8
  %arraydecay4 = getelementptr inbounds [1000 x i8]* %defanged_arg, i32 0, i32 0
  %call5 = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %arraydecay3, i64 2000, i8* %10, i8* %arraydecay4)
  %11 = load %struct.httpd_conn** %hc.addr, align 8
  %arraydecay6 = getelementptr inbounds [2000 x i8]* %buf, i32 0, i32 0
  call void @add_response(%struct.httpd_conn* %11, i8* %arraydecay6)
  %12 = load %struct.httpd_conn** %hc.addr, align 8
  %useragent = getelementptr inbounds %struct.httpd_conn* %12, i32 0, i32 21
  %13 = load i8** %useragent, align 8
  %call7 = call i32 @match(i8* getelementptr inbounds ([9 x i8]* @.str538, i32 0, i32 0), i8* %13)
  %tobool = icmp ne i32 %call7, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %14 = load %struct.httpd_conn** %hc.addr, align 8
  call void @add_response(%struct.httpd_conn* %14, i8* getelementptr inbounds ([6 x i8]* @.str539, i32 0, i32 0))
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %15 = load i32* %n, align 4
  %cmp = icmp slt i32 %15, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load %struct.httpd_conn** %hc.addr, align 8
  call void @add_response(%struct.httpd_conn* %16, i8* getelementptr inbounds ([79 x i8]* @.str540, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32* %n, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load %struct.httpd_conn** %hc.addr, align 8
  call void @add_response(%struct.httpd_conn* %18, i8* getelementptr inbounds ([5 x i8]* @.str541, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  %19 = load %struct.httpd_conn** %hc.addr, align 8
  call void @send_response_tail(%struct.httpd_conn* %19)
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @sockaddr_check(%union.httpd_sockaddr* %saP) #0 {
entry:
  %retval = alloca i32, align 4
  %saP.addr = alloca %union.httpd_sockaddr*, align 8
  store %union.httpd_sockaddr* %saP, %union.httpd_sockaddr** %saP.addr, align 8
  %0 = load %union.httpd_sockaddr** %saP.addr, align 8
  %sa = bitcast %union.httpd_sockaddr* %0 to %struct.sockaddr*
  %sa_family = getelementptr inbounds %struct.sockaddr* %sa, i32 0, i32 0
  %1 = load i16* %sa_family, align 2
  %conv = zext i16 %1 to i32
  switch i32 %conv, label %sw.default [
    i32 2, label %sw.bb
    i32 10, label %sw.bb1
  ]

sw.bb:                                            ; preds = %entry
  store i32 1, i32* %retval
  br label %return

sw.bb1:                                           ; preds = %entry
  store i32 1, i32* %retval
  br label %return

sw.default:                                       ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb1, %sw.bb
  %2 = load i32* %retval
  ret i32 %2
}

; Function Attrs: nounwind uwtable
define internal i8* @bufgets(%struct.httpd_conn* %hc) #0 {
entry:
  %retval = alloca i8*, align 8
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %i = alloca i32, align 4
  %c = alloca i8, align 1
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  %0 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_idx = getelementptr inbounds %struct.httpd_conn* %0, i32 0, i32 6
  %1 = load i64* %checked_idx, align 8
  %conv = trunc i64 %1 to i32
  store i32 %conv, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_idx1 = getelementptr inbounds %struct.httpd_conn* %2, i32 0, i32 6
  %3 = load i64* %checked_idx1, align 8
  %4 = load %struct.httpd_conn** %hc.addr, align 8
  %read_idx = getelementptr inbounds %struct.httpd_conn* %4, i32 0, i32 5
  %5 = load i64* %read_idx, align 8
  %cmp = icmp ult i64 %3, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_idx3 = getelementptr inbounds %struct.httpd_conn* %6, i32 0, i32 6
  %7 = load i64* %checked_idx3, align 8
  %8 = load %struct.httpd_conn** %hc.addr, align 8
  %read_buf = getelementptr inbounds %struct.httpd_conn* %8, i32 0, i32 3
  %9 = load i8** %read_buf, align 8
  %arrayidx = getelementptr inbounds i8* %9, i64 %7
  %10 = load i8* %arrayidx, align 1
  store i8 %10, i8* %c, align 1
  %11 = load i8* %c, align 1
  %conv4 = sext i8 %11 to i32
  %cmp5 = icmp eq i32 %conv4, 10
  br i1 %cmp5, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %12 = load i8* %c, align 1
  %conv7 = sext i8 %12 to i32
  %cmp8 = icmp eq i32 %conv7, 13
  br i1 %cmp8, label %if.then, label %if.end36

if.then:                                          ; preds = %lor.lhs.false, %for.body
  %13 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_idx10 = getelementptr inbounds %struct.httpd_conn* %13, i32 0, i32 6
  %14 = load i64* %checked_idx10, align 8
  %15 = load %struct.httpd_conn** %hc.addr, align 8
  %read_buf11 = getelementptr inbounds %struct.httpd_conn* %15, i32 0, i32 3
  %16 = load i8** %read_buf11, align 8
  %arrayidx12 = getelementptr inbounds i8* %16, i64 %14
  store i8 0, i8* %arrayidx12, align 1
  %17 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_idx13 = getelementptr inbounds %struct.httpd_conn* %17, i32 0, i32 6
  %18 = load i64* %checked_idx13, align 8
  %inc = add i64 %18, 1
  store i64 %inc, i64* %checked_idx13, align 8
  %19 = load i8* %c, align 1
  %conv14 = sext i8 %19 to i32
  %cmp15 = icmp eq i32 %conv14, 13
  br i1 %cmp15, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %20 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_idx17 = getelementptr inbounds %struct.httpd_conn* %20, i32 0, i32 6
  %21 = load i64* %checked_idx17, align 8
  %22 = load %struct.httpd_conn** %hc.addr, align 8
  %read_idx18 = getelementptr inbounds %struct.httpd_conn* %22, i32 0, i32 5
  %23 = load i64* %read_idx18, align 8
  %cmp19 = icmp ult i64 %21, %23
  br i1 %cmp19, label %land.lhs.true21, label %if.end

land.lhs.true21:                                  ; preds = %land.lhs.true
  %24 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_idx22 = getelementptr inbounds %struct.httpd_conn* %24, i32 0, i32 6
  %25 = load i64* %checked_idx22, align 8
  %26 = load %struct.httpd_conn** %hc.addr, align 8
  %read_buf23 = getelementptr inbounds %struct.httpd_conn* %26, i32 0, i32 3
  %27 = load i8** %read_buf23, align 8
  %arrayidx24 = getelementptr inbounds i8* %27, i64 %25
  %28 = load i8* %arrayidx24, align 1
  %conv25 = sext i8 %28 to i32
  %cmp26 = icmp eq i32 %conv25, 10
  br i1 %cmp26, label %if.then28, label %if.end

if.then28:                                        ; preds = %land.lhs.true21
  %29 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_idx29 = getelementptr inbounds %struct.httpd_conn* %29, i32 0, i32 6
  %30 = load i64* %checked_idx29, align 8
  %31 = load %struct.httpd_conn** %hc.addr, align 8
  %read_buf30 = getelementptr inbounds %struct.httpd_conn* %31, i32 0, i32 3
  %32 = load i8** %read_buf30, align 8
  %arrayidx31 = getelementptr inbounds i8* %32, i64 %30
  store i8 0, i8* %arrayidx31, align 1
  %33 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_idx32 = getelementptr inbounds %struct.httpd_conn* %33, i32 0, i32 6
  %34 = load i64* %checked_idx32, align 8
  %inc33 = add i64 %34, 1
  store i64 %inc33, i64* %checked_idx32, align 8
  br label %if.end

if.end:                                           ; preds = %if.then28, %land.lhs.true21, %land.lhs.true, %if.then
  %35 = load i32* %i, align 4
  %idxprom = sext i32 %35 to i64
  %36 = load %struct.httpd_conn** %hc.addr, align 8
  %read_buf34 = getelementptr inbounds %struct.httpd_conn* %36, i32 0, i32 3
  %37 = load i8** %read_buf34, align 8
  %arrayidx35 = getelementptr inbounds i8* %37, i64 %idxprom
  store i8* %arrayidx35, i8** %retval
  br label %return

if.end36:                                         ; preds = %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end36
  %38 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_idx37 = getelementptr inbounds %struct.httpd_conn* %38, i32 0, i32 6
  %39 = load i64* %checked_idx37, align 8
  %inc38 = add i64 %39, 1
  store i64 %inc38, i64* %checked_idx37, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i8* null, i8** %retval
  br label %return

return:                                           ; preds = %for.end, %if.end
  %40 = load i8** %retval
  ret i8* %40
}

; Function Attrs: nounwind uwtable
define internal void @strdecode(i8* %to, i8* %from) #0 {
entry:
  %to.addr = alloca i8*, align 8
  %from.addr = alloca i8*, align 8
  store i8* %to, i8** %to.addr, align 8
  store i8* %from, i8** %from.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8** %from.addr, align 8
  %1 = load i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8** %from.addr, align 8
  %arrayidx = getelementptr inbounds i8* %2, i64 0
  %3 = load i8* %arrayidx, align 1
  %conv2 = sext i8 %3 to i32
  %cmp3 = icmp eq i32 %conv2, 37
  br i1 %cmp3, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body
  %4 = load i8** %from.addr, align 8
  %arrayidx5 = getelementptr inbounds i8* %4, i64 1
  %5 = load i8* %arrayidx5, align 1
  %conv6 = sext i8 %5 to i32
  %idxprom = sext i32 %conv6 to i64
  %call = call i16** @__ctype_b_loc() #10
  %6 = load i16** %call, align 8
  %arrayidx7 = getelementptr inbounds i16* %6, i64 %idxprom
  %7 = load i16* %arrayidx7, align 2
  %conv8 = zext i16 %7 to i32
  %and = and i32 %conv8, 4096
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true9, label %if.else

land.lhs.true9:                                   ; preds = %land.lhs.true
  %8 = load i8** %from.addr, align 8
  %arrayidx10 = getelementptr inbounds i8* %8, i64 2
  %9 = load i8* %arrayidx10, align 1
  %conv11 = sext i8 %9 to i32
  %idxprom12 = sext i32 %conv11 to i64
  %call13 = call i16** @__ctype_b_loc() #10
  %10 = load i16** %call13, align 8
  %arrayidx14 = getelementptr inbounds i16* %10, i64 %idxprom12
  %11 = load i16* %arrayidx14, align 2
  %conv15 = zext i16 %11 to i32
  %and16 = and i32 %conv15, 4096
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true9
  %12 = load i8** %from.addr, align 8
  %arrayidx18 = getelementptr inbounds i8* %12, i64 1
  %13 = load i8* %arrayidx18, align 1
  %call19 = call i32 @hexit(i8 signext %13)
  %mul = mul nsw i32 %call19, 16
  %14 = load i8** %from.addr, align 8
  %arrayidx20 = getelementptr inbounds i8* %14, i64 2
  %15 = load i8* %arrayidx20, align 1
  %call21 = call i32 @hexit(i8 signext %15)
  %add = add nsw i32 %mul, %call21
  %conv22 = trunc i32 %add to i8
  %16 = load i8** %to.addr, align 8
  store i8 %conv22, i8* %16, align 1
  %17 = load i8** %from.addr, align 8
  %add.ptr = getelementptr inbounds i8* %17, i64 2
  store i8* %add.ptr, i8** %from.addr, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true9, %land.lhs.true, %for.body
  %18 = load i8** %from.addr, align 8
  %19 = load i8* %18, align 1
  %20 = load i8** %to.addr, align 8
  store i8 %19, i8* %20, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %21 = load i8** %to.addr, align 8
  %incdec.ptr = getelementptr inbounds i8* %21, i32 1
  store i8* %incdec.ptr, i8** %to.addr, align 8
  %22 = load i8** %from.addr, align 8
  %incdec.ptr23 = getelementptr inbounds i8* %22, i32 1
  store i8* %incdec.ptr23, i8** %from.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load i8** %to.addr, align 8
  store i8 0, i8* %23, align 1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @de_dotdot(i8* %file) #0 {
entry:
  %file.addr = alloca i8*, align 8
  %cp = alloca i8*, align 8
  %cp2 = alloca i8*, align 8
  %l = alloca i32, align 4
  store i8* %file, i8** %file.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %for.end, %entry
  %0 = load i8** %file.addr, align 8
  %call = call i8* @strstr(i8* %0, i8* getelementptr inbounds ([3 x i8]* @.str506, i32 0, i32 0)) #8
  store i8* %call, i8** %cp, align 8
  %cmp = icmp ne i8* %call, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8** %cp, align 8
  %add.ptr = getelementptr inbounds i8* %1, i64 2
  store i8* %add.ptr, i8** %cp2, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %2 = load i8** %cp2, align 8
  %3 = load i8* %2, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 47
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i8** %cp2, align 8
  %incdec.ptr = getelementptr inbounds i8* %4, i32 1
  store i8* %incdec.ptr, i8** %cp2, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load i8** %cp, align 8
  %add.ptr3 = getelementptr inbounds i8* %5, i64 1
  %6 = load i8** %cp2, align 8
  %7 = load i8** %cp2, align 8
  %call4 = call i64 @strlen(i8* %7) #8
  %add = add i64 %call4, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %add.ptr3, i8* %6, i64 %add, i32 1, i1 false)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %while.cond5

while.cond5:                                      ; preds = %while.body9, %while.end
  %8 = load i8** %file.addr, align 8
  %call6 = call i32 @strncmp(i8* %8, i8* getelementptr inbounds ([3 x i8]* @.str76220, i32 0, i32 0), i64 2) #8
  %cmp7 = icmp eq i32 %call6, 0
  br i1 %cmp7, label %while.body9, label %while.end14

while.body9:                                      ; preds = %while.cond5
  %9 = load i8** %file.addr, align 8
  %10 = load i8** %file.addr, align 8
  %add.ptr10 = getelementptr inbounds i8* %10, i64 2
  %11 = load i8** %file.addr, align 8
  %add.ptr11 = getelementptr inbounds i8* %11, i64 2
  %call12 = call i64 @strlen(i8* %add.ptr11) #8
  %add13 = add i64 %call12, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %9, i8* %add.ptr10, i64 %add13, i32 1, i1 false)
  br label %while.cond5

while.end14:                                      ; preds = %while.cond5
  br label %while.cond15

while.cond15:                                     ; preds = %while.body19, %while.end14
  %12 = load i8** %file.addr, align 8
  %call16 = call i8* @strstr(i8* %12, i8* getelementptr inbounds ([4 x i8]* @.str522, i32 0, i32 0)) #8
  store i8* %call16, i8** %cp, align 8
  %cmp17 = icmp ne i8* %call16, null
  br i1 %cmp17, label %while.body19, label %while.end24

while.body19:                                     ; preds = %while.cond15
  %13 = load i8** %cp, align 8
  %14 = load i8** %cp, align 8
  %add.ptr20 = getelementptr inbounds i8* %14, i64 2
  %15 = load i8** %cp, align 8
  %add.ptr21 = getelementptr inbounds i8* %15, i64 2
  %call22 = call i64 @strlen(i8* %add.ptr21) #8
  %add23 = add i64 %call22, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %13, i8* %add.ptr20, i64 %add23, i32 1, i1 false)
  br label %while.cond15

while.end24:                                      ; preds = %while.cond15
  br label %for.cond25

for.cond25:                                       ; preds = %for.end49, %while.end24
  br label %while.cond26

while.cond26:                                     ; preds = %while.body30, %for.cond25
  %16 = load i8** %file.addr, align 8
  %call27 = call i32 @strncmp(i8* %16, i8* getelementptr inbounds ([4 x i8]* @.str523, i32 0, i32 0), i64 3) #8
  %cmp28 = icmp eq i32 %call27, 0
  br i1 %cmp28, label %while.body30, label %while.end35

while.body30:                                     ; preds = %while.cond26
  %17 = load i8** %file.addr, align 8
  %18 = load i8** %file.addr, align 8
  %add.ptr31 = getelementptr inbounds i8* %18, i64 3
  %19 = load i8** %file.addr, align 8
  %add.ptr32 = getelementptr inbounds i8* %19, i64 3
  %call33 = call i64 @strlen(i8* %add.ptr32) #8
  %add34 = add i64 %call33, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %17, i8* %add.ptr31, i64 %add34, i32 1, i1 false)
  br label %while.cond26

while.end35:                                      ; preds = %while.cond26
  %20 = load i8** %file.addr, align 8
  %call36 = call i8* @strstr(i8* %20, i8* getelementptr inbounds ([5 x i8]* @.str524, i32 0, i32 0)) #8
  store i8* %call36, i8** %cp, align 8
  %21 = load i8** %cp, align 8
  %cmp37 = icmp eq i8* %21, null
  br i1 %cmp37, label %if.then, label %if.end

if.then:                                          ; preds = %while.end35
  br label %for.end55

if.end:                                           ; preds = %while.end35
  %22 = load i8** %cp, align 8
  %add.ptr39 = getelementptr inbounds i8* %22, i64 -1
  store i8* %add.ptr39, i8** %cp2, align 8
  br label %for.cond40

for.cond40:                                       ; preds = %for.inc47, %if.end
  %23 = load i8** %cp2, align 8
  %24 = load i8** %file.addr, align 8
  %cmp41 = icmp uge i8* %23, %24
  br i1 %cmp41, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond40
  %25 = load i8** %cp2, align 8
  %26 = load i8* %25, align 1
  %conv43 = sext i8 %26 to i32
  %cmp44 = icmp ne i32 %conv43, 47
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond40
  %27 = phi i1 [ false, %for.cond40 ], [ %cmp44, %land.rhs ]
  br i1 %27, label %for.body46, label %for.end49

for.body46:                                       ; preds = %land.end
  br label %for.inc47

for.inc47:                                        ; preds = %for.body46
  %28 = load i8** %cp2, align 8
  %incdec.ptr48 = getelementptr inbounds i8* %28, i32 -1
  store i8* %incdec.ptr48, i8** %cp2, align 8
  br label %for.cond40

for.end49:                                        ; preds = %land.end
  %29 = load i8** %cp2, align 8
  %add.ptr50 = getelementptr inbounds i8* %29, i64 1
  %30 = load i8** %cp, align 8
  %add.ptr51 = getelementptr inbounds i8* %30, i64 4
  %31 = load i8** %cp, align 8
  %add.ptr52 = getelementptr inbounds i8* %31, i64 4
  %call53 = call i64 @strlen(i8* %add.ptr52) #8
  %add54 = add i64 %call53, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %add.ptr50, i8* %add.ptr51, i64 %add54, i32 1, i1 false)
  br label %for.cond25

for.end55:                                        ; preds = %if.then
  br label %while.cond56

while.cond56:                                     ; preds = %if.end85, %for.end55
  %32 = load i8** %file.addr, align 8
  %call57 = call i64 @strlen(i8* %32) #8
  %conv58 = trunc i64 %call57 to i32
  store i32 %conv58, i32* %l, align 4
  %cmp59 = icmp sgt i32 %conv58, 3
  br i1 %cmp59, label %land.rhs61, label %land.end67

land.rhs61:                                       ; preds = %while.cond56
  %33 = load i8** %file.addr, align 8
  %34 = load i32* %l, align 4
  %idx.ext = sext i32 %34 to i64
  %add.ptr62 = getelementptr inbounds i8* %33, i64 %idx.ext
  %add.ptr63 = getelementptr inbounds i8* %add.ptr62, i64 -3
  store i8* %add.ptr63, i8** %cp, align 8
  %call64 = call i32 @strcmp(i8* %add.ptr63, i8* getelementptr inbounds ([4 x i8]* @.str525, i32 0, i32 0)) #8
  %cmp65 = icmp eq i32 %call64, 0
  br label %land.end67

land.end67:                                       ; preds = %land.rhs61, %while.cond56
  %35 = phi i1 [ false, %while.cond56 ], [ %cmp65, %land.rhs61 ]
  br i1 %35, label %while.body68, label %while.end86

while.body68:                                     ; preds = %land.end67
  %36 = load i8** %cp, align 8
  %add.ptr69 = getelementptr inbounds i8* %36, i64 -1
  store i8* %add.ptr69, i8** %cp2, align 8
  br label %for.cond70

for.cond70:                                       ; preds = %for.inc79, %while.body68
  %37 = load i8** %cp2, align 8
  %38 = load i8** %file.addr, align 8
  %cmp71 = icmp uge i8* %37, %38
  br i1 %cmp71, label %land.rhs73, label %land.end77

land.rhs73:                                       ; preds = %for.cond70
  %39 = load i8** %cp2, align 8
  %40 = load i8* %39, align 1
  %conv74 = sext i8 %40 to i32
  %cmp75 = icmp ne i32 %conv74, 47
  br label %land.end77

land.end77:                                       ; preds = %land.rhs73, %for.cond70
  %41 = phi i1 [ false, %for.cond70 ], [ %cmp75, %land.rhs73 ]
  br i1 %41, label %for.body78, label %for.end81

for.body78:                                       ; preds = %land.end77
  br label %for.inc79

for.inc79:                                        ; preds = %for.body78
  %42 = load i8** %cp2, align 8
  %incdec.ptr80 = getelementptr inbounds i8* %42, i32 -1
  store i8* %incdec.ptr80, i8** %cp2, align 8
  br label %for.cond70

for.end81:                                        ; preds = %land.end77
  %43 = load i8** %cp2, align 8
  %44 = load i8** %file.addr, align 8
  %cmp82 = icmp ult i8* %43, %44
  br i1 %cmp82, label %if.then84, label %if.end85

if.then84:                                        ; preds = %for.end81
  br label %while.end86

if.end85:                                         ; preds = %for.end81
  %45 = load i8** %cp2, align 8
  store i8 0, i8* %45, align 1
  br label %while.cond56

while.end86:                                      ; preds = %if.then84, %land.end67
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @vhost_map(%struct.httpd_conn* %hc) #0 {
entry:
  %retval = alloca i32, align 4
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %sa = alloca %union.httpd_sockaddr, align 8
  %sz = alloca i32, align 4
  %cp1 = alloca i8*, align 8
  %len = alloca i32, align 4
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  %0 = load %struct.httpd_conn** %hc.addr, align 8
  %reqhost = getelementptr inbounds %struct.httpd_conn* %0, i32 0, i32 27
  %1 = load i8** %reqhost, align 8
  %arrayidx = getelementptr inbounds i8* %1, i64 0
  %2 = load i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %struct.httpd_conn** %hc.addr, align 8
  %reqhost2 = getelementptr inbounds %struct.httpd_conn* %3, i32 0, i32 27
  %4 = load i8** %reqhost2, align 8
  %5 = load %struct.httpd_conn** %hc.addr, align 8
  %hostname = getelementptr inbounds %struct.httpd_conn* %5, i32 0, i32 50
  store i8* %4, i8** %hostname, align 8
  br label %if.end18

if.else:                                          ; preds = %entry
  %6 = load %struct.httpd_conn** %hc.addr, align 8
  %hdrhost = getelementptr inbounds %struct.httpd_conn* %6, i32 0, i32 28
  %7 = load i8** %hdrhost, align 8
  %arrayidx3 = getelementptr inbounds i8* %7, i64 0
  %8 = load i8* %arrayidx3, align 1
  %conv4 = sext i8 %8 to i32
  %cmp5 = icmp ne i32 %conv4, 0
  br i1 %cmp5, label %if.then7, label %if.else10

if.then7:                                         ; preds = %if.else
  %9 = load %struct.httpd_conn** %hc.addr, align 8
  %hdrhost8 = getelementptr inbounds %struct.httpd_conn* %9, i32 0, i32 28
  %10 = load i8** %hdrhost8, align 8
  %11 = load %struct.httpd_conn** %hc.addr, align 8
  %hostname9 = getelementptr inbounds %struct.httpd_conn* %11, i32 0, i32 50
  store i8* %10, i8** %hostname9, align 8
  br label %if.end17

if.else10:                                        ; preds = %if.else
  store i32 128, i32* %sz, align 4
  %12 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd = getelementptr inbounds %struct.httpd_conn* %12, i32 0, i32 60
  %13 = load i32* %conn_fd, align 4
  %sa11 = bitcast %union.httpd_sockaddr* %sa to %struct.sockaddr*
  %call = call i32 @getsockname(i32 %13, %struct.sockaddr* %sa11, i32* %sz) #5
  %cmp12 = icmp slt i32 %call, 0
  br i1 %cmp12, label %if.then14, label %if.end

if.then14:                                        ; preds = %if.else10
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([17 x i8]* @.str532, i32 0, i32 0))
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.else10
  %call15 = call i8* @httpd_ntoa(%union.httpd_sockaddr* %sa)
  %14 = load %struct.httpd_conn** %hc.addr, align 8
  %hostname16 = getelementptr inbounds %struct.httpd_conn* %14, i32 0, i32 50
  store i8* %call15, i8** %hostname16, align 8
  br label %if.end17

if.end17:                                         ; preds = %if.end, %if.then7
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.then
  %15 = load %struct.httpd_conn** %hc.addr, align 8
  %hostname19 = getelementptr inbounds %struct.httpd_conn* %15, i32 0, i32 50
  %16 = load i8** %hostname19, align 8
  store i8* %16, i8** %cp1, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end18
  %17 = load i8** %cp1, align 8
  %18 = load i8* %17, align 1
  %conv20 = sext i8 %18 to i32
  %cmp21 = icmp ne i32 %conv20, 0
  br i1 %cmp21, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load i8** %cp1, align 8
  %20 = load i8* %19, align 1
  %conv23 = sext i8 %20 to i32
  %idxprom = sext i32 %conv23 to i64
  %call24 = call i16** @__ctype_b_loc() #10
  %21 = load i16** %call24, align 8
  %arrayidx25 = getelementptr inbounds i16* %21, i64 %idxprom
  %22 = load i16* %arrayidx25, align 2
  %conv26 = zext i16 %22 to i32
  %and = and i32 %conv26, 256
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then27, label %if.end31

if.then27:                                        ; preds = %for.body
  %23 = load i8** %cp1, align 8
  %24 = load i8* %23, align 1
  %conv28 = sext i8 %24 to i32
  %call29 = call i32 @tolower(i32 %conv28) #5
  %conv30 = trunc i32 %call29 to i8
  %25 = load i8** %cp1, align 8
  store i8 %conv30, i8* %25, align 1
  br label %if.end31

if.end31:                                         ; preds = %if.then27, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end31
  %26 = load i8** %cp1, align 8
  %incdec.ptr = getelementptr inbounds i8* %26, i32 1
  store i8* %incdec.ptr, i8** %cp1, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %27 = load %struct.httpd_conn** %hc.addr, align 8
  %tildemapped = getelementptr inbounds %struct.httpd_conn* %27, i32 0, i32 54
  %28 = load i32* %tildemapped, align 4
  %tobool32 = icmp ne i32 %28, 0
  br i1 %tobool32, label %if.then33, label %if.end34

if.then33:                                        ; preds = %for.end
  store i32 1, i32* %retval
  br label %return

if.end34:                                         ; preds = %for.end
  %29 = load %struct.httpd_conn** %hc.addr, align 8
  %hostdir = getelementptr inbounds %struct.httpd_conn* %29, i32 0, i32 29
  %30 = load %struct.httpd_conn** %hc.addr, align 8
  %maxhostdir = getelementptr inbounds %struct.httpd_conn* %30, i32 0, i32 42
  %31 = load %struct.httpd_conn** %hc.addr, align 8
  %hostname35 = getelementptr inbounds %struct.httpd_conn* %31, i32 0, i32 50
  %32 = load i8** %hostname35, align 8
  %call36 = call i64 @strlen(i8* %32) #8
  call void @httpd_realloc_str(i8** %hostdir, i64* %maxhostdir, i64 %call36)
  %33 = load %struct.httpd_conn** %hc.addr, align 8
  %hostdir37 = getelementptr inbounds %struct.httpd_conn* %33, i32 0, i32 29
  %34 = load i8** %hostdir37, align 8
  %35 = load %struct.httpd_conn** %hc.addr, align 8
  %hostname38 = getelementptr inbounds %struct.httpd_conn* %35, i32 0, i32 50
  %36 = load i8** %hostname38, align 8
  %call39 = call i8* @strcpy(i8* %34, i8* %36) #5
  %37 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename = getelementptr inbounds %struct.httpd_conn* %37, i32 0, i32 16
  %38 = load i8** %expnfilename, align 8
  %call40 = call i64 @strlen(i8* %38) #8
  %conv41 = trunc i64 %call40 to i32
  store i32 %conv41, i32* %len, align 4
  %39 = load i32* %len, align 4
  %conv42 = sext i32 %39 to i64
  call void @httpd_realloc_str(i8** @vhost_map.tempfilename, i64* @vhost_map.maxtempfilename, i64 %conv42)
  %40 = load i8** @vhost_map.tempfilename, align 8
  %41 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename43 = getelementptr inbounds %struct.httpd_conn* %41, i32 0, i32 16
  %42 = load i8** %expnfilename43, align 8
  %call44 = call i8* @strcpy(i8* %40, i8* %42) #5
  %43 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename45 = getelementptr inbounds %struct.httpd_conn* %43, i32 0, i32 16
  %44 = load %struct.httpd_conn** %hc.addr, align 8
  %maxexpnfilename = getelementptr inbounds %struct.httpd_conn* %44, i32 0, i32 35
  %45 = load %struct.httpd_conn** %hc.addr, align 8
  %hostdir46 = getelementptr inbounds %struct.httpd_conn* %45, i32 0, i32 29
  %46 = load i8** %hostdir46, align 8
  %call47 = call i64 @strlen(i8* %46) #8
  %add = add i64 %call47, 1
  %47 = load i32* %len, align 4
  %conv48 = sext i32 %47 to i64
  %add49 = add i64 %add, %conv48
  call void @httpd_realloc_str(i8** %expnfilename45, i64* %maxexpnfilename, i64 %add49)
  %48 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename50 = getelementptr inbounds %struct.httpd_conn* %48, i32 0, i32 16
  %49 = load i8** %expnfilename50, align 8
  %50 = load %struct.httpd_conn** %hc.addr, align 8
  %hostdir51 = getelementptr inbounds %struct.httpd_conn* %50, i32 0, i32 29
  %51 = load i8** %hostdir51, align 8
  %call52 = call i8* @strcpy(i8* %49, i8* %51) #5
  %52 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename53 = getelementptr inbounds %struct.httpd_conn* %52, i32 0, i32 16
  %53 = load i8** %expnfilename53, align 8
  %call54 = call i8* @strcat(i8* %53, i8* getelementptr inbounds ([2 x i8]* @.str75219, i32 0, i32 0)) #5
  %54 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename55 = getelementptr inbounds %struct.httpd_conn* %54, i32 0, i32 16
  %55 = load i8** %expnfilename55, align 8
  %56 = load i8** @vhost_map.tempfilename, align 8
  %call56 = call i8* @strcat(i8* %55, i8* %56) #5
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end34, %if.then33, %if.then14
  %57 = load i32* %retval
  ret i32 %57
}

; Function Attrs: nounwind uwtable
define internal i8* @expand_symlinks(i8* %path, i8** %restP, i32 %no_symlink_check, i32 %tildemapped) #0 {
entry:
  %retval = alloca i8*, align 8
  %path.addr = alloca i8*, align 8
  %restP.addr = alloca i8**, align 8
  %no_symlink_check.addr = alloca i32, align 4
  %tildemapped.addr = alloca i32, align 4
  %lnk = alloca [5000 x i8], align 16
  %checkedlen = alloca i64, align 8
  %restlen = alloca i64, align 8
  %linklen = alloca i64, align 8
  %prevcheckedlen = alloca i64, align 8
  %prevrestlen = alloca i64, align 8
  %nlinks = alloca i32, align 4
  %i = alloca i32, align 4
  %r = alloca i8*, align 8
  %cp1 = alloca i8*, align 8
  %cp2 = alloca i8*, align 8
  %sb = alloca %struct.stat, align 8
  store i8* %path, i8** %path.addr, align 8
  store i8** %restP, i8*** %restP.addr, align 8
  store i32 %no_symlink_check, i32* %no_symlink_check.addr, align 4
  store i32 %tildemapped, i32* %tildemapped.addr, align 4
  %0 = load i32* %no_symlink_check.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end9

if.then:                                          ; preds = %entry
  %1 = load i8** %path.addr, align 8
  %call = call i32 @stat(i8* %1, %struct.stat* %sb) #5
  %cmp = icmp ne i32 %call, -1
  br i1 %cmp, label %if.then1, label %if.end

if.then1:                                         ; preds = %if.then
  %2 = load i8** %path.addr, align 8
  %call2 = call i64 @strlen(i8* %2) #8
  store i64 %call2, i64* %checkedlen, align 8
  %3 = load i64* %checkedlen, align 8
  call void @httpd_realloc_str(i8** @expand_symlinks.checked, i64* @expand_symlinks.maxchecked, i64 %3)
  %4 = load i8** @expand_symlinks.checked, align 8
  %5 = load i8** %path.addr, align 8
  %call3 = call i8* @strcpy(i8* %4, i8* %5) #5
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then1
  %6 = load i64* %checkedlen, align 8
  %sub = sub i64 %6, 1
  %7 = load i8** @expand_symlinks.checked, align 8
  %arrayidx = getelementptr inbounds i8* %7, i64 %sub
  %8 = load i8* %arrayidx, align 1
  %conv = sext i8 %8 to i32
  %cmp4 = icmp eq i32 %conv, 47
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i64* %checkedlen, align 8
  %sub6 = sub i64 %9, 1
  %10 = load i8** @expand_symlinks.checked, align 8
  %arrayidx7 = getelementptr inbounds i8* %10, i64 %sub6
  store i8 0, i8* %arrayidx7, align 1
  %11 = load i64* %checkedlen, align 8
  %dec = add i64 %11, -1
  store i64 %dec, i64* %checkedlen, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  call void @httpd_realloc_str(i8** @expand_symlinks.rest, i64* @expand_symlinks.maxrest, i64 0)
  %12 = load i8** @expand_symlinks.rest, align 8
  %arrayidx8 = getelementptr inbounds i8* %12, i64 0
  store i8 0, i8* %arrayidx8, align 1
  %13 = load i8** @expand_symlinks.rest, align 8
  %14 = load i8*** %restP.addr, align 8
  store i8* %13, i8** %14, align 8
  %15 = load i8** @expand_symlinks.checked, align 8
  store i8* %15, i8** %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end9

if.end9:                                          ; preds = %if.end, %entry
  call void @httpd_realloc_str(i8** @expand_symlinks.checked, i64* @expand_symlinks.maxchecked, i64 1)
  %16 = load i8** @expand_symlinks.checked, align 8
  %arrayidx10 = getelementptr inbounds i8* %16, i64 0
  store i8 0, i8* %arrayidx10, align 1
  store i64 0, i64* %checkedlen, align 8
  %17 = load i8** %path.addr, align 8
  %call11 = call i64 @strlen(i8* %17) #8
  store i64 %call11, i64* %restlen, align 8
  %18 = load i64* %restlen, align 8
  call void @httpd_realloc_str(i8** @expand_symlinks.rest, i64* @expand_symlinks.maxrest, i64 %18)
  %19 = load i8** @expand_symlinks.rest, align 8
  %20 = load i8** %path.addr, align 8
  %call12 = call i8* @strcpy(i8* %19, i8* %20) #5
  %21 = load i64* %restlen, align 8
  %sub13 = sub i64 %21, 1
  %22 = load i8** @expand_symlinks.rest, align 8
  %arrayidx14 = getelementptr inbounds i8* %22, i64 %sub13
  %23 = load i8* %arrayidx14, align 1
  %conv15 = sext i8 %23 to i32
  %cmp16 = icmp eq i32 %conv15, 47
  br i1 %cmp16, label %if.then18, label %if.end21

if.then18:                                        ; preds = %if.end9
  %24 = load i64* %restlen, align 8
  %dec19 = add i64 %24, -1
  store i64 %dec19, i64* %restlen, align 8
  %25 = load i8** @expand_symlinks.rest, align 8
  %arrayidx20 = getelementptr inbounds i8* %25, i64 %dec19
  store i8 0, i8* %arrayidx20, align 1
  br label %if.end21

if.end21:                                         ; preds = %if.then18, %if.end9
  %26 = load i32* %tildemapped.addr, align 4
  %tobool22 = icmp ne i32 %26, 0
  br i1 %tobool22, label %if.end35, label %if.then23

if.then23:                                        ; preds = %if.end21
  br label %while.cond24

while.cond24:                                     ; preds = %while.body29, %if.then23
  %27 = load i8** @expand_symlinks.rest, align 8
  %arrayidx25 = getelementptr inbounds i8* %27, i64 0
  %28 = load i8* %arrayidx25, align 1
  %conv26 = sext i8 %28 to i32
  %cmp27 = icmp eq i32 %conv26, 47
  br i1 %cmp27, label %while.body29, label %while.end34

while.body29:                                     ; preds = %while.cond24
  %29 = load i8** @expand_symlinks.rest, align 8
  %30 = load i8** @expand_symlinks.rest, align 8
  %arrayidx30 = getelementptr inbounds i8* %30, i64 1
  %31 = load i8** @expand_symlinks.rest, align 8
  %arrayidx31 = getelementptr inbounds i8* %31, i64 1
  %call32 = call i64 @strlen(i8* %arrayidx31) #8
  %add = add i64 %call32, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %29, i8* %arrayidx30, i64 %add, i32 1, i1 false)
  %32 = load i64* %restlen, align 8
  %dec33 = add i64 %32, -1
  store i64 %dec33, i64* %restlen, align 8
  br label %while.cond24

while.end34:                                      ; preds = %while.cond24
  br label %if.end35

if.end35:                                         ; preds = %while.end34, %if.end21
  %33 = load i8** @expand_symlinks.rest, align 8
  store i8* %33, i8** %r, align 8
  store i32 0, i32* %nlinks, align 4
  br label %while.cond36

while.cond36:                                     ; preds = %if.end233, %if.then161, %if.then152, %if.end35
  %34 = load i64* %restlen, align 8
  %cmp37 = icmp ugt i64 %34, 0
  br i1 %cmp37, label %while.body39, label %while.end234

while.body39:                                     ; preds = %while.cond36
  %35 = load i64* %checkedlen, align 8
  store i64 %35, i64* %prevcheckedlen, align 8
  %36 = load i64* %restlen, align 8
  store i64 %36, i64* %prevrestlen, align 8
  %37 = load i8** %r, align 8
  %call40 = call i8* @strchr(i8* %37, i32 47) #8
  store i8* %call40, i8** %cp1, align 8
  %38 = load i8** %cp1, align 8
  %cmp41 = icmp ne i8* %38, null
  br i1 %cmp41, label %if.then43, label %if.else103

if.then43:                                        ; preds = %while.body39
  %39 = load i8** %cp1, align 8
  %40 = load i8** %r, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %39 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %40 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv44 = trunc i64 %sub.ptr.sub to i32
  store i32 %conv44, i32* %i, align 4
  %41 = load i32* %i, align 4
  %cmp45 = icmp eq i32 %41, 0
  br i1 %cmp45, label %if.then47, label %if.else

if.then47:                                        ; preds = %if.then43
  %42 = load i64* %checkedlen, align 8
  %add48 = add i64 %42, 1
  call void @httpd_realloc_str(i8** @expand_symlinks.checked, i64* @expand_symlinks.maxchecked, i64 %add48)
  %43 = load i64* %checkedlen, align 8
  %44 = load i8** @expand_symlinks.checked, align 8
  %arrayidx49 = getelementptr inbounds i8* %44, i64 %43
  %45 = load i8** %r, align 8
  %call50 = call i8* @strncpy(i8* %arrayidx49, i8* %45, i64 1) #5
  %46 = load i64* %checkedlen, align 8
  %add51 = add i64 %46, 1
  store i64 %add51, i64* %checkedlen, align 8
  br label %if.end97

if.else:                                          ; preds = %if.then43
  %47 = load i8** %r, align 8
  %48 = load i32* %i, align 4
  %cmp52 = icmp sgt i32 %48, 2
  br i1 %cmp52, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %49 = load i32* %i, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.else
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %49, %cond.true ], [ 2, %cond.false ]
  %conv54 = sext i32 %cond to i64
  %call55 = call i32 @strncmp(i8* %47, i8* getelementptr inbounds ([3 x i8]* @.str527, i32 0, i32 0), i64 %conv54) #8
  %cmp56 = icmp eq i32 %call55, 0
  br i1 %cmp56, label %if.then58, label %if.else77

if.then58:                                        ; preds = %cond.end
  %50 = load i64* %checkedlen, align 8
  %cmp59 = icmp ne i64 %50, 0
  br i1 %cmp59, label %if.then61, label %if.end76

if.then61:                                        ; preds = %if.then58
  %51 = load i8** @expand_symlinks.checked, align 8
  %call62 = call i8* @strrchr(i8* %51, i32 47) #8
  store i8* %call62, i8** %cp2, align 8
  %52 = load i8** %cp2, align 8
  %cmp63 = icmp eq i8* %52, null
  br i1 %cmp63, label %if.then65, label %if.else66

if.then65:                                        ; preds = %if.then61
  store i64 0, i64* %checkedlen, align 8
  br label %if.end75

if.else66:                                        ; preds = %if.then61
  %53 = load i8** %cp2, align 8
  %54 = load i8** @expand_symlinks.checked, align 8
  %cmp67 = icmp eq i8* %53, %54
  br i1 %cmp67, label %if.then69, label %if.else70

if.then69:                                        ; preds = %if.else66
  store i64 1, i64* %checkedlen, align 8
  br label %if.end74

if.else70:                                        ; preds = %if.else66
  %55 = load i8** %cp2, align 8
  %56 = load i8** @expand_symlinks.checked, align 8
  %sub.ptr.lhs.cast71 = ptrtoint i8* %55 to i64
  %sub.ptr.rhs.cast72 = ptrtoint i8* %56 to i64
  %sub.ptr.sub73 = sub i64 %sub.ptr.lhs.cast71, %sub.ptr.rhs.cast72
  store i64 %sub.ptr.sub73, i64* %checkedlen, align 8
  br label %if.end74

if.end74:                                         ; preds = %if.else70, %if.then69
  br label %if.end75

if.end75:                                         ; preds = %if.end74, %if.then65
  br label %if.end76

if.end76:                                         ; preds = %if.end75, %if.then58
  br label %if.end96

if.else77:                                        ; preds = %cond.end
  %57 = load i64* %checkedlen, align 8
  %add78 = add i64 %57, 1
  %58 = load i32* %i, align 4
  %conv79 = sext i32 %58 to i64
  %add80 = add i64 %add78, %conv79
  call void @httpd_realloc_str(i8** @expand_symlinks.checked, i64* @expand_symlinks.maxchecked, i64 %add80)
  %59 = load i64* %checkedlen, align 8
  %cmp81 = icmp ugt i64 %59, 0
  br i1 %cmp81, label %land.lhs.true, label %if.end90

land.lhs.true:                                    ; preds = %if.else77
  %60 = load i64* %checkedlen, align 8
  %sub83 = sub i64 %60, 1
  %61 = load i8** @expand_symlinks.checked, align 8
  %arrayidx84 = getelementptr inbounds i8* %61, i64 %sub83
  %62 = load i8* %arrayidx84, align 1
  %conv85 = sext i8 %62 to i32
  %cmp86 = icmp ne i32 %conv85, 47
  br i1 %cmp86, label %if.then88, label %if.end90

if.then88:                                        ; preds = %land.lhs.true
  %63 = load i64* %checkedlen, align 8
  %inc = add i64 %63, 1
  store i64 %inc, i64* %checkedlen, align 8
  %64 = load i8** @expand_symlinks.checked, align 8
  %arrayidx89 = getelementptr inbounds i8* %64, i64 %63
  store i8 47, i8* %arrayidx89, align 1
  br label %if.end90

if.end90:                                         ; preds = %if.then88, %land.lhs.true, %if.else77
  %65 = load i64* %checkedlen, align 8
  %66 = load i8** @expand_symlinks.checked, align 8
  %arrayidx91 = getelementptr inbounds i8* %66, i64 %65
  %67 = load i8** %r, align 8
  %68 = load i32* %i, align 4
  %conv92 = sext i32 %68 to i64
  %call93 = call i8* @strncpy(i8* %arrayidx91, i8* %67, i64 %conv92) #5
  %69 = load i32* %i, align 4
  %conv94 = sext i32 %69 to i64
  %70 = load i64* %checkedlen, align 8
  %add95 = add i64 %70, %conv94
  store i64 %add95, i64* %checkedlen, align 8
  br label %if.end96

if.end96:                                         ; preds = %if.end90, %if.end76
  br label %if.end97

if.end97:                                         ; preds = %if.end96, %if.then47
  %71 = load i64* %checkedlen, align 8
  %72 = load i8** @expand_symlinks.checked, align 8
  %arrayidx98 = getelementptr inbounds i8* %72, i64 %71
  store i8 0, i8* %arrayidx98, align 1
  %73 = load i32* %i, align 4
  %add99 = add nsw i32 %73, 1
  %74 = load i8** %r, align 8
  %idx.ext = sext i32 %add99 to i64
  %add.ptr = getelementptr inbounds i8* %74, i64 %idx.ext
  store i8* %add.ptr, i8** %r, align 8
  %75 = load i32* %i, align 4
  %add100 = add nsw i32 %75, 1
  %conv101 = sext i32 %add100 to i64
  %76 = load i64* %restlen, align 8
  %sub102 = sub i64 %76, %conv101
  store i64 %sub102, i64* %restlen, align 8
  br label %if.end147

if.else103:                                       ; preds = %while.body39
  %77 = load i8** %r, align 8
  %call104 = call i32 @strcmp(i8* %77, i8* getelementptr inbounds ([3 x i8]* @.str527, i32 0, i32 0)) #8
  %cmp105 = icmp eq i32 %call104, 0
  br i1 %cmp105, label %if.then107, label %if.else127

if.then107:                                       ; preds = %if.else103
  %78 = load i64* %checkedlen, align 8
  %cmp108 = icmp ne i64 %78, 0
  br i1 %cmp108, label %if.then110, label %if.end126

if.then110:                                       ; preds = %if.then107
  %79 = load i8** @expand_symlinks.checked, align 8
  %call111 = call i8* @strrchr(i8* %79, i32 47) #8
  store i8* %call111, i8** %cp2, align 8
  %80 = load i8** %cp2, align 8
  %cmp112 = icmp eq i8* %80, null
  br i1 %cmp112, label %if.then114, label %if.else115

if.then114:                                       ; preds = %if.then110
  store i64 0, i64* %checkedlen, align 8
  br label %if.end124

if.else115:                                       ; preds = %if.then110
  %81 = load i8** %cp2, align 8
  %82 = load i8** @expand_symlinks.checked, align 8
  %cmp116 = icmp eq i8* %81, %82
  br i1 %cmp116, label %if.then118, label %if.else119

if.then118:                                       ; preds = %if.else115
  store i64 1, i64* %checkedlen, align 8
  br label %if.end123

if.else119:                                       ; preds = %if.else115
  %83 = load i8** %cp2, align 8
  %84 = load i8** @expand_symlinks.checked, align 8
  %sub.ptr.lhs.cast120 = ptrtoint i8* %83 to i64
  %sub.ptr.rhs.cast121 = ptrtoint i8* %84 to i64
  %sub.ptr.sub122 = sub i64 %sub.ptr.lhs.cast120, %sub.ptr.rhs.cast121
  store i64 %sub.ptr.sub122, i64* %checkedlen, align 8
  br label %if.end123

if.end123:                                        ; preds = %if.else119, %if.then118
  br label %if.end124

if.end124:                                        ; preds = %if.end123, %if.then114
  %85 = load i64* %checkedlen, align 8
  %86 = load i8** @expand_symlinks.checked, align 8
  %arrayidx125 = getelementptr inbounds i8* %86, i64 %85
  store i8 0, i8* %arrayidx125, align 1
  br label %if.end126

if.end126:                                        ; preds = %if.end124, %if.then107
  br label %if.end145

if.else127:                                       ; preds = %if.else103
  %87 = load i64* %checkedlen, align 8
  %add128 = add i64 %87, 1
  %88 = load i64* %restlen, align 8
  %add129 = add i64 %add128, %88
  call void @httpd_realloc_str(i8** @expand_symlinks.checked, i64* @expand_symlinks.maxchecked, i64 %add129)
  %89 = load i64* %checkedlen, align 8
  %cmp130 = icmp ugt i64 %89, 0
  br i1 %cmp130, label %land.lhs.true132, label %if.end141

land.lhs.true132:                                 ; preds = %if.else127
  %90 = load i64* %checkedlen, align 8
  %sub133 = sub i64 %90, 1
  %91 = load i8** @expand_symlinks.checked, align 8
  %arrayidx134 = getelementptr inbounds i8* %91, i64 %sub133
  %92 = load i8* %arrayidx134, align 1
  %conv135 = sext i8 %92 to i32
  %cmp136 = icmp ne i32 %conv135, 47
  br i1 %cmp136, label %if.then138, label %if.end141

if.then138:                                       ; preds = %land.lhs.true132
  %93 = load i64* %checkedlen, align 8
  %inc139 = add i64 %93, 1
  store i64 %inc139, i64* %checkedlen, align 8
  %94 = load i8** @expand_symlinks.checked, align 8
  %arrayidx140 = getelementptr inbounds i8* %94, i64 %93
  store i8 47, i8* %arrayidx140, align 1
  br label %if.end141

if.end141:                                        ; preds = %if.then138, %land.lhs.true132, %if.else127
  %95 = load i64* %checkedlen, align 8
  %96 = load i8** @expand_symlinks.checked, align 8
  %arrayidx142 = getelementptr inbounds i8* %96, i64 %95
  %97 = load i8** %r, align 8
  %call143 = call i8* @strcpy(i8* %arrayidx142, i8* %97) #5
  %98 = load i64* %restlen, align 8
  %99 = load i64* %checkedlen, align 8
  %add144 = add i64 %99, %98
  store i64 %add144, i64* %checkedlen, align 8
  br label %if.end145

if.end145:                                        ; preds = %if.end141, %if.end126
  %100 = load i64* %restlen, align 8
  %101 = load i8** %r, align 8
  %add.ptr146 = getelementptr inbounds i8* %101, i64 %100
  store i8* %add.ptr146, i8** %r, align 8
  store i64 0, i64* %restlen, align 8
  br label %if.end147

if.end147:                                        ; preds = %if.end145, %if.end97
  %102 = load i8** @expand_symlinks.checked, align 8
  %arrayidx148 = getelementptr inbounds i8* %102, i64 0
  %103 = load i8* %arrayidx148, align 1
  %conv149 = sext i8 %103 to i32
  %cmp150 = icmp eq i32 %conv149, 0
  br i1 %cmp150, label %if.then152, label %if.end153

if.then152:                                       ; preds = %if.end147
  br label %while.cond36

if.end153:                                        ; preds = %if.end147
  %104 = load i8** @expand_symlinks.checked, align 8
  %arraydecay = getelementptr inbounds [5000 x i8]* %lnk, i32 0, i32 0
  %call154 = call i64 @readlink(i8* %104, i8* %arraydecay, i64 4999) #5
  store i64 %call154, i64* %linklen, align 8
  %105 = load i64* %linklen, align 8
  %cmp155 = icmp eq i64 %105, -1
  br i1 %cmp155, label %if.then157, label %if.end184

if.then157:                                       ; preds = %if.end153
  %call158 = call i32* @__errno_location() #10
  %106 = load i32* %call158, align 4
  %cmp159 = icmp eq i32 %106, 22
  br i1 %cmp159, label %if.then161, label %if.end162

if.then161:                                       ; preds = %if.then157
  br label %while.cond36

if.end162:                                        ; preds = %if.then157
  %call163 = call i32* @__errno_location() #10
  %107 = load i32* %call163, align 4
  %cmp164 = icmp eq i32 %107, 13
  br i1 %cmp164, label %if.then173, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end162
  %call166 = call i32* @__errno_location() #10
  %108 = load i32* %call166, align 4
  %cmp167 = icmp eq i32 %108, 2
  br i1 %cmp167, label %if.then173, label %lor.lhs.false169

lor.lhs.false169:                                 ; preds = %lor.lhs.false
  %call170 = call i32* @__errno_location() #10
  %109 = load i32* %call170, align 4
  %cmp171 = icmp eq i32 %109, 20
  br i1 %cmp171, label %if.then173, label %if.end183

if.then173:                                       ; preds = %lor.lhs.false169, %lor.lhs.false, %if.end162
  %110 = load i8** %r, align 8
  %111 = load i64* %prevrestlen, align 8
  %112 = load i64* %restlen, align 8
  %sub174 = sub i64 %111, %112
  %idx.neg = sub i64 0, %sub174
  %add.ptr175 = getelementptr inbounds i8* %110, i64 %idx.neg
  %113 = load i8*** %restP.addr, align 8
  store i8* %add.ptr175, i8** %113, align 8
  %114 = load i64* %prevcheckedlen, align 8
  %cmp176 = icmp eq i64 %114, 0
  br i1 %cmp176, label %if.then178, label %if.else180

if.then178:                                       ; preds = %if.then173
  %115 = load i8** @expand_symlinks.checked, align 8
  %call179 = call i8* @strcpy(i8* %115, i8* getelementptr inbounds ([2 x i8]* @.str31175, i32 0, i32 0)) #5
  br label %if.end182

if.else180:                                       ; preds = %if.then173
  %116 = load i64* %prevcheckedlen, align 8
  %117 = load i8** @expand_symlinks.checked, align 8
  %arrayidx181 = getelementptr inbounds i8* %117, i64 %116
  store i8 0, i8* %arrayidx181, align 1
  br label %if.end182

if.end182:                                        ; preds = %if.else180, %if.then178
  %118 = load i8** @expand_symlinks.checked, align 8
  store i8* %118, i8** %retval
  br label %return

if.end183:                                        ; preds = %lor.lhs.false169
  %119 = load i8** @expand_symlinks.checked, align 8
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([20 x i8]* @.str528, i32 0, i32 0), i8* %119)
  store i8* null, i8** %retval
  br label %return

if.end184:                                        ; preds = %if.end153
  %120 = load i32* %nlinks, align 4
  %inc185 = add nsw i32 %120, 1
  store i32 %inc185, i32* %nlinks, align 4
  %121 = load i32* %nlinks, align 4
  %cmp186 = icmp sgt i32 %121, 32
  br i1 %cmp186, label %if.then188, label %if.end189

if.then188:                                       ; preds = %if.end184
  %122 = load i8** %path.addr, align 8
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([27 x i8]* @.str529, i32 0, i32 0), i8* %122)
  store i8* null, i8** %retval
  br label %return

if.end189:                                        ; preds = %if.end184
  %123 = load i64* %linklen, align 8
  %arrayidx190 = getelementptr inbounds [5000 x i8]* %lnk, i32 0, i64 %123
  store i8 0, i8* %arrayidx190, align 1
  %124 = load i64* %linklen, align 8
  %sub191 = sub i64 %124, 1
  %arrayidx192 = getelementptr inbounds [5000 x i8]* %lnk, i32 0, i64 %sub191
  %125 = load i8* %arrayidx192, align 1
  %conv193 = sext i8 %125 to i32
  %cmp194 = icmp eq i32 %conv193, 47
  br i1 %cmp194, label %if.then196, label %if.end199

if.then196:                                       ; preds = %if.end189
  %126 = load i64* %linklen, align 8
  %dec197 = add i64 %126, -1
  store i64 %dec197, i64* %linklen, align 8
  %arrayidx198 = getelementptr inbounds [5000 x i8]* %lnk, i32 0, i64 %dec197
  store i8 0, i8* %arrayidx198, align 1
  br label %if.end199

if.end199:                                        ; preds = %if.then196, %if.end189
  %127 = load i64* %restlen, align 8
  %cmp200 = icmp ne i64 %127, 0
  br i1 %cmp200, label %if.then202, label %if.else221

if.then202:                                       ; preds = %if.end199
  %128 = load i8** @expand_symlinks.rest, align 8
  %129 = load i8** %r, align 8
  %130 = load i8** %r, align 8
  %call203 = call i64 @strlen(i8* %130) #8
  %add204 = add i64 %call203, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %128, i8* %129, i64 %add204, i32 1, i1 false)
  %131 = load i64* %restlen, align 8
  %132 = load i64* %linklen, align 8
  %add205 = add i64 %131, %132
  %add206 = add i64 %add205, 1
  call void @httpd_realloc_str(i8** @expand_symlinks.rest, i64* @expand_symlinks.maxrest, i64 %add206)
  %133 = load i64* %restlen, align 8
  %conv207 = trunc i64 %133 to i32
  store i32 %conv207, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then202
  %134 = load i32* %i, align 4
  %cmp208 = icmp sge i32 %134, 0
  br i1 %cmp208, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %135 = load i32* %i, align 4
  %idxprom = sext i32 %135 to i64
  %136 = load i8** @expand_symlinks.rest, align 8
  %arrayidx210 = getelementptr inbounds i8* %136, i64 %idxprom
  %137 = load i8* %arrayidx210, align 1
  %138 = load i32* %i, align 4
  %conv211 = sext i32 %138 to i64
  %139 = load i64* %linklen, align 8
  %add212 = add i64 %conv211, %139
  %add213 = add i64 %add212, 1
  %140 = load i8** @expand_symlinks.rest, align 8
  %arrayidx214 = getelementptr inbounds i8* %140, i64 %add213
  store i8 %137, i8* %arrayidx214, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %141 = load i32* %i, align 4
  %dec215 = add nsw i32 %141, -1
  store i32 %dec215, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %142 = load i8** @expand_symlinks.rest, align 8
  %arraydecay216 = getelementptr inbounds [5000 x i8]* %lnk, i32 0, i32 0
  %call217 = call i8* @strcpy(i8* %142, i8* %arraydecay216) #5
  %143 = load i64* %linklen, align 8
  %144 = load i8** @expand_symlinks.rest, align 8
  %arrayidx218 = getelementptr inbounds i8* %144, i64 %143
  store i8 47, i8* %arrayidx218, align 1
  %145 = load i64* %linklen, align 8
  %add219 = add i64 %145, 1
  %146 = load i64* %restlen, align 8
  %add220 = add i64 %146, %add219
  store i64 %add220, i64* %restlen, align 8
  %147 = load i8** @expand_symlinks.rest, align 8
  store i8* %147, i8** %r, align 8
  br label %if.end224

if.else221:                                       ; preds = %if.end199
  %148 = load i64* %linklen, align 8
  call void @httpd_realloc_str(i8** @expand_symlinks.rest, i64* @expand_symlinks.maxrest, i64 %148)
  %149 = load i8** @expand_symlinks.rest, align 8
  %arraydecay222 = getelementptr inbounds [5000 x i8]* %lnk, i32 0, i32 0
  %call223 = call i8* @strcpy(i8* %149, i8* %arraydecay222) #5
  %150 = load i64* %linklen, align 8
  store i64 %150, i64* %restlen, align 8
  %151 = load i8** @expand_symlinks.rest, align 8
  store i8* %151, i8** %r, align 8
  br label %if.end224

if.end224:                                        ; preds = %if.else221, %for.end
  %152 = load i8** @expand_symlinks.rest, align 8
  %arrayidx225 = getelementptr inbounds i8* %152, i64 0
  %153 = load i8* %arrayidx225, align 1
  %conv226 = sext i8 %153 to i32
  %cmp227 = icmp eq i32 %conv226, 47
  br i1 %cmp227, label %if.then229, label %if.else231

if.then229:                                       ; preds = %if.end224
  %154 = load i8** @expand_symlinks.checked, align 8
  %arrayidx230 = getelementptr inbounds i8* %154, i64 0
  store i8 0, i8* %arrayidx230, align 1
  store i64 0, i64* %checkedlen, align 8
  br label %if.end233

if.else231:                                       ; preds = %if.end224
  %155 = load i64* %prevcheckedlen, align 8
  store i64 %155, i64* %checkedlen, align 8
  %156 = load i64* %checkedlen, align 8
  %157 = load i8** @expand_symlinks.checked, align 8
  %arrayidx232 = getelementptr inbounds i8* %157, i64 %156
  store i8 0, i8* %arrayidx232, align 1
  br label %if.end233

if.end233:                                        ; preds = %if.else231, %if.then229
  br label %while.cond36

while.end234:                                     ; preds = %while.cond36
  %158 = load i8** %r, align 8
  %159 = load i8*** %restP.addr, align 8
  store i8* %158, i8** %159, align 8
  %160 = load i8** @expand_symlinks.checked, align 8
  %arrayidx235 = getelementptr inbounds i8* %160, i64 0
  %161 = load i8* %arrayidx235, align 1
  %conv236 = sext i8 %161 to i32
  %cmp237 = icmp eq i32 %conv236, 0
  br i1 %cmp237, label %if.then239, label %if.end241

if.then239:                                       ; preds = %while.end234
  %162 = load i8** @expand_symlinks.checked, align 8
  %call240 = call i8* @strcpy(i8* %162, i8* getelementptr inbounds ([2 x i8]* @.str31175, i32 0, i32 0)) #5
  br label %if.end241

if.end241:                                        ; preds = %if.then239, %while.end234
  %163 = load i8** @expand_symlinks.checked, align 8
  store i8* %163, i8** %retval
  br label %return

return:                                           ; preds = %if.end241, %if.then188, %if.end183, %if.end182, %while.end
  %164 = load i8** %retval
  ret i8* %164
}

; Function Attrs: nounwind uwtable
define internal void @make_log_entry(%struct.httpd_conn* %hc, %struct.timeval* %nowP) #0 {
entry:
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %nowP.addr = alloca %struct.timeval*, align 8
  %ru = alloca i8*, align 8
  %url = alloca [305 x i8], align 16
  %bytes = alloca [40 x i8], align 16
  %now = alloca i64, align 8
  %t = alloca %struct.tm*, align 8
  %cernfmt_nozone = alloca i8*, align 8
  %date_nozone = alloca [100 x i8], align 16
  %zone = alloca i32, align 4
  %sign = alloca i8, align 1
  %date = alloca [100 x i8], align 16
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  store %struct.timeval* %nowP, %struct.timeval** %nowP.addr, align 8
  %0 = load %struct.httpd_conn** %hc.addr, align 8
  %hs = getelementptr inbounds %struct.httpd_conn* %0, i32 0, i32 1
  %1 = load %struct.httpd_server** %hs, align 8
  %no_log = getelementptr inbounds %struct.httpd_server* %1, i32 0, i32 12
  %2 = load i32* %no_log, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end74

if.end:                                           ; preds = %entry
  %3 = load %struct.httpd_conn** %hc.addr, align 8
  %remoteuser = getelementptr inbounds %struct.httpd_conn* %3, i32 0, i32 31
  %4 = load i8** %remoteuser, align 8
  %arrayidx = getelementptr inbounds i8* %4, i64 0
  %5 = load i8* %arrayidx, align 1
  %conv = sext i8 %5 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %6 = load %struct.httpd_conn** %hc.addr, align 8
  %remoteuser3 = getelementptr inbounds %struct.httpd_conn* %6, i32 0, i32 31
  %7 = load i8** %remoteuser3, align 8
  store i8* %7, i8** %ru, align 8
  br label %if.end4

if.else:                                          ; preds = %if.end
  store i8* getelementptr inbounds ([2 x i8]* @.str59203, i32 0, i32 0), i8** %ru, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.else, %if.then2
  %8 = load %struct.httpd_conn** %hc.addr, align 8
  %hs5 = getelementptr inbounds %struct.httpd_conn* %8, i32 0, i32 1
  %9 = load %struct.httpd_server** %hs5, align 8
  %vhost = getelementptr inbounds %struct.httpd_server* %9, i32 0, i32 15
  %10 = load i32* %vhost, align 4
  %tobool6 = icmp ne i32 %10, 0
  br i1 %tobool6, label %land.lhs.true, label %if.else13

land.lhs.true:                                    ; preds = %if.end4
  %11 = load %struct.httpd_conn** %hc.addr, align 8
  %tildemapped = getelementptr inbounds %struct.httpd_conn* %11, i32 0, i32 54
  %12 = load i32* %tildemapped, align 4
  %tobool7 = icmp ne i32 %12, 0
  br i1 %tobool7, label %if.else13, label %if.then8

if.then8:                                         ; preds = %land.lhs.true
  %arraydecay = getelementptr inbounds [305 x i8]* %url, i32 0, i32 0
  %13 = load %struct.httpd_conn** %hc.addr, align 8
  %hostname = getelementptr inbounds %struct.httpd_conn* %13, i32 0, i32 50
  %14 = load i8** %hostname, align 8
  %cmp9 = icmp eq i8* %14, null
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then8
  %15 = load %struct.httpd_conn** %hc.addr, align 8
  %hs11 = getelementptr inbounds %struct.httpd_conn* %15, i32 0, i32 1
  %16 = load %struct.httpd_server** %hs11, align 8
  %server_hostname = getelementptr inbounds %struct.httpd_server* %16, i32 0, i32 1
  %17 = load i8** %server_hostname, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then8
  %18 = load %struct.httpd_conn** %hc.addr, align 8
  %hostname12 = getelementptr inbounds %struct.httpd_conn* %18, i32 0, i32 50
  %19 = load i8** %hostname12, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %17, %cond.true ], [ %19, %cond.false ]
  %20 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl = getelementptr inbounds %struct.httpd_conn* %20, i32 0, i32 12
  %21 = load i8** %encodedurl, align 8
  %call = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %arraydecay, i64 305, i8* getelementptr inbounds ([14 x i8]* @.str60204, i32 0, i32 0), i8* %cond, i8* %21)
  br label %if.end17

if.else13:                                        ; preds = %land.lhs.true, %if.end4
  %arraydecay14 = getelementptr inbounds [305 x i8]* %url, i32 0, i32 0
  %22 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl15 = getelementptr inbounds %struct.httpd_conn* %22, i32 0, i32 12
  %23 = load i8** %encodedurl15, align 8
  %call16 = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %arraydecay14, i64 305, i8* getelementptr inbounds ([7 x i8]* @.str61205, i32 0, i32 0), i8* %23)
  br label %if.end17

if.end17:                                         ; preds = %if.else13, %cond.end
  %24 = load %struct.httpd_conn** %hc.addr, align 8
  %bytes_sent = getelementptr inbounds %struct.httpd_conn* %24, i32 0, i32 11
  %25 = load i64* %bytes_sent, align 8
  %cmp18 = icmp sge i64 %25, 0
  br i1 %cmp18, label %if.then20, label %if.else24

if.then20:                                        ; preds = %if.end17
  %arraydecay21 = getelementptr inbounds [40 x i8]* %bytes, i32 0, i32 0
  %26 = load %struct.httpd_conn** %hc.addr, align 8
  %bytes_sent22 = getelementptr inbounds %struct.httpd_conn* %26, i32 0, i32 11
  %27 = load i64* %bytes_sent22, align 8
  %call23 = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %arraydecay21, i64 40, i8* getelementptr inbounds ([5 x i8]* @.str62206, i32 0, i32 0), i64 %27)
  br label %if.end27

if.else24:                                        ; preds = %if.end17
  %arraydecay25 = getelementptr inbounds [40 x i8]* %bytes, i32 0, i32 0
  %call26 = call i8* @strcpy(i8* %arraydecay25, i8* getelementptr inbounds ([2 x i8]* @.str59203, i32 0, i32 0)) #5
  br label %if.end27

if.end27:                                         ; preds = %if.else24, %if.then20
  %28 = load %struct.httpd_conn** %hc.addr, align 8
  %hs28 = getelementptr inbounds %struct.httpd_conn* %28, i32 0, i32 1
  %29 = load %struct.httpd_server** %hs28, align 8
  %logfp = getelementptr inbounds %struct.httpd_server* %29, i32 0, i32 13
  %30 = load %struct._IO_FILE** %logfp, align 8
  %cmp29 = icmp ne %struct._IO_FILE* %30, null
  br i1 %cmp29, label %if.then31, label %if.else63

if.then31:                                        ; preds = %if.end27
  store i8* getelementptr inbounds ([18 x i8]* @.str63207, i32 0, i32 0), i8** %cernfmt_nozone, align 8
  %31 = load %struct.timeval** %nowP.addr, align 8
  %cmp32 = icmp ne %struct.timeval* %31, null
  br i1 %cmp32, label %if.then34, label %if.else35

if.then34:                                        ; preds = %if.then31
  %32 = load %struct.timeval** %nowP.addr, align 8
  %tv_sec = getelementptr inbounds %struct.timeval* %32, i32 0, i32 0
  %33 = load i64* %tv_sec, align 8
  store i64 %33, i64* %now, align 8
  br label %if.end37

if.else35:                                        ; preds = %if.then31
  %call36 = call i64 @time(i64* null) #5
  store i64 %call36, i64* %now, align 8
  br label %if.end37

if.end37:                                         ; preds = %if.else35, %if.then34
  %call38 = call %struct.tm* @localtime(i64* %now) #5
  store %struct.tm* %call38, %struct.tm** %t, align 8
  %arraydecay39 = getelementptr inbounds [100 x i8]* %date_nozone, i32 0, i32 0
  %34 = load i8** %cernfmt_nozone, align 8
  %35 = load %struct.tm** %t, align 8
  %call40 = call i64 @strftime(i8* %arraydecay39, i64 100, i8* %34, %struct.tm* %35) #5
  %36 = load %struct.tm** %t, align 8
  %tm_gmtoff = getelementptr inbounds %struct.tm* %36, i32 0, i32 9
  %37 = load i64* %tm_gmtoff, align 8
  %div = sdiv i64 %37, 60
  %conv41 = trunc i64 %div to i32
  store i32 %conv41, i32* %zone, align 4
  %38 = load i32* %zone, align 4
  %cmp42 = icmp sge i32 %38, 0
  br i1 %cmp42, label %if.then44, label %if.else45

if.then44:                                        ; preds = %if.end37
  store i8 43, i8* %sign, align 1
  br label %if.end46

if.else45:                                        ; preds = %if.end37
  store i8 45, i8* %sign, align 1
  %39 = load i32* %zone, align 4
  %sub = sub nsw i32 0, %39
  store i32 %sub, i32* %zone, align 4
  br label %if.end46

if.end46:                                         ; preds = %if.else45, %if.then44
  %40 = load i32* %zone, align 4
  %div47 = sdiv i32 %40, 60
  %mul = mul nsw i32 %div47, 100
  %41 = load i32* %zone, align 4
  %rem = srem i32 %41, 60
  %add = add nsw i32 %mul, %rem
  store i32 %add, i32* %zone, align 4
  %arraydecay48 = getelementptr inbounds [100 x i8]* %date, i32 0, i32 0
  %arraydecay49 = getelementptr inbounds [100 x i8]* %date_nozone, i32 0, i32 0
  %42 = load i8* %sign, align 1
  %conv50 = sext i8 %42 to i32
  %43 = load i32* %zone, align 4
  %call51 = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %arraydecay48, i64 100, i8* getelementptr inbounds ([10 x i8]* @.str64208, i32 0, i32 0), i8* %arraydecay49, i32 %conv50, i32 %43)
  %44 = load %struct.httpd_conn** %hc.addr, align 8
  %hs52 = getelementptr inbounds %struct.httpd_conn* %44, i32 0, i32 1
  %45 = load %struct.httpd_server** %hs52, align 8
  %logfp53 = getelementptr inbounds %struct.httpd_server* %45, i32 0, i32 13
  %46 = load %struct._IO_FILE** %logfp53, align 8
  %47 = load %struct.httpd_conn** %hc.addr, align 8
  %client_addr = getelementptr inbounds %struct.httpd_conn* %47, i32 0, i32 2
  %call54 = call i8* @httpd_ntoa(%union.httpd_sockaddr* %client_addr)
  %48 = load i8** %ru, align 8
  %arraydecay55 = getelementptr inbounds [100 x i8]* %date, i32 0, i32 0
  %49 = load %struct.httpd_conn** %hc.addr, align 8
  %method = getelementptr inbounds %struct.httpd_conn* %49, i32 0, i32 8
  %50 = load i32* %method, align 4
  %call56 = call i8* @httpd_method_str(i32 %50)
  %arraydecay57 = getelementptr inbounds [305 x i8]* %url, i32 0, i32 0
  %51 = load %struct.httpd_conn** %hc.addr, align 8
  %protocol = getelementptr inbounds %struct.httpd_conn* %51, i32 0, i32 14
  %52 = load i8** %protocol, align 8
  %53 = load %struct.httpd_conn** %hc.addr, align 8
  %status = getelementptr inbounds %struct.httpd_conn* %53, i32 0, i32 9
  %54 = load i32* %status, align 4
  %arraydecay58 = getelementptr inbounds [40 x i8]* %bytes, i32 0, i32 0
  %55 = load %struct.httpd_conn** %hc.addr, align 8
  %referrer = getelementptr inbounds %struct.httpd_conn* %55, i32 0, i32 20
  %56 = load i8** %referrer, align 8
  %57 = load %struct.httpd_conn** %hc.addr, align 8
  %useragent = getelementptr inbounds %struct.httpd_conn* %57, i32 0, i32 21
  %58 = load i8** %useragent, align 8
  %call59 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([65 x i8]* @.str65209, i32 0, i32 0), i8* %call54, i8* %48, i8* %arraydecay55, i8* %call56, i8* %arraydecay57, i8* %52, i32 %54, i8* %arraydecay58, i8* %56, i8* %58)
  %59 = load %struct.httpd_conn** %hc.addr, align 8
  %hs60 = getelementptr inbounds %struct.httpd_conn* %59, i32 0, i32 1
  %60 = load %struct.httpd_server** %hs60, align 8
  %logfp61 = getelementptr inbounds %struct.httpd_server* %60, i32 0, i32 13
  %61 = load %struct._IO_FILE** %logfp61, align 8
  %call62 = call i32 @fflush(%struct._IO_FILE* %61)
  br label %if.end74

if.else63:                                        ; preds = %if.end27
  %62 = load %struct.httpd_conn** %hc.addr, align 8
  %client_addr64 = getelementptr inbounds %struct.httpd_conn* %62, i32 0, i32 2
  %call65 = call i8* @httpd_ntoa(%union.httpd_sockaddr* %client_addr64)
  %63 = load i8** %ru, align 8
  %64 = load %struct.httpd_conn** %hc.addr, align 8
  %method66 = getelementptr inbounds %struct.httpd_conn* %64, i32 0, i32 8
  %65 = load i32* %method66, align 4
  %call67 = call i8* @httpd_method_str(i32 %65)
  %arraydecay68 = getelementptr inbounds [305 x i8]* %url, i32 0, i32 0
  %66 = load %struct.httpd_conn** %hc.addr, align 8
  %protocol69 = getelementptr inbounds %struct.httpd_conn* %66, i32 0, i32 14
  %67 = load i8** %protocol69, align 8
  %68 = load %struct.httpd_conn** %hc.addr, align 8
  %status70 = getelementptr inbounds %struct.httpd_conn* %68, i32 0, i32 9
  %69 = load i32* %status70, align 4
  %arraydecay71 = getelementptr inbounds [40 x i8]* %bytes, i32 0, i32 0
  %70 = load %struct.httpd_conn** %hc.addr, align 8
  %referrer72 = getelementptr inbounds %struct.httpd_conn* %70, i32 0, i32 20
  %71 = load i8** %referrer72, align 8
  %72 = load %struct.httpd_conn** %hc.addr, align 8
  %useragent73 = getelementptr inbounds %struct.httpd_conn* %72, i32 0, i32 21
  %73 = load i8** %useragent73, align 8
  call void (i32, i8*, ...)* @syslog(i32 6, i8* getelementptr inbounds ([59 x i8]* @.str66210, i32 0, i32 0), i8* %call65, i8* %63, i8* %call67, i8* %arraydecay68, i8* %67, i32 %69, i8* %arraydecay71, i8* %71, i8* %73)
  br label %if.end74

if.end74:                                         ; preds = %if.else63, %if.end46, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @really_start_request(%struct.httpd_conn* %hc, %struct.timeval* %nowP) #0 {
entry:
  %retval = alloca i32, align 4
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %nowP.addr = alloca %struct.timeval*, align 8
  %i = alloca i32, align 4
  %expnlen = alloca i64, align 8
  %indxlen = alloca i64, align 8
  %cp = alloca i8*, align 8
  %pi = alloca i8*, align 8
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  store %struct.timeval* %nowP, %struct.timeval** %nowP.addr, align 8
  %0 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename = getelementptr inbounds %struct.httpd_conn* %0, i32 0, i32 16
  %1 = load i8** %expnfilename, align 8
  %call = call i64 @strlen(i8* %1) #8
  store i64 %call, i64* %expnlen, align 8
  %2 = load %struct.httpd_conn** %hc.addr, align 8
  %method = getelementptr inbounds %struct.httpd_conn* %2, i32 0, i32 8
  %3 = load i32* %method, align 4
  %cmp = icmp ne i32 %3, 1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.httpd_conn** %hc.addr, align 8
  %method1 = getelementptr inbounds %struct.httpd_conn* %4, i32 0, i32 8
  %5 = load i32* %method1, align 4
  %cmp2 = icmp ne i32 %5, 2
  br i1 %cmp2, label %land.lhs.true3, label %if.end

land.lhs.true3:                                   ; preds = %land.lhs.true
  %6 = load %struct.httpd_conn** %hc.addr, align 8
  %method4 = getelementptr inbounds %struct.httpd_conn* %6, i32 0, i32 8
  %7 = load i32* %method4, align 4
  %cmp5 = icmp ne i32 %7, 3
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true3
  %8 = load %struct.httpd_conn** %hc.addr, align 8
  %9 = load i8** @err501title, align 8
  %10 = load i8** @err501form, align 8
  %11 = load %struct.httpd_conn** %hc.addr, align 8
  %method6 = getelementptr inbounds %struct.httpd_conn* %11, i32 0, i32 8
  %12 = load i32* %method6, align 4
  %call7 = call i8* @httpd_method_str(i32 %12)
  call void @httpd_send_err(%struct.httpd_conn* %8, i32 501, i8* %9, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %10, i8* %call7)
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true3, %land.lhs.true, %entry
  %13 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename8 = getelementptr inbounds %struct.httpd_conn* %13, i32 0, i32 16
  %14 = load i8** %expnfilename8, align 8
  %15 = load %struct.httpd_conn** %hc.addr, align 8
  %sb = getelementptr inbounds %struct.httpd_conn* %15, i32 0, i32 59
  %call9 = call i32 @stat(i8* %14, %struct.stat* %sb) #5
  %cmp10 = icmp slt i32 %call9, 0
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end
  %16 = load %struct.httpd_conn** %hc.addr, align 8
  %17 = load i8** @err500title, align 8
  %18 = load i8** @err500form, align 8
  %19 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl = getelementptr inbounds %struct.httpd_conn* %19, i32 0, i32 12
  %20 = load i8** %encodedurl, align 8
  call void @httpd_send_err(%struct.httpd_conn* %16, i32 500, i8* %17, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %18, i8* %20)
  store i32 -1, i32* %retval
  br label %return

if.end12:                                         ; preds = %if.end
  %21 = load %struct.httpd_conn** %hc.addr, align 8
  %sb13 = getelementptr inbounds %struct.httpd_conn* %21, i32 0, i32 59
  %st_mode = getelementptr inbounds %struct.stat* %sb13, i32 0, i32 3
  %22 = load i32* %st_mode, align 4
  %and = and i32 %22, 5
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end18, label %if.then14

if.then14:                                        ; preds = %if.end12
  %23 = load %struct.httpd_conn** %hc.addr, align 8
  %client_addr = getelementptr inbounds %struct.httpd_conn* %23, i32 0, i32 2
  %call15 = call i8* @httpd_ntoa(%union.httpd_sockaddr* %client_addr)
  %24 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl16 = getelementptr inbounds %struct.httpd_conn* %24, i32 0, i32 12
  %25 = load i8** %encodedurl16, align 8
  call void (i32, i8*, ...)* @syslog(i32 6, i8* getelementptr inbounds ([56 x i8]* @.str73217, i32 0, i32 0), i8* %call15, i8* %25)
  %26 = load %struct.httpd_conn** %hc.addr, align 8
  %27 = load i8** @err403title, align 8
  %28 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl17 = getelementptr inbounds %struct.httpd_conn* %28, i32 0, i32 12
  %29 = load i8** %encodedurl17, align 8
  call void @httpd_send_err(%struct.httpd_conn* %26, i32 403, i8* %27, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* getelementptr inbounds ([74 x i8]* @.str74218, i32 0, i32 0), i8* %29)
  store i32 -1, i32* %retval
  br label %return

if.end18:                                         ; preds = %if.end12
  %30 = load %struct.httpd_conn** %hc.addr, align 8
  %sb19 = getelementptr inbounds %struct.httpd_conn* %30, i32 0, i32 59
  %st_mode20 = getelementptr inbounds %struct.stat* %sb19, i32 0, i32 3
  %31 = load i32* %st_mode20, align 4
  %and21 = and i32 %31, 61440
  %cmp22 = icmp eq i32 %and21, 16384
  br i1 %cmp22, label %if.then23, label %if.end127

if.then23:                                        ; preds = %if.end18
  %32 = load %struct.httpd_conn** %hc.addr, align 8
  %pathinfo = getelementptr inbounds %struct.httpd_conn* %32, i32 0, i32 18
  %33 = load i8** %pathinfo, align 8
  %arrayidx = getelementptr inbounds i8* %33, i64 0
  %34 = load i8* %arrayidx, align 1
  %conv = sext i8 %34 to i32
  %cmp24 = icmp ne i32 %conv, 0
  br i1 %cmp24, label %if.then26, label %if.end28

if.then26:                                        ; preds = %if.then23
  %35 = load %struct.httpd_conn** %hc.addr, align 8
  %36 = load i8** @err404title, align 8
  %37 = load i8** @err404form, align 8
  %38 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl27 = getelementptr inbounds %struct.httpd_conn* %38, i32 0, i32 12
  %39 = load i8** %encodedurl27, align 8
  call void @httpd_send_err(%struct.httpd_conn* %35, i32 404, i8* %36, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %37, i8* %39)
  store i32 -1, i32* %retval
  br label %return

if.end28:                                         ; preds = %if.then23
  %40 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename = getelementptr inbounds %struct.httpd_conn* %40, i32 0, i32 15
  %41 = load i8** %origfilename, align 8
  %call29 = call i32 @strcmp(i8* %41, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0)) #8
  %cmp30 = icmp ne i32 %call29, 0
  br i1 %cmp30, label %land.lhs.true32, label %if.end46

land.lhs.true32:                                  ; preds = %if.end28
  %42 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename33 = getelementptr inbounds %struct.httpd_conn* %42, i32 0, i32 15
  %43 = load i8** %origfilename33, align 8
  %call34 = call i32 @strcmp(i8* %43, i8* getelementptr inbounds ([2 x i8]* @.str31175, i32 0, i32 0)) #8
  %cmp35 = icmp ne i32 %call34, 0
  br i1 %cmp35, label %land.lhs.true37, label %if.end46

land.lhs.true37:                                  ; preds = %land.lhs.true32
  %44 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename38 = getelementptr inbounds %struct.httpd_conn* %44, i32 0, i32 15
  %45 = load i8** %origfilename38, align 8
  %call39 = call i64 @strlen(i8* %45) #8
  %sub = sub i64 %call39, 1
  %46 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename40 = getelementptr inbounds %struct.httpd_conn* %46, i32 0, i32 15
  %47 = load i8** %origfilename40, align 8
  %arrayidx41 = getelementptr inbounds i8* %47, i64 %sub
  %48 = load i8* %arrayidx41, align 1
  %conv42 = sext i8 %48 to i32
  %cmp43 = icmp ne i32 %conv42, 47
  br i1 %cmp43, label %if.then45, label %if.end46

if.then45:                                        ; preds = %land.lhs.true37
  %49 = load %struct.httpd_conn** %hc.addr, align 8
  call void @send_dirredirect(%struct.httpd_conn* %49)
  store i32 -1, i32* %retval
  br label %return

if.end46:                                         ; preds = %land.lhs.true37, %land.lhs.true32, %if.end28
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end46
  %50 = load i32* %i, align 4
  %conv47 = sext i32 %50 to i64
  %cmp48 = icmp ult i64 %conv47, 6
  br i1 %cmp48, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %51 = load i64* %expnlen, align 8
  %add = add i64 %51, 1
  %52 = load i32* %i, align 4
  %idxprom = sext i32 %52 to i64
  %arrayidx50 = getelementptr inbounds [6 x i8*]* @really_start_request.index_names, i32 0, i64 %idxprom
  %53 = load i8** %arrayidx50, align 8
  %call51 = call i64 @strlen(i8* %53) #8
  %add52 = add i64 %add, %call51
  call void @httpd_realloc_str(i8** @really_start_request.indexname, i64* @really_start_request.maxindexname, i64 %add52)
  %54 = load i8** @really_start_request.indexname, align 8
  %55 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename53 = getelementptr inbounds %struct.httpd_conn* %55, i32 0, i32 16
  %56 = load i8** %expnfilename53, align 8
  %call54 = call i8* @strcpy(i8* %54, i8* %56) #5
  %57 = load i8** @really_start_request.indexname, align 8
  %call55 = call i64 @strlen(i8* %57) #8
  store i64 %call55, i64* %indxlen, align 8
  %58 = load i64* %indxlen, align 8
  %cmp56 = icmp eq i64 %58, 0
  br i1 %cmp56, label %if.then63, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %59 = load i64* %indxlen, align 8
  %sub58 = sub i64 %59, 1
  %60 = load i8** @really_start_request.indexname, align 8
  %arrayidx59 = getelementptr inbounds i8* %60, i64 %sub58
  %61 = load i8* %arrayidx59, align 1
  %conv60 = sext i8 %61 to i32
  %cmp61 = icmp ne i32 %conv60, 47
  br i1 %cmp61, label %if.then63, label %if.end65

if.then63:                                        ; preds = %lor.lhs.false, %for.body
  %62 = load i8** @really_start_request.indexname, align 8
  %call64 = call i8* @strcat(i8* %62, i8* getelementptr inbounds ([2 x i8]* @.str75219, i32 0, i32 0)) #5
  br label %if.end65

if.end65:                                         ; preds = %if.then63, %lor.lhs.false
  %63 = load i8** @really_start_request.indexname, align 8
  %call66 = call i32 @strcmp(i8* %63, i8* getelementptr inbounds ([3 x i8]* @.str76220, i32 0, i32 0)) #8
  %cmp67 = icmp eq i32 %call66, 0
  br i1 %cmp67, label %if.then69, label %if.end71

if.then69:                                        ; preds = %if.end65
  %64 = load i8** @really_start_request.indexname, align 8
  %arrayidx70 = getelementptr inbounds i8* %64, i64 0
  store i8 0, i8* %arrayidx70, align 1
  br label %if.end71

if.end71:                                         ; preds = %if.then69, %if.end65
  %65 = load i8** @really_start_request.indexname, align 8
  %66 = load i32* %i, align 4
  %idxprom72 = sext i32 %66 to i64
  %arrayidx73 = getelementptr inbounds [6 x i8*]* @really_start_request.index_names, i32 0, i64 %idxprom72
  %67 = load i8** %arrayidx73, align 8
  %call74 = call i8* @strcat(i8* %65, i8* %67) #5
  %68 = load i8** @really_start_request.indexname, align 8
  %69 = load %struct.httpd_conn** %hc.addr, align 8
  %sb75 = getelementptr inbounds %struct.httpd_conn* %69, i32 0, i32 59
  %call76 = call i32 @stat(i8* %68, %struct.stat* %sb75) #5
  %cmp77 = icmp sge i32 %call76, 0
  br i1 %cmp77, label %if.then79, label %if.end80

if.then79:                                        ; preds = %if.end71
  br label %got_one

if.end80:                                         ; preds = %if.end71
  br label %for.inc

for.inc:                                          ; preds = %if.end80
  %70 = load i32* %i, align 4
  %inc = add nsw i32 %70, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %71 = load %struct.httpd_conn** %hc.addr, align 8
  %sb81 = getelementptr inbounds %struct.httpd_conn* %71, i32 0, i32 59
  %st_mode82 = getelementptr inbounds %struct.stat* %sb81, i32 0, i32 3
  %72 = load i32* %st_mode82, align 4
  %and83 = and i32 %72, 4
  %tobool84 = icmp ne i32 %and83, 0
  br i1 %tobool84, label %if.end90, label %if.then85

if.then85:                                        ; preds = %for.end
  %73 = load %struct.httpd_conn** %hc.addr, align 8
  %client_addr86 = getelementptr inbounds %struct.httpd_conn* %73, i32 0, i32 2
  %call87 = call i8* @httpd_ntoa(%union.httpd_sockaddr* %client_addr86)
  %74 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl88 = getelementptr inbounds %struct.httpd_conn* %74, i32 0, i32 12
  %75 = load i8** %encodedurl88, align 8
  call void (i32, i8*, ...)* @syslog(i32 6, i8* getelementptr inbounds ([68 x i8]* @.str77221, i32 0, i32 0), i8* %call87, i8* %75)
  %76 = load %struct.httpd_conn** %hc.addr, align 8
  %77 = load i8** @err403title, align 8
  %78 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl89 = getelementptr inbounds %struct.httpd_conn* %78, i32 0, i32 12
  %79 = load i8** %encodedurl89, align 8
  call void @httpd_send_err(%struct.httpd_conn* %76, i32 403, i8* %77, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* getelementptr inbounds ([79 x i8]* @.str78222, i32 0, i32 0), i8* %79)
  store i32 -1, i32* %retval
  br label %return

if.end90:                                         ; preds = %for.end
  %80 = load %struct.httpd_conn** %hc.addr, align 8
  %81 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename91 = getelementptr inbounds %struct.httpd_conn* %81, i32 0, i32 16
  %82 = load i8** %expnfilename91, align 8
  %call92 = call i32 @auth_check(%struct.httpd_conn* %80, i8* %82)
  %cmp93 = icmp eq i32 %call92, -1
  br i1 %cmp93, label %if.then95, label %if.end96

if.then95:                                        ; preds = %if.end90
  store i32 -1, i32* %retval
  br label %return

if.end96:                                         ; preds = %if.end90
  %83 = load %struct.httpd_conn** %hc.addr, align 8
  %call97 = call i32 @check_referrer(%struct.httpd_conn* %83)
  %tobool98 = icmp ne i32 %call97, 0
  br i1 %tobool98, label %if.end100, label %if.then99

if.then99:                                        ; preds = %if.end96
  store i32 -1, i32* %retval
  br label %return

if.end100:                                        ; preds = %if.end96
  %84 = load %struct.httpd_conn** %hc.addr, align 8
  %call101 = call i32 @ls(%struct.httpd_conn* %84)
  store i32 %call101, i32* %retval
  br label %return

got_one:                                          ; preds = %if.then79
  %85 = load i8** @really_start_request.indexname, align 8
  %86 = load %struct.httpd_conn** %hc.addr, align 8
  %hs = getelementptr inbounds %struct.httpd_conn* %86, i32 0, i32 1
  %87 = load %struct.httpd_server** %hs, align 8
  %no_symlink_check = getelementptr inbounds %struct.httpd_server* %87, i32 0, i32 14
  %88 = load i32* %no_symlink_check, align 4
  %89 = load %struct.httpd_conn** %hc.addr, align 8
  %tildemapped = getelementptr inbounds %struct.httpd_conn* %89, i32 0, i32 54
  %90 = load i32* %tildemapped, align 4
  %call102 = call i8* @expand_symlinks(i8* %85, i8** %pi, i32 %88, i32 %90)
  store i8* %call102, i8** %cp, align 8
  %91 = load i8** %cp, align 8
  %cmp103 = icmp eq i8* %91, null
  br i1 %cmp103, label %if.then110, label %lor.lhs.false105

lor.lhs.false105:                                 ; preds = %got_one
  %92 = load i8** %pi, align 8
  %arrayidx106 = getelementptr inbounds i8* %92, i64 0
  %93 = load i8* %arrayidx106, align 1
  %conv107 = sext i8 %93 to i32
  %cmp108 = icmp ne i32 %conv107, 0
  br i1 %cmp108, label %if.then110, label %if.end112

if.then110:                                       ; preds = %lor.lhs.false105, %got_one
  %94 = load %struct.httpd_conn** %hc.addr, align 8
  %95 = load i8** @err500title, align 8
  %96 = load i8** @err500form, align 8
  %97 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl111 = getelementptr inbounds %struct.httpd_conn* %97, i32 0, i32 12
  %98 = load i8** %encodedurl111, align 8
  call void @httpd_send_err(%struct.httpd_conn* %94, i32 500, i8* %95, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %96, i8* %98)
  store i32 -1, i32* %retval
  br label %return

if.end112:                                        ; preds = %lor.lhs.false105
  %99 = load i8** %cp, align 8
  %call113 = call i64 @strlen(i8* %99) #8
  store i64 %call113, i64* %expnlen, align 8
  %100 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename114 = getelementptr inbounds %struct.httpd_conn* %100, i32 0, i32 16
  %101 = load %struct.httpd_conn** %hc.addr, align 8
  %maxexpnfilename = getelementptr inbounds %struct.httpd_conn* %101, i32 0, i32 35
  %102 = load i64* %expnlen, align 8
  call void @httpd_realloc_str(i8** %expnfilename114, i64* %maxexpnfilename, i64 %102)
  %103 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename115 = getelementptr inbounds %struct.httpd_conn* %103, i32 0, i32 16
  %104 = load i8** %expnfilename115, align 8
  %105 = load i8** %cp, align 8
  %call116 = call i8* @strcpy(i8* %104, i8* %105) #5
  %106 = load %struct.httpd_conn** %hc.addr, align 8
  %sb117 = getelementptr inbounds %struct.httpd_conn* %106, i32 0, i32 59
  %st_mode118 = getelementptr inbounds %struct.stat* %sb117, i32 0, i32 3
  %107 = load i32* %st_mode118, align 4
  %and119 = and i32 %107, 5
  %tobool120 = icmp ne i32 %and119, 0
  br i1 %tobool120, label %if.end126, label %if.then121

if.then121:                                       ; preds = %if.end112
  %108 = load %struct.httpd_conn** %hc.addr, align 8
  %client_addr122 = getelementptr inbounds %struct.httpd_conn* %108, i32 0, i32 2
  %call123 = call i8* @httpd_ntoa(%union.httpd_sockaddr* %client_addr122)
  %109 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl124 = getelementptr inbounds %struct.httpd_conn* %109, i32 0, i32 12
  %110 = load i8** %encodedurl124, align 8
  call void (i32, i8*, ...)* @syslog(i32 6, i8* getelementptr inbounds ([62 x i8]* @.str79223, i32 0, i32 0), i8* %call123, i8* %110)
  %111 = load %struct.httpd_conn** %hc.addr, align 8
  %112 = load i8** @err403title, align 8
  %113 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl125 = getelementptr inbounds %struct.httpd_conn* %113, i32 0, i32 12
  %114 = load i8** %encodedurl125, align 8
  call void @httpd_send_err(%struct.httpd_conn* %111, i32 403, i8* %112, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* getelementptr inbounds ([81 x i8]* @.str80224, i32 0, i32 0), i8* %114)
  store i32 -1, i32* %retval
  br label %return

if.end126:                                        ; preds = %if.end112
  br label %if.end127

if.end127:                                        ; preds = %if.end126, %if.end18
  %115 = load i64* %expnlen, align 8
  call void @httpd_realloc_str(i8** @really_start_request.dirname, i64* @really_start_request.maxdirname, i64 %115)
  %116 = load i8** @really_start_request.dirname, align 8
  %117 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename128 = getelementptr inbounds %struct.httpd_conn* %117, i32 0, i32 16
  %118 = load i8** %expnfilename128, align 8
  %call129 = call i8* @strcpy(i8* %116, i8* %118) #5
  %119 = load i8** @really_start_request.dirname, align 8
  %call130 = call i8* @strrchr(i8* %119, i32 47) #8
  store i8* %call130, i8** %cp, align 8
  %120 = load i8** %cp, align 8
  %cmp131 = icmp eq i8* %120, null
  br i1 %cmp131, label %if.then133, label %if.else

if.then133:                                       ; preds = %if.end127
  %121 = load i8** @really_start_request.dirname, align 8
  %call134 = call i8* @strcpy(i8* %121, i8* getelementptr inbounds ([2 x i8]* @.str31175, i32 0, i32 0)) #5
  br label %if.end135

if.else:                                          ; preds = %if.end127
  %122 = load i8** %cp, align 8
  store i8 0, i8* %122, align 1
  br label %if.end135

if.end135:                                        ; preds = %if.else, %if.then133
  %123 = load %struct.httpd_conn** %hc.addr, align 8
  %124 = load i8** @really_start_request.dirname, align 8
  %call136 = call i32 @auth_check(%struct.httpd_conn* %123, i8* %124)
  %cmp137 = icmp eq i32 %call136, -1
  br i1 %cmp137, label %if.then139, label %if.end140

if.then139:                                       ; preds = %if.end135
  store i32 -1, i32* %retval
  br label %return

if.end140:                                        ; preds = %if.end135
  %125 = load i64* %expnlen, align 8
  %cmp141 = icmp eq i64 %125, 9
  br i1 %cmp141, label %if.then143, label %if.else154

if.then143:                                       ; preds = %if.end140
  %126 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename144 = getelementptr inbounds %struct.httpd_conn* %126, i32 0, i32 16
  %127 = load i8** %expnfilename144, align 8
  %call145 = call i32 @strcmp(i8* %127, i8* getelementptr inbounds ([10 x i8]* @.str81225, i32 0, i32 0)) #8
  %cmp146 = icmp eq i32 %call145, 0
  br i1 %cmp146, label %if.then148, label %if.end153

if.then148:                                       ; preds = %if.then143
  %128 = load %struct.httpd_conn** %hc.addr, align 8
  %client_addr149 = getelementptr inbounds %struct.httpd_conn* %128, i32 0, i32 2
  %call150 = call i8* @httpd_ntoa(%union.httpd_sockaddr* %client_addr149)
  %129 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl151 = getelementptr inbounds %struct.httpd_conn* %129, i32 0, i32 12
  %130 = load i8** %encodedurl151, align 8
  call void (i32, i8*, ...)* @syslog(i32 5, i8* getelementptr inbounds ([49 x i8]* @.str82226, i32 0, i32 0), i8* %call150, i8* %130)
  %131 = load %struct.httpd_conn** %hc.addr, align 8
  %132 = load i8** @err403title, align 8
  %133 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl152 = getelementptr inbounds %struct.httpd_conn* %133, i32 0, i32 12
  %134 = load i8** %encodedurl152, align 8
  call void @httpd_send_err(%struct.httpd_conn* %131, i32 403, i8* %132, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* getelementptr inbounds ([85 x i8]* @.str83227, i32 0, i32 0), i8* %134)
  store i32 -1, i32* %retval
  br label %return

if.end153:                                        ; preds = %if.then143
  br label %if.end178

if.else154:                                       ; preds = %if.end140
  %135 = load i64* %expnlen, align 8
  %cmp155 = icmp uge i64 %135, 10
  br i1 %cmp155, label %land.lhs.true157, label %if.end177

land.lhs.true157:                                 ; preds = %if.else154
  %136 = load i64* %expnlen, align 8
  %sub158 = sub i64 %136, 10
  %add159 = add i64 %sub158, 1
  %137 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename160 = getelementptr inbounds %struct.httpd_conn* %137, i32 0, i32 16
  %138 = load i8** %expnfilename160, align 8
  %arrayidx161 = getelementptr inbounds i8* %138, i64 %add159
  %call162 = call i32 @strcmp(i8* %arrayidx161, i8* getelementptr inbounds ([10 x i8]* @.str81225, i32 0, i32 0)) #8
  %cmp163 = icmp eq i32 %call162, 0
  br i1 %cmp163, label %land.lhs.true165, label %if.end177

land.lhs.true165:                                 ; preds = %land.lhs.true157
  %139 = load i64* %expnlen, align 8
  %sub166 = sub i64 %139, 10
  %140 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename167 = getelementptr inbounds %struct.httpd_conn* %140, i32 0, i32 16
  %141 = load i8** %expnfilename167, align 8
  %arrayidx168 = getelementptr inbounds i8* %141, i64 %sub166
  %142 = load i8* %arrayidx168, align 1
  %conv169 = sext i8 %142 to i32
  %cmp170 = icmp eq i32 %conv169, 47
  br i1 %cmp170, label %if.then172, label %if.end177

if.then172:                                       ; preds = %land.lhs.true165
  %143 = load %struct.httpd_conn** %hc.addr, align 8
  %client_addr173 = getelementptr inbounds %struct.httpd_conn* %143, i32 0, i32 2
  %call174 = call i8* @httpd_ntoa(%union.httpd_sockaddr* %client_addr173)
  %144 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl175 = getelementptr inbounds %struct.httpd_conn* %144, i32 0, i32 12
  %145 = load i8** %encodedurl175, align 8
  call void (i32, i8*, ...)* @syslog(i32 5, i8* getelementptr inbounds ([49 x i8]* @.str82226, i32 0, i32 0), i8* %call174, i8* %145)
  %146 = load %struct.httpd_conn** %hc.addr, align 8
  %147 = load i8** @err403title, align 8
  %148 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl176 = getelementptr inbounds %struct.httpd_conn* %148, i32 0, i32 12
  %149 = load i8** %encodedurl176, align 8
  call void @httpd_send_err(%struct.httpd_conn* %146, i32 403, i8* %147, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* getelementptr inbounds ([85 x i8]* @.str83227, i32 0, i32 0), i8* %149)
  store i32 -1, i32* %retval
  br label %return

if.end177:                                        ; preds = %land.lhs.true165, %land.lhs.true157, %if.else154
  br label %if.end178

if.end178:                                        ; preds = %if.end177, %if.end153
  %150 = load %struct.httpd_conn** %hc.addr, align 8
  %call179 = call i32 @check_referrer(%struct.httpd_conn* %150)
  %tobool180 = icmp ne i32 %call179, 0
  br i1 %tobool180, label %if.end182, label %if.then181

if.then181:                                       ; preds = %if.end178
  store i32 -1, i32* %retval
  br label %return

if.end182:                                        ; preds = %if.end178
  %151 = load %struct.httpd_conn** %hc.addr, align 8
  %hs183 = getelementptr inbounds %struct.httpd_conn* %151, i32 0, i32 1
  %152 = load %struct.httpd_server** %hs183, align 8
  %cgi_pattern = getelementptr inbounds %struct.httpd_server* %152, i32 0, i32 3
  %153 = load i8** %cgi_pattern, align 8
  %cmp184 = icmp ne i8* %153, null
  br i1 %cmp184, label %land.lhs.true186, label %if.end199

land.lhs.true186:                                 ; preds = %if.end182
  %154 = load %struct.httpd_conn** %hc.addr, align 8
  %sb187 = getelementptr inbounds %struct.httpd_conn* %154, i32 0, i32 59
  %st_mode188 = getelementptr inbounds %struct.stat* %sb187, i32 0, i32 3
  %155 = load i32* %st_mode188, align 4
  %and189 = and i32 %155, 1
  %tobool190 = icmp ne i32 %and189, 0
  br i1 %tobool190, label %land.lhs.true191, label %if.end199

land.lhs.true191:                                 ; preds = %land.lhs.true186
  %156 = load %struct.httpd_conn** %hc.addr, align 8
  %hs192 = getelementptr inbounds %struct.httpd_conn* %156, i32 0, i32 1
  %157 = load %struct.httpd_server** %hs192, align 8
  %cgi_pattern193 = getelementptr inbounds %struct.httpd_server* %157, i32 0, i32 3
  %158 = load i8** %cgi_pattern193, align 8
  %159 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename194 = getelementptr inbounds %struct.httpd_conn* %159, i32 0, i32 16
  %160 = load i8** %expnfilename194, align 8
  %call195 = call i32 @match(i8* %158, i8* %160)
  %tobool196 = icmp ne i32 %call195, 0
  br i1 %tobool196, label %if.then197, label %if.end199

if.then197:                                       ; preds = %land.lhs.true191
  %161 = load %struct.httpd_conn** %hc.addr, align 8
  %call198 = call i32 @cgi(%struct.httpd_conn* %161)
  store i32 %call198, i32* %retval
  br label %return

if.end199:                                        ; preds = %land.lhs.true191, %land.lhs.true186, %if.end182
  %162 = load %struct.httpd_conn** %hc.addr, align 8
  %sb200 = getelementptr inbounds %struct.httpd_conn* %162, i32 0, i32 59
  %st_mode201 = getelementptr inbounds %struct.stat* %sb200, i32 0, i32 3
  %163 = load i32* %st_mode201, align 4
  %and202 = and i32 %163, 1
  %tobool203 = icmp ne i32 %and202, 0
  br i1 %tobool203, label %if.then204, label %if.end209

if.then204:                                       ; preds = %if.end199
  %164 = load %struct.httpd_conn** %hc.addr, align 8
  %client_addr205 = getelementptr inbounds %struct.httpd_conn* %164, i32 0, i32 2
  %call206 = call i8* @httpd_ntoa(%union.httpd_sockaddr* %client_addr205)
  %165 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl207 = getelementptr inbounds %struct.httpd_conn* %165, i32 0, i32 12
  %166 = load i8** %encodedurl207, align 8
  call void (i32, i8*, ...)* @syslog(i32 5, i8* getelementptr inbounds ([46 x i8]* @.str84228, i32 0, i32 0), i8* %call206, i8* %166)
  %167 = load %struct.httpd_conn** %hc.addr, align 8
  %168 = load i8** @err403title, align 8
  %169 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl208 = getelementptr inbounds %struct.httpd_conn* %169, i32 0, i32 12
  %170 = load i8** %encodedurl208, align 8
  call void @httpd_send_err(%struct.httpd_conn* %167, i32 403, i8* %168, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* getelementptr inbounds ([124 x i8]* @.str85229, i32 0, i32 0), i8* %170)
  store i32 -1, i32* %retval
  br label %return

if.end209:                                        ; preds = %if.end199
  %171 = load %struct.httpd_conn** %hc.addr, align 8
  %pathinfo210 = getelementptr inbounds %struct.httpd_conn* %171, i32 0, i32 18
  %172 = load i8** %pathinfo210, align 8
  %arrayidx211 = getelementptr inbounds i8* %172, i64 0
  %173 = load i8* %arrayidx211, align 1
  %conv212 = sext i8 %173 to i32
  %cmp213 = icmp ne i32 %conv212, 0
  br i1 %cmp213, label %if.then215, label %if.end220

if.then215:                                       ; preds = %if.end209
  %174 = load %struct.httpd_conn** %hc.addr, align 8
  %client_addr216 = getelementptr inbounds %struct.httpd_conn* %174, i32 0, i32 2
  %call217 = call i8* @httpd_ntoa(%union.httpd_sockaddr* %client_addr216)
  %175 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl218 = getelementptr inbounds %struct.httpd_conn* %175, i32 0, i32 12
  %176 = load i8** %encodedurl218, align 8
  call void (i32, i8*, ...)* @syslog(i32 6, i8* getelementptr inbounds ([45 x i8]* @.str86230, i32 0, i32 0), i8* %call217, i8* %176)
  %177 = load %struct.httpd_conn** %hc.addr, align 8
  %178 = load i8** @err403title, align 8
  %179 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl219 = getelementptr inbounds %struct.httpd_conn* %179, i32 0, i32 12
  %180 = load i8** %encodedurl219, align 8
  call void @httpd_send_err(%struct.httpd_conn* %177, i32 403, i8* %178, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* getelementptr inbounds ([109 x i8]* @.str87231, i32 0, i32 0), i8* %180)
  store i32 -1, i32* %retval
  br label %return

if.end220:                                        ; preds = %if.end209
  %181 = load %struct.httpd_conn** %hc.addr, align 8
  %got_range = getelementptr inbounds %struct.httpd_conn* %181, i32 0, i32 53
  %182 = load i32* %got_range, align 4
  %tobool221 = icmp ne i32 %182, 0
  br i1 %tobool221, label %land.lhs.true222, label %if.end235

land.lhs.true222:                                 ; preds = %if.end220
  %183 = load %struct.httpd_conn** %hc.addr, align 8
  %last_byte_index = getelementptr inbounds %struct.httpd_conn* %183, i32 0, i32 56
  %184 = load i64* %last_byte_index, align 8
  %cmp223 = icmp eq i64 %184, -1
  br i1 %cmp223, label %if.then230, label %lor.lhs.false225

lor.lhs.false225:                                 ; preds = %land.lhs.true222
  %185 = load %struct.httpd_conn** %hc.addr, align 8
  %last_byte_index226 = getelementptr inbounds %struct.httpd_conn* %185, i32 0, i32 56
  %186 = load i64* %last_byte_index226, align 8
  %187 = load %struct.httpd_conn** %hc.addr, align 8
  %sb227 = getelementptr inbounds %struct.httpd_conn* %187, i32 0, i32 59
  %st_size = getelementptr inbounds %struct.stat* %sb227, i32 0, i32 8
  %188 = load i64* %st_size, align 8
  %cmp228 = icmp sge i64 %186, %188
  br i1 %cmp228, label %if.then230, label %if.end235

if.then230:                                       ; preds = %lor.lhs.false225, %land.lhs.true222
  %189 = load %struct.httpd_conn** %hc.addr, align 8
  %sb231 = getelementptr inbounds %struct.httpd_conn* %189, i32 0, i32 59
  %st_size232 = getelementptr inbounds %struct.stat* %sb231, i32 0, i32 8
  %190 = load i64* %st_size232, align 8
  %sub233 = sub nsw i64 %190, 1
  %191 = load %struct.httpd_conn** %hc.addr, align 8
  %last_byte_index234 = getelementptr inbounds %struct.httpd_conn* %191, i32 0, i32 56
  store i64 %sub233, i64* %last_byte_index234, align 8
  br label %if.end235

if.end235:                                        ; preds = %if.then230, %lor.lhs.false225, %if.end220
  %192 = load %struct.httpd_conn** %hc.addr, align 8
  call void @figure_mime(%struct.httpd_conn* %192)
  %193 = load %struct.httpd_conn** %hc.addr, align 8
  %method236 = getelementptr inbounds %struct.httpd_conn* %193, i32 0, i32 8
  %194 = load i32* %method236, align 4
  %cmp237 = icmp eq i32 %194, 2
  br i1 %cmp237, label %if.then239, label %if.else243

if.then239:                                       ; preds = %if.end235
  %195 = load %struct.httpd_conn** %hc.addr, align 8
  %196 = load i8** @ok200title, align 8
  %197 = load %struct.httpd_conn** %hc.addr, align 8
  %encodings = getelementptr inbounds %struct.httpd_conn* %197, i32 0, i32 17
  %198 = load i8** %encodings, align 8
  %199 = load %struct.httpd_conn** %hc.addr, align 8
  %type = getelementptr inbounds %struct.httpd_conn* %199, i32 0, i32 49
  %200 = load i8** %type, align 8
  %201 = load %struct.httpd_conn** %hc.addr, align 8
  %sb240 = getelementptr inbounds %struct.httpd_conn* %201, i32 0, i32 59
  %st_size241 = getelementptr inbounds %struct.stat* %sb240, i32 0, i32 8
  %202 = load i64* %st_size241, align 8
  %203 = load %struct.httpd_conn** %hc.addr, align 8
  %sb242 = getelementptr inbounds %struct.httpd_conn* %203, i32 0, i32 59
  %st_mtim = getelementptr inbounds %struct.stat* %sb242, i32 0, i32 12
  %tv_sec = getelementptr inbounds %struct.timespec* %st_mtim, i32 0, i32 0
  %204 = load i64* %tv_sec, align 8
  call void @send_mime(%struct.httpd_conn* %195, i32 200, i8* %196, i8* %198, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %200, i64 %202, i64 %204)
  br label %if.end277

if.else243:                                       ; preds = %if.end235
  %205 = load %struct.httpd_conn** %hc.addr, align 8
  %if_modified_since = getelementptr inbounds %struct.httpd_conn* %205, i32 0, i32 46
  %206 = load i64* %if_modified_since, align 8
  %cmp244 = icmp ne i64 %206, -1
  br i1 %cmp244, label %land.lhs.true246, label %if.else259

land.lhs.true246:                                 ; preds = %if.else243
  %207 = load %struct.httpd_conn** %hc.addr, align 8
  %if_modified_since247 = getelementptr inbounds %struct.httpd_conn* %207, i32 0, i32 46
  %208 = load i64* %if_modified_since247, align 8
  %209 = load %struct.httpd_conn** %hc.addr, align 8
  %sb248 = getelementptr inbounds %struct.httpd_conn* %209, i32 0, i32 59
  %st_mtim249 = getelementptr inbounds %struct.stat* %sb248, i32 0, i32 12
  %tv_sec250 = getelementptr inbounds %struct.timespec* %st_mtim249, i32 0, i32 0
  %210 = load i64* %tv_sec250, align 8
  %cmp251 = icmp sge i64 %208, %210
  br i1 %cmp251, label %if.then253, label %if.else259

if.then253:                                       ; preds = %land.lhs.true246
  %211 = load %struct.httpd_conn** %hc.addr, align 8
  %212 = load i8** @err304title, align 8
  %213 = load %struct.httpd_conn** %hc.addr, align 8
  %encodings254 = getelementptr inbounds %struct.httpd_conn* %213, i32 0, i32 17
  %214 = load i8** %encodings254, align 8
  %215 = load %struct.httpd_conn** %hc.addr, align 8
  %type255 = getelementptr inbounds %struct.httpd_conn* %215, i32 0, i32 49
  %216 = load i8** %type255, align 8
  %217 = load %struct.httpd_conn** %hc.addr, align 8
  %sb256 = getelementptr inbounds %struct.httpd_conn* %217, i32 0, i32 59
  %st_mtim257 = getelementptr inbounds %struct.stat* %sb256, i32 0, i32 12
  %tv_sec258 = getelementptr inbounds %struct.timespec* %st_mtim257, i32 0, i32 0
  %218 = load i64* %tv_sec258, align 8
  call void @send_mime(%struct.httpd_conn* %211, i32 304, i8* %212, i8* %214, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %216, i64 -1, i64 %218)
  br label %if.end276

if.else259:                                       ; preds = %land.lhs.true246, %if.else243
  %219 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename260 = getelementptr inbounds %struct.httpd_conn* %219, i32 0, i32 16
  %220 = load i8** %expnfilename260, align 8
  %221 = load %struct.httpd_conn** %hc.addr, align 8
  %sb261 = getelementptr inbounds %struct.httpd_conn* %221, i32 0, i32 59
  %222 = load %struct.timeval** %nowP.addr, align 8
  %call262 = call i8* @mmc_map(i8* %220, %struct.stat* %sb261, %struct.timeval* %222)
  %223 = load %struct.httpd_conn** %hc.addr, align 8
  %file_address = getelementptr inbounds %struct.httpd_conn* %223, i32 0, i32 61
  store i8* %call262, i8** %file_address, align 8
  %224 = load %struct.httpd_conn** %hc.addr, align 8
  %file_address263 = getelementptr inbounds %struct.httpd_conn* %224, i32 0, i32 61
  %225 = load i8** %file_address263, align 8
  %cmp264 = icmp eq i8* %225, null
  br i1 %cmp264, label %if.then266, label %if.end268

if.then266:                                       ; preds = %if.else259
  %226 = load %struct.httpd_conn** %hc.addr, align 8
  %227 = load i8** @err500title, align 8
  %228 = load i8** @err500form, align 8
  %229 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl267 = getelementptr inbounds %struct.httpd_conn* %229, i32 0, i32 12
  %230 = load i8** %encodedurl267, align 8
  call void @httpd_send_err(%struct.httpd_conn* %226, i32 500, i8* %227, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %228, i8* %230)
  store i32 -1, i32* %retval
  br label %return

if.end268:                                        ; preds = %if.else259
  %231 = load %struct.httpd_conn** %hc.addr, align 8
  %232 = load i8** @ok200title, align 8
  %233 = load %struct.httpd_conn** %hc.addr, align 8
  %encodings269 = getelementptr inbounds %struct.httpd_conn* %233, i32 0, i32 17
  %234 = load i8** %encodings269, align 8
  %235 = load %struct.httpd_conn** %hc.addr, align 8
  %type270 = getelementptr inbounds %struct.httpd_conn* %235, i32 0, i32 49
  %236 = load i8** %type270, align 8
  %237 = load %struct.httpd_conn** %hc.addr, align 8
  %sb271 = getelementptr inbounds %struct.httpd_conn* %237, i32 0, i32 59
  %st_size272 = getelementptr inbounds %struct.stat* %sb271, i32 0, i32 8
  %238 = load i64* %st_size272, align 8
  %239 = load %struct.httpd_conn** %hc.addr, align 8
  %sb273 = getelementptr inbounds %struct.httpd_conn* %239, i32 0, i32 59
  %st_mtim274 = getelementptr inbounds %struct.stat* %sb273, i32 0, i32 12
  %tv_sec275 = getelementptr inbounds %struct.timespec* %st_mtim274, i32 0, i32 0
  %240 = load i64* %tv_sec275, align 8
  call void @send_mime(%struct.httpd_conn* %231, i32 200, i8* %232, i8* %234, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %236, i64 %238, i64 %240)
  br label %if.end276

if.end276:                                        ; preds = %if.end268, %if.then253
  br label %if.end277

if.end277:                                        ; preds = %if.end276, %if.then239
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end277, %if.then266, %if.then215, %if.then204, %if.then197, %if.then181, %if.then172, %if.then148, %if.then139, %if.then121, %if.then110, %if.end100, %if.then99, %if.then95, %if.then85, %if.then45, %if.then26, %if.then14, %if.then11, %if.then
  %241 = load i32* %retval
  ret i32 %241
}

; Function Attrs: nounwind uwtable
define internal i32 @auth_check2(%struct.httpd_conn* %hc, i8* %dirname) #0 {
entry:
  %retval = alloca i32, align 4
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %dirname.addr = alloca i8*, align 8
  %sb = alloca %struct.stat, align 8
  %authinfo = alloca [500 x i8], align 16
  %authpass = alloca i8*, align 8
  %colon = alloca i8*, align 8
  %l = alloca i32, align 4
  %fp = alloca %struct._IO_FILE*, align 8
  %line = alloca [500 x i8], align 16
  %cryp = alloca i8*, align 8
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  store i8* %dirname, i8** %dirname.addr, align 8
  %line1 = bitcast [500 x i8]* %line to i8*
  call void @llvm.var.annotation(i8* %line1, i8* getelementptr inbounds ([10 x i8]* @.str507, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str508, i32 0, i32 0), i32 1032)
  %0 = load i8** %dirname.addr, align 8
  %call = call i64 @strlen(i8* %0) #8
  %add = add i64 %call, 1
  %add2 = add i64 %add, 10
  call void @httpd_realloc_str(i8** @auth_check2.authpath, i64* @auth_check2.maxauthpath, i64 %add2)
  %1 = load i8** @auth_check2.authpath, align 8
  %2 = load i64* @auth_check2.maxauthpath, align 8
  %3 = load i8** %dirname.addr, align 8
  %call3 = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %1, i64 %2, i8* getelementptr inbounds ([6 x i8]* @.str493, i32 0, i32 0), i8* %3, i8* getelementptr inbounds ([10 x i8]* @.str81225, i32 0, i32 0))
  %4 = load i8** @auth_check2.authpath, align 8
  %call4 = call i32 @stat(i8* %4, %struct.stat* %sb) #5
  %cmp = icmp slt i32 %call4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct.httpd_conn** %hc.addr, align 8
  %authorization = getelementptr inbounds %struct.httpd_conn* %5, i32 0, i32 30
  %6 = load i8** %authorization, align 8
  %arrayidx = getelementptr inbounds i8* %6, i64 0
  %7 = load i8* %arrayidx, align 1
  %conv = sext i8 %7 to i32
  %cmp5 = icmp eq i32 %conv, 0
  br i1 %cmp5, label %if.then11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %8 = load %struct.httpd_conn** %hc.addr, align 8
  %authorization7 = getelementptr inbounds %struct.httpd_conn* %8, i32 0, i32 30
  %9 = load i8** %authorization7, align 8
  %call8 = call i32 @strncmp(i8* %9, i8* getelementptr inbounds ([7 x i8]* @.str509, i32 0, i32 0), i64 6) #8
  %cmp9 = icmp ne i32 %call8, 0
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %lor.lhs.false, %if.end
  %10 = load %struct.httpd_conn** %hc.addr, align 8
  %11 = load i8** %dirname.addr, align 8
  call void @send_authenticate(%struct.httpd_conn* %10, i8* %11)
  store i32 -1, i32* %retval
  br label %return

if.end12:                                         ; preds = %lor.lhs.false
  %12 = load %struct.httpd_conn** %hc.addr, align 8
  %authorization13 = getelementptr inbounds %struct.httpd_conn* %12, i32 0, i32 30
  %13 = load i8** %authorization13, align 8
  %arrayidx14 = getelementptr inbounds i8* %13, i64 6
  %arraydecay = getelementptr inbounds [500 x i8]* %authinfo, i32 0, i32 0
  %call15 = call i32 @b64_decode(i8* %arrayidx14, i8* %arraydecay, i32 499)
  store i32 %call15, i32* %l, align 4
  %14 = load i32* %l, align 4
  %idxprom = sext i32 %14 to i64
  %arrayidx16 = getelementptr inbounds [500 x i8]* %authinfo, i32 0, i64 %idxprom
  store i8 0, i8* %arrayidx16, align 1
  %arraydecay17 = getelementptr inbounds [500 x i8]* %authinfo, i32 0, i32 0
  %call18 = call i8* @strchr(i8* %arraydecay17, i32 58) #8
  store i8* %call18, i8** %authpass, align 8
  %15 = load i8** %authpass, align 8
  %cmp19 = icmp eq i8* %15, null
  br i1 %cmp19, label %if.then21, label %if.end22

if.then21:                                        ; preds = %if.end12
  %16 = load %struct.httpd_conn** %hc.addr, align 8
  %17 = load i8** %dirname.addr, align 8
  call void @send_authenticate(%struct.httpd_conn* %16, i8* %17)
  store i32 -1, i32* %retval
  br label %return

if.end22:                                         ; preds = %if.end12
  %18 = load i8** %authpass, align 8
  %incdec.ptr = getelementptr inbounds i8* %18, i32 1
  store i8* %incdec.ptr, i8** %authpass, align 8
  store i8 0, i8* %18, align 1
  %19 = load i8** %authpass, align 8
  %call23 = call i8* @strchr(i8* %19, i32 58) #8
  store i8* %call23, i8** %colon, align 8
  %20 = load i8** %colon, align 8
  %cmp24 = icmp ne i8* %20, null
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.end22
  %21 = load i8** %colon, align 8
  store i8 0, i8* %21, align 1
  br label %if.end27

if.end27:                                         ; preds = %if.then26, %if.end22
  %22 = load i64* @auth_check2.maxprevauthpath, align 8
  %cmp28 = icmp ne i64 %22, 0
  br i1 %cmp28, label %land.lhs.true, label %if.end53

land.lhs.true:                                    ; preds = %if.end27
  %23 = load i8** @auth_check2.authpath, align 8
  %24 = load i8** @auth_check2.prevauthpath, align 8
  %call30 = call i32 @strcmp(i8* %23, i8* %24) #8
  %cmp31 = icmp eq i32 %call30, 0
  br i1 %cmp31, label %land.lhs.true33, label %if.end53

land.lhs.true33:                                  ; preds = %land.lhs.true
  %st_mtim = getelementptr inbounds %struct.stat* %sb, i32 0, i32 12
  %tv_sec = getelementptr inbounds %struct.timespec* %st_mtim, i32 0, i32 0
  %25 = load i64* %tv_sec, align 8
  %26 = load i64* @auth_check2.prevmtime, align 8
  %cmp34 = icmp eq i64 %25, %26
  br i1 %cmp34, label %land.lhs.true36, label %if.end53

land.lhs.true36:                                  ; preds = %land.lhs.true33
  %arraydecay37 = getelementptr inbounds [500 x i8]* %authinfo, i32 0, i32 0
  %27 = load i8** @auth_check2.prevuser, align 8
  %call38 = call i32 @strcmp(i8* %arraydecay37, i8* %27) #8
  %cmp39 = icmp eq i32 %call38, 0
  br i1 %cmp39, label %if.then41, label %if.end53

if.then41:                                        ; preds = %land.lhs.true36
  %28 = load i8** %authpass, align 8
  %29 = load i8** @auth_check2.prevcryp, align 8
  %call42 = call i32 (i8*, i8*, ...)* bitcast (i32 (...)* @crypt to i32 (i8*, i8*, ...)*)(i8* %28, i8* %29)
  %conv43 = sext i32 %call42 to i64
  %30 = inttoptr i64 %conv43 to i8*
  %31 = load i8** @auth_check2.prevcryp, align 8
  %call44 = call i32 @strcmp(i8* %30, i8* %31) #8
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then47, label %if.else

if.then47:                                        ; preds = %if.then41
  %32 = load %struct.httpd_conn** %hc.addr, align 8
  %remoteuser = getelementptr inbounds %struct.httpd_conn* %32, i32 0, i32 31
  %33 = load %struct.httpd_conn** %hc.addr, align 8
  %maxremoteuser = getelementptr inbounds %struct.httpd_conn* %33, i32 0, i32 43
  %arraydecay48 = getelementptr inbounds [500 x i8]* %authinfo, i32 0, i32 0
  %call49 = call i64 @strlen(i8* %arraydecay48) #8
  call void @httpd_realloc_str(i8** %remoteuser, i64* %maxremoteuser, i64 %call49)
  %34 = load %struct.httpd_conn** %hc.addr, align 8
  %remoteuser50 = getelementptr inbounds %struct.httpd_conn* %34, i32 0, i32 31
  %35 = load i8** %remoteuser50, align 8
  %arraydecay51 = getelementptr inbounds [500 x i8]* %authinfo, i32 0, i32 0
  %call52 = call i8* @strcpy(i8* %35, i8* %arraydecay51) #5
  store i32 1, i32* %retval
  br label %return

if.else:                                          ; preds = %if.then41
  %36 = load %struct.httpd_conn** %hc.addr, align 8
  %37 = load i8** %dirname.addr, align 8
  call void @send_authenticate(%struct.httpd_conn* %36, i8* %37)
  store i32 -1, i32* %retval
  br label %return

if.end53:                                         ; preds = %land.lhs.true36, %land.lhs.true33, %land.lhs.true, %if.end27
  %38 = load i8** @auth_check2.authpath, align 8
  %call54 = call %struct._IO_FILE* @fopen(i8* %38, i8* getelementptr inbounds ([2 x i8]* @.str510, i32 0, i32 0))
  store %struct._IO_FILE* %call54, %struct._IO_FILE** %fp, align 8
  %39 = load %struct._IO_FILE** %fp, align 8
  %cmp55 = icmp eq %struct._IO_FILE* %39, null
  br i1 %cmp55, label %if.then57, label %if.end59

if.then57:                                        ; preds = %if.end53
  %40 = load %struct.httpd_conn** %hc.addr, align 8
  %client_addr = getelementptr inbounds %struct.httpd_conn* %40, i32 0, i32 2
  %call58 = call i8* @httpd_ntoa(%union.httpd_sockaddr* %client_addr)
  %41 = load i8** @auth_check2.authpath, align 8
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([47 x i8]* @.str511, i32 0, i32 0), i8* %call58, i8* %41)
  %42 = load %struct.httpd_conn** %hc.addr, align 8
  %43 = load i8** @err403title, align 8
  %44 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl = getelementptr inbounds %struct.httpd_conn* %44, i32 0, i32 12
  %45 = load i8** %encodedurl, align 8
  call void @httpd_send_err(%struct.httpd_conn* %42, i32 403, i8* %43, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* getelementptr inbounds ([113 x i8]* @.str512, i32 0, i32 0), i8* %45)
  store i32 -1, i32* %retval
  br label %return

if.end59:                                         ; preds = %if.end53
  br label %while.cond

while.cond:                                       ; preds = %if.end115, %if.then81, %if.end59
  %arraydecay60 = getelementptr inbounds [500 x i8]* %line, i32 0, i32 0
  %46 = load %struct._IO_FILE** %fp, align 8
  %call61 = call i8* @fgets(i8* %arraydecay60, i32 500, %struct._IO_FILE* %46)
  %cmp62 = icmp ne i8* %call61, null
  br i1 %cmp62, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %arraydecay64 = getelementptr inbounds [500 x i8]* %line, i32 0, i32 0
  %call65 = call i64 @strlen(i8* %arraydecay64) #8
  %conv66 = trunc i64 %call65 to i32
  store i32 %conv66, i32* %l, align 4
  %47 = load i32* %l, align 4
  %sub = sub nsw i32 %47, 1
  %idxprom67 = sext i32 %sub to i64
  %arrayidx68 = getelementptr inbounds [500 x i8]* %line, i32 0, i64 %idxprom67
  %48 = load i8* %arrayidx68, align 1
  %conv69 = sext i8 %48 to i32
  %cmp70 = icmp eq i32 %conv69, 10
  br i1 %cmp70, label %if.then72, label %if.end76

if.then72:                                        ; preds = %while.body
  %49 = load i32* %l, align 4
  %sub73 = sub nsw i32 %49, 1
  %idxprom74 = sext i32 %sub73 to i64
  %arrayidx75 = getelementptr inbounds [500 x i8]* %line, i32 0, i64 %idxprom74
  store i8 0, i8* %arrayidx75, align 1
  br label %if.end76

if.end76:                                         ; preds = %if.then72, %while.body
  %arraydecay77 = getelementptr inbounds [500 x i8]* %line, i32 0, i32 0
  %call78 = call i8* @strchr(i8* %arraydecay77, i32 58) #8
  store i8* %call78, i8** %cryp, align 8
  %50 = load i8** %cryp, align 8
  %cmp79 = icmp eq i8* %50, null
  br i1 %cmp79, label %if.then81, label %if.end82

if.then81:                                        ; preds = %if.end76
  br label %while.cond

if.end82:                                         ; preds = %if.end76
  %51 = load i8** %cryp, align 8
  %incdec.ptr83 = getelementptr inbounds i8* %51, i32 1
  store i8* %incdec.ptr83, i8** %cryp, align 8
  store i8 0, i8* %51, align 1
  %arraydecay84 = getelementptr inbounds [500 x i8]* %line, i32 0, i32 0
  %arraydecay85 = getelementptr inbounds [500 x i8]* %authinfo, i32 0, i32 0
  %call86 = call i32 @strcmp(i8* %arraydecay84, i8* %arraydecay85) #8
  %cmp87 = icmp eq i32 %call86, 0
  br i1 %cmp87, label %if.then89, label %if.end115

if.then89:                                        ; preds = %if.end82
  %52 = load %struct._IO_FILE** %fp, align 8
  %call90 = call i32 @fclose(%struct._IO_FILE* %52)
  %53 = load i8** %authpass, align 8
  %54 = load i8** %cryp, align 8
  %call91 = call i32 (i8*, i8*, ...)* bitcast (i32 (...)* @crypt to i32 (i8*, i8*, ...)*)(i8* %53, i8* %54)
  %conv92 = sext i32 %call91 to i64
  %55 = inttoptr i64 %conv92 to i8*
  %56 = load i8** %cryp, align 8
  %call93 = call i32 @strcmp(i8* %55, i8* %56) #8
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then96, label %if.else114

if.then96:                                        ; preds = %if.then89
  %57 = load %struct.httpd_conn** %hc.addr, align 8
  %remoteuser97 = getelementptr inbounds %struct.httpd_conn* %57, i32 0, i32 31
  %58 = load %struct.httpd_conn** %hc.addr, align 8
  %maxremoteuser98 = getelementptr inbounds %struct.httpd_conn* %58, i32 0, i32 43
  %arraydecay99 = getelementptr inbounds [500 x i8]* %line, i32 0, i32 0
  %call100 = call i64 @strlen(i8* %arraydecay99) #8
  call void @httpd_realloc_str(i8** %remoteuser97, i64* %maxremoteuser98, i64 %call100)
  %59 = load %struct.httpd_conn** %hc.addr, align 8
  %remoteuser101 = getelementptr inbounds %struct.httpd_conn* %59, i32 0, i32 31
  %60 = load i8** %remoteuser101, align 8
  %arraydecay102 = getelementptr inbounds [500 x i8]* %line, i32 0, i32 0
  %call103 = call i8* @strcpy(i8* %60, i8* %arraydecay102) #5
  %61 = load i8** @auth_check2.authpath, align 8
  %call104 = call i64 @strlen(i8* %61) #8
  call void @httpd_realloc_str(i8** @auth_check2.prevauthpath, i64* @auth_check2.maxprevauthpath, i64 %call104)
  %62 = load i8** @auth_check2.prevauthpath, align 8
  %63 = load i8** @auth_check2.authpath, align 8
  %call105 = call i8* @strcpy(i8* %62, i8* %63) #5
  %st_mtim106 = getelementptr inbounds %struct.stat* %sb, i32 0, i32 12
  %tv_sec107 = getelementptr inbounds %struct.timespec* %st_mtim106, i32 0, i32 0
  %64 = load i64* %tv_sec107, align 8
  store i64 %64, i64* @auth_check2.prevmtime, align 8
  %arraydecay108 = getelementptr inbounds [500 x i8]* %authinfo, i32 0, i32 0
  %call109 = call i64 @strlen(i8* %arraydecay108) #8
  call void @httpd_realloc_str(i8** @auth_check2.prevuser, i64* @auth_check2.maxprevuser, i64 %call109)
  %65 = load i8** @auth_check2.prevuser, align 8
  %arraydecay110 = getelementptr inbounds [500 x i8]* %authinfo, i32 0, i32 0
  %call111 = call i8* @strcpy(i8* %65, i8* %arraydecay110) #5
  %66 = load i8** %cryp, align 8
  %call112 = call i64 @strlen(i8* %66) #8
  call void @httpd_realloc_str(i8** @auth_check2.prevcryp, i64* @auth_check2.maxprevcryp, i64 %call112)
  %67 = load i8** @auth_check2.prevcryp, align 8
  %68 = load i8** %cryp, align 8
  %call113 = call i8* @strcpy(i8* %67, i8* %68) #5
  store i32 1, i32* %retval
  br label %return

if.else114:                                       ; preds = %if.then89
  %69 = load %struct.httpd_conn** %hc.addr, align 8
  %70 = load i8** %dirname.addr, align 8
  call void @send_authenticate(%struct.httpd_conn* %69, i8* %70)
  store i32 -1, i32* %retval
  br label %return

if.end115:                                        ; preds = %if.end82
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %71 = load %struct._IO_FILE** %fp, align 8
  %call116 = call i32 @fclose(%struct._IO_FILE* %71)
  %72 = load %struct.httpd_conn** %hc.addr, align 8
  %73 = load i8** %dirname.addr, align 8
  call void @send_authenticate(%struct.httpd_conn* %72, i8* %73)
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.else114, %if.then96, %if.then57, %if.else, %if.then47, %if.then21, %if.then11, %if.then
  %74 = load i32* %retval
  ret i32 %74
}

; Function Attrs: nounwind uwtable
define internal i32 @ext_compare(i8* %v1, i8* %v2) #0 {
entry:
  %v1.addr = alloca i8*, align 8
  %v2.addr = alloca i8*, align 8
  %m1 = alloca %struct.mime_entry*, align 8
  %m2 = alloca %struct.mime_entry*, align 8
  store i8* %v1, i8** %v1.addr, align 8
  store i8* %v2, i8** %v2.addr, align 8
  %0 = load i8** %v1.addr, align 8
  %1 = bitcast i8* %0 to %struct.mime_entry*
  store %struct.mime_entry* %1, %struct.mime_entry** %m1, align 8
  %2 = load i8** %v2.addr, align 8
  %3 = bitcast i8* %2 to %struct.mime_entry*
  store %struct.mime_entry* %3, %struct.mime_entry** %m2, align 8
  %4 = load %struct.mime_entry** %m1, align 8
  %ext = getelementptr inbounds %struct.mime_entry* %4, i32 0, i32 0
  %5 = load i8** %ext, align 8
  %6 = load %struct.mime_entry** %m2, align 8
  %ext1 = getelementptr inbounds %struct.mime_entry* %6, i32 0, i32 0
  %7 = load i8** %ext1, align 8
  %call = call i32 @strcmp(i8* %5, i8* %7) #8
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal void @send_mime(%struct.httpd_conn* %hc, i32 %status, i8* %title, i8* %encodings, i8* %extraheads, i8* %type, i64 %length, i64 %mod) #0 {
entry:
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %status.addr = alloca i32, align 4
  %title.addr = alloca i8*, align 8
  %encodings.addr = alloca i8*, align 8
  %extraheads.addr = alloca i8*, align 8
  %type.addr = alloca i8*, align 8
  %length.addr = alloca i64, align 8
  %mod.addr = alloca i64, align 8
  %now = alloca i64, align 8
  %expires = alloca i64, align 8
  %rfc1123fmt = alloca i8*, align 8
  %nowbuf = alloca [100 x i8], align 16
  %modbuf = alloca [100 x i8], align 16
  %expbuf = alloca [100 x i8], align 16
  %fixed_type = alloca [500 x i8], align 16
  %buf = alloca [1000 x i8], align 16
  %partial_content = alloca i32, align 4
  %s100 = alloca i32, align 4
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  store i32 %status, i32* %status.addr, align 4
  store i8* %title, i8** %title.addr, align 8
  store i8* %encodings, i8** %encodings.addr, align 8
  store i8* %extraheads, i8** %extraheads.addr, align 8
  store i8* %type, i8** %type.addr, align 8
  store i64 %length, i64* %length.addr, align 8
  store i64 %mod, i64* %mod.addr, align 8
  store i8* getelementptr inbounds ([26 x i8]* @.str90234, i32 0, i32 0), i8** %rfc1123fmt, align 8
  %0 = load i32* %status.addr, align 4
  %1 = load %struct.httpd_conn** %hc.addr, align 8
  %status1 = getelementptr inbounds %struct.httpd_conn* %1, i32 0, i32 9
  store i32 %0, i32* %status1, align 4
  %2 = load i64* %length.addr, align 8
  %3 = load %struct.httpd_conn** %hc.addr, align 8
  %bytes_to_send = getelementptr inbounds %struct.httpd_conn* %3, i32 0, i32 10
  store i64 %2, i64* %bytes_to_send, align 8
  %4 = load %struct.httpd_conn** %hc.addr, align 8
  %mime_flag = getelementptr inbounds %struct.httpd_conn* %4, i32 0, i32 51
  %5 = load i32* %mime_flag, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.then, label %if.end104

if.then:                                          ; preds = %entry
  %6 = load i32* %status.addr, align 4
  %cmp = icmp eq i32 %6, 200
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then
  %7 = load %struct.httpd_conn** %hc.addr, align 8
  %got_range = getelementptr inbounds %struct.httpd_conn* %7, i32 0, i32 53
  %8 = load i32* %got_range, align 4
  %tobool2 = icmp ne i32 %8, 0
  br i1 %tobool2, label %land.lhs.true3, label %if.else

land.lhs.true3:                                   ; preds = %land.lhs.true
  %9 = load %struct.httpd_conn** %hc.addr, align 8
  %last_byte_index = getelementptr inbounds %struct.httpd_conn* %9, i32 0, i32 56
  %10 = load i64* %last_byte_index, align 8
  %11 = load %struct.httpd_conn** %hc.addr, align 8
  %first_byte_index = getelementptr inbounds %struct.httpd_conn* %11, i32 0, i32 55
  %12 = load i64* %first_byte_index, align 8
  %cmp4 = icmp sge i64 %10, %12
  br i1 %cmp4, label %land.lhs.true5, label %if.else

land.lhs.true5:                                   ; preds = %land.lhs.true3
  %13 = load %struct.httpd_conn** %hc.addr, align 8
  %last_byte_index6 = getelementptr inbounds %struct.httpd_conn* %13, i32 0, i32 56
  %14 = load i64* %last_byte_index6, align 8
  %15 = load i64* %length.addr, align 8
  %sub = sub nsw i64 %15, 1
  %cmp7 = icmp ne i64 %14, %sub
  br i1 %cmp7, label %land.lhs.true10, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true5
  %16 = load %struct.httpd_conn** %hc.addr, align 8
  %first_byte_index8 = getelementptr inbounds %struct.httpd_conn* %16, i32 0, i32 55
  %17 = load i64* %first_byte_index8, align 8
  %cmp9 = icmp ne i64 %17, 0
  br i1 %cmp9, label %land.lhs.true10, label %if.else

land.lhs.true10:                                  ; preds = %lor.lhs.false, %land.lhs.true5
  %18 = load %struct.httpd_conn** %hc.addr, align 8
  %range_if = getelementptr inbounds %struct.httpd_conn* %18, i32 0, i32 47
  %19 = load i64* %range_if, align 8
  %cmp11 = icmp eq i64 %19, -1
  br i1 %cmp11, label %if.then15, label %lor.lhs.false12

lor.lhs.false12:                                  ; preds = %land.lhs.true10
  %20 = load %struct.httpd_conn** %hc.addr, align 8
  %range_if13 = getelementptr inbounds %struct.httpd_conn* %20, i32 0, i32 47
  %21 = load i64* %range_if13, align 8
  %22 = load %struct.httpd_conn** %hc.addr, align 8
  %sb = getelementptr inbounds %struct.httpd_conn* %22, i32 0, i32 59
  %st_mtim = getelementptr inbounds %struct.stat* %sb, i32 0, i32 12
  %tv_sec = getelementptr inbounds %struct.timespec* %st_mtim, i32 0, i32 0
  %23 = load i64* %tv_sec, align 8
  %cmp14 = icmp eq i64 %21, %23
  br i1 %cmp14, label %if.then15, label %if.else

if.then15:                                        ; preds = %lor.lhs.false12, %land.lhs.true10
  store i32 1, i32* %partial_content, align 4
  store i32 206, i32* %status.addr, align 4
  %24 = load %struct.httpd_conn** %hc.addr, align 8
  %status16 = getelementptr inbounds %struct.httpd_conn* %24, i32 0, i32 9
  store i32 206, i32* %status16, align 4
  %25 = load i8** @ok206title, align 8
  store i8* %25, i8** %title.addr, align 8
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false12, %lor.lhs.false, %land.lhs.true3, %land.lhs.true, %if.then
  store i32 0, i32* %partial_content, align 4
  %26 = load %struct.httpd_conn** %hc.addr, align 8
  %got_range17 = getelementptr inbounds %struct.httpd_conn* %26, i32 0, i32 53
  store i32 0, i32* %got_range17, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then15
  %call = call i64 @time(i64* null) #5
  store i64 %call, i64* %now, align 8
  %27 = load i64* %mod.addr, align 8
  %cmp18 = icmp eq i64 %27, 0
  br i1 %cmp18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.end
  %28 = load i64* %now, align 8
  store i64 %28, i64* %mod.addr, align 8
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %if.end
  %arraydecay = getelementptr inbounds [100 x i8]* %nowbuf, i32 0, i32 0
  %29 = load i8** %rfc1123fmt, align 8
  %call21 = call %struct.tm* @gmtime(i64* %now) #5
  %call22 = call i64 @strftime(i8* %arraydecay, i64 100, i8* %29, %struct.tm* %call21) #5
  %arraydecay23 = getelementptr inbounds [100 x i8]* %modbuf, i32 0, i32 0
  %30 = load i8** %rfc1123fmt, align 8
  %call24 = call %struct.tm* @gmtime(i64* %mod.addr) #5
  %call25 = call i64 @strftime(i8* %arraydecay23, i64 100, i8* %30, %struct.tm* %call24) #5
  %arraydecay26 = getelementptr inbounds [500 x i8]* %fixed_type, i32 0, i32 0
  %31 = load i8** %type.addr, align 8
  %32 = load %struct.httpd_conn** %hc.addr, align 8
  %hs = getelementptr inbounds %struct.httpd_conn* %32, i32 0, i32 1
  %33 = load %struct.httpd_server** %hs, align 8
  %charset = getelementptr inbounds %struct.httpd_server* %33, i32 0, i32 6
  %34 = load i8** %charset, align 8
  %call27 = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %arraydecay26, i64 500, i8* %31, i8* %34)
  %arraydecay28 = getelementptr inbounds [1000 x i8]* %buf, i32 0, i32 0
  %35 = load %struct.httpd_conn** %hc.addr, align 8
  %protocol = getelementptr inbounds %struct.httpd_conn* %35, i32 0, i32 14
  %36 = load i8** %protocol, align 8
  %37 = load i32* %status.addr, align 4
  %38 = load i8** %title.addr, align 8
  %arraydecay29 = getelementptr inbounds [500 x i8]* %fixed_type, i32 0, i32 0
  %arraydecay30 = getelementptr inbounds [100 x i8]* %nowbuf, i32 0, i32 0
  %arraydecay31 = getelementptr inbounds [100 x i8]* %modbuf, i32 0, i32 0
  %call32 = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %arraydecay28, i64 1000, i8* getelementptr inbounds ([114 x i8]* @.str91235, i32 0, i32 0), i8* %36, i32 %37, i8* %38, i8* getelementptr inbounds ([22 x i8]* @.str8140, i32 0, i32 0), i8* %arraydecay29, i8* %arraydecay30, i8* %arraydecay31)
  %39 = load %struct.httpd_conn** %hc.addr, align 8
  %arraydecay33 = getelementptr inbounds [1000 x i8]* %buf, i32 0, i32 0
  call void @add_response(%struct.httpd_conn* %39, i8* %arraydecay33)
  %40 = load i32* %status.addr, align 4
  %div = sdiv i32 %40, 100
  store i32 %div, i32* %s100, align 4
  %41 = load i32* %s100, align 4
  %cmp34 = icmp ne i32 %41, 2
  br i1 %cmp34, label %land.lhs.true35, label %if.end41

land.lhs.true35:                                  ; preds = %if.end20
  %42 = load i32* %s100, align 4
  %cmp36 = icmp ne i32 %42, 3
  br i1 %cmp36, label %if.then37, label %if.end41

if.then37:                                        ; preds = %land.lhs.true35
  %arraydecay38 = getelementptr inbounds [1000 x i8]* %buf, i32 0, i32 0
  %call39 = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %arraydecay38, i64 1000, i8* getelementptr inbounds ([35 x i8]* @.str92236, i32 0, i32 0))
  %43 = load %struct.httpd_conn** %hc.addr, align 8
  %arraydecay40 = getelementptr inbounds [1000 x i8]* %buf, i32 0, i32 0
  call void @add_response(%struct.httpd_conn* %43, i8* %arraydecay40)
  br label %if.end41

if.end41:                                         ; preds = %if.then37, %land.lhs.true35, %if.end20
  %44 = load i8** %encodings.addr, align 8
  %arrayidx = getelementptr inbounds i8* %44, i64 0
  %45 = load i8* %arrayidx, align 1
  %conv = sext i8 %45 to i32
  %cmp42 = icmp ne i32 %conv, 0
  br i1 %cmp42, label %if.then44, label %if.end48

if.then44:                                        ; preds = %if.end41
  %arraydecay45 = getelementptr inbounds [1000 x i8]* %buf, i32 0, i32 0
  %46 = load i8** %encodings.addr, align 8
  %call46 = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %arraydecay45, i64 1000, i8* getelementptr inbounds ([23 x i8]* @.str93237, i32 0, i32 0), i8* %46)
  %47 = load %struct.httpd_conn** %hc.addr, align 8
  %arraydecay47 = getelementptr inbounds [1000 x i8]* %buf, i32 0, i32 0
  call void @add_response(%struct.httpd_conn* %47, i8* %arraydecay47)
  br label %if.end48

if.end48:                                         ; preds = %if.then44, %if.end41
  %48 = load i32* %partial_content, align 4
  %tobool49 = icmp ne i32 %48, 0
  br i1 %tobool49, label %if.then50, label %if.else59

if.then50:                                        ; preds = %if.end48
  %arraydecay51 = getelementptr inbounds [1000 x i8]* %buf, i32 0, i32 0
  %49 = load %struct.httpd_conn** %hc.addr, align 8
  %first_byte_index52 = getelementptr inbounds %struct.httpd_conn* %49, i32 0, i32 55
  %50 = load i64* %first_byte_index52, align 8
  %51 = load %struct.httpd_conn** %hc.addr, align 8
  %last_byte_index53 = getelementptr inbounds %struct.httpd_conn* %51, i32 0, i32 56
  %52 = load i64* %last_byte_index53, align 8
  %53 = load i64* %length.addr, align 8
  %54 = load %struct.httpd_conn** %hc.addr, align 8
  %last_byte_index54 = getelementptr inbounds %struct.httpd_conn* %54, i32 0, i32 56
  %55 = load i64* %last_byte_index54, align 8
  %56 = load %struct.httpd_conn** %hc.addr, align 8
  %first_byte_index55 = getelementptr inbounds %struct.httpd_conn* %56, i32 0, i32 55
  %57 = load i64* %first_byte_index55, align 8
  %sub56 = sub nsw i64 %55, %57
  %add = add nsw i64 %sub56, 1
  %call57 = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %arraydecay51, i64 1000, i8* getelementptr inbounds ([60 x i8]* @.str94238, i32 0, i32 0), i64 %50, i64 %52, i64 %53, i64 %add)
  %58 = load %struct.httpd_conn** %hc.addr, align 8
  %arraydecay58 = getelementptr inbounds [1000 x i8]* %buf, i32 0, i32 0
  call void @add_response(%struct.httpd_conn* %58, i8* %arraydecay58)
  br label %if.end67

if.else59:                                        ; preds = %if.end48
  %59 = load i64* %length.addr, align 8
  %cmp60 = icmp sge i64 %59, 0
  br i1 %cmp60, label %if.then62, label %if.end66

if.then62:                                        ; preds = %if.else59
  %arraydecay63 = getelementptr inbounds [1000 x i8]* %buf, i32 0, i32 0
  %60 = load i64* %length.addr, align 8
  %call64 = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %arraydecay63, i64 1000, i8* getelementptr inbounds ([23 x i8]* @.str95239, i32 0, i32 0), i64 %60)
  %61 = load %struct.httpd_conn** %hc.addr, align 8
  %arraydecay65 = getelementptr inbounds [1000 x i8]* %buf, i32 0, i32 0
  call void @add_response(%struct.httpd_conn* %61, i8* %arraydecay65)
  br label %if.end66

if.end66:                                         ; preds = %if.then62, %if.else59
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.then50
  %62 = load %struct.httpd_conn** %hc.addr, align 8
  %hs68 = getelementptr inbounds %struct.httpd_conn* %62, i32 0, i32 1
  %63 = load %struct.httpd_server** %hs68, align 8
  %p3p = getelementptr inbounds %struct.httpd_server* %63, i32 0, i32 7
  %64 = load i8** %p3p, align 8
  %arrayidx69 = getelementptr inbounds i8* %64, i64 0
  %65 = load i8* %arrayidx69, align 1
  %conv70 = sext i8 %65 to i32
  %cmp71 = icmp ne i32 %conv70, 0
  br i1 %cmp71, label %if.then73, label %if.end79

if.then73:                                        ; preds = %if.end67
  %arraydecay74 = getelementptr inbounds [1000 x i8]* %buf, i32 0, i32 0
  %66 = load %struct.httpd_conn** %hc.addr, align 8
  %hs75 = getelementptr inbounds %struct.httpd_conn* %66, i32 0, i32 1
  %67 = load %struct.httpd_server** %hs75, align 8
  %p3p76 = getelementptr inbounds %struct.httpd_server* %67, i32 0, i32 7
  %68 = load i8** %p3p76, align 8
  %call77 = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %arraydecay74, i64 1000, i8* getelementptr inbounds ([10 x i8]* @.str96240, i32 0, i32 0), i8* %68)
  %69 = load %struct.httpd_conn** %hc.addr, align 8
  %arraydecay78 = getelementptr inbounds [1000 x i8]* %buf, i32 0, i32 0
  call void @add_response(%struct.httpd_conn* %69, i8* %arraydecay78)
  br label %if.end79

if.end79:                                         ; preds = %if.then73, %if.end67
  %70 = load %struct.httpd_conn** %hc.addr, align 8
  %hs80 = getelementptr inbounds %struct.httpd_conn* %70, i32 0, i32 1
  %71 = load %struct.httpd_server** %hs80, align 8
  %max_age = getelementptr inbounds %struct.httpd_server* %71, i32 0, i32 8
  %72 = load i32* %max_age, align 4
  %cmp81 = icmp sge i32 %72, 0
  br i1 %cmp81, label %if.then83, label %if.end97

if.then83:                                        ; preds = %if.end79
  %73 = load i64* %now, align 8
  %74 = load %struct.httpd_conn** %hc.addr, align 8
  %hs84 = getelementptr inbounds %struct.httpd_conn* %74, i32 0, i32 1
  %75 = load %struct.httpd_server** %hs84, align 8
  %max_age85 = getelementptr inbounds %struct.httpd_server* %75, i32 0, i32 8
  %76 = load i32* %max_age85, align 4
  %conv86 = sext i32 %76 to i64
  %add87 = add nsw i64 %73, %conv86
  store i64 %add87, i64* %expires, align 8
  %arraydecay88 = getelementptr inbounds [100 x i8]* %expbuf, i32 0, i32 0
  %77 = load i8** %rfc1123fmt, align 8
  %call89 = call %struct.tm* @gmtime(i64* %expires) #5
  %call90 = call i64 @strftime(i8* %arraydecay88, i64 100, i8* %77, %struct.tm* %call89) #5
  %arraydecay91 = getelementptr inbounds [1000 x i8]* %buf, i32 0, i32 0
  %78 = load %struct.httpd_conn** %hc.addr, align 8
  %hs92 = getelementptr inbounds %struct.httpd_conn* %78, i32 0, i32 1
  %79 = load %struct.httpd_server** %hs92, align 8
  %max_age93 = getelementptr inbounds %struct.httpd_server* %79, i32 0, i32 8
  %80 = load i32* %max_age93, align 4
  %arraydecay94 = getelementptr inbounds [100 x i8]* %expbuf, i32 0, i32 0
  %call95 = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %arraydecay91, i64 1000, i8* getelementptr inbounds ([41 x i8]* @.str97241, i32 0, i32 0), i32 %80, i8* %arraydecay94)
  %81 = load %struct.httpd_conn** %hc.addr, align 8
  %arraydecay96 = getelementptr inbounds [1000 x i8]* %buf, i32 0, i32 0
  call void @add_response(%struct.httpd_conn* %81, i8* %arraydecay96)
  br label %if.end97

if.end97:                                         ; preds = %if.then83, %if.end79
  %82 = load i8** %extraheads.addr, align 8
  %arrayidx98 = getelementptr inbounds i8* %82, i64 0
  %83 = load i8* %arrayidx98, align 1
  %conv99 = sext i8 %83 to i32
  %cmp100 = icmp ne i32 %conv99, 0
  br i1 %cmp100, label %if.then102, label %if.end103

if.then102:                                       ; preds = %if.end97
  %84 = load %struct.httpd_conn** %hc.addr, align 8
  %85 = load i8** %extraheads.addr, align 8
  call void @add_response(%struct.httpd_conn* %84, i8* %85)
  br label %if.end103

if.end103:                                        ; preds = %if.then102, %if.end97
  %86 = load %struct.httpd_conn** %hc.addr, align 8
  call void @add_response(%struct.httpd_conn* %86, i8* getelementptr inbounds ([3 x i8]* @.str98242, i32 0, i32 0))
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @add_response(%struct.httpd_conn* %hc, i8* %str) #0 {
entry:
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %str.addr = alloca i8*, align 8
  %len = alloca i64, align 8
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  store i8* %str, i8** %str.addr, align 8
  %0 = load i8** %str.addr, align 8
  %call = call i64 @strlen(i8* %0) #8
  store i64 %call, i64* %len, align 8
  %1 = load %struct.httpd_conn** %hc.addr, align 8
  %response = getelementptr inbounds %struct.httpd_conn* %1, i32 0, i32 32
  %2 = load %struct.httpd_conn** %hc.addr, align 8
  %maxresponse = getelementptr inbounds %struct.httpd_conn* %2, i32 0, i32 44
  %3 = load %struct.httpd_conn** %hc.addr, align 8
  %responselen = getelementptr inbounds %struct.httpd_conn* %3, i32 0, i32 45
  %4 = load i64* %responselen, align 8
  %5 = load i64* %len, align 8
  %add = add i64 %4, %5
  call void @httpd_realloc_str(i8** %response, i64* %maxresponse, i64 %add)
  %6 = load %struct.httpd_conn** %hc.addr, align 8
  %responselen1 = getelementptr inbounds %struct.httpd_conn* %6, i32 0, i32 45
  %7 = load i64* %responselen1, align 8
  %8 = load %struct.httpd_conn** %hc.addr, align 8
  %response2 = getelementptr inbounds %struct.httpd_conn* %8, i32 0, i32 32
  %9 = load i8** %response2, align 8
  %arrayidx = getelementptr inbounds i8* %9, i64 %7
  %10 = load i8** %str.addr, align 8
  %11 = load i64* %len, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %arrayidx, i8* %10, i64 %11, i32 1, i1 false)
  %12 = load i64* %len, align 8
  %13 = load %struct.httpd_conn** %hc.addr, align 8
  %responselen3 = getelementptr inbounds %struct.httpd_conn* %13, i32 0, i32 45
  %14 = load i64* %responselen3, align 8
  %add4 = add i64 %14, %12
  store i64 %add4, i64* %responselen3, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @send_response_tail(%struct.httpd_conn* %hc) #0 {
entry:
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %buf = alloca [1000 x i8], align 16
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  %arraydecay = getelementptr inbounds [1000 x i8]* %buf, i32 0, i32 0
  %call = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %arraydecay, i64 1000, i8* getelementptr inbounds ([74 x i8]* @.str535, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8]* @.str536, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8]* @.str8140, i32 0, i32 0))
  %0 = load %struct.httpd_conn** %hc.addr, align 8
  %arraydecay1 = getelementptr inbounds [1000 x i8]* %buf, i32 0, i32 0
  call void @add_response(%struct.httpd_conn* %0, i8* %arraydecay1)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @defang(i8* %str, i8* %dfstr, i32 %dfsize) #0 {
entry:
  %str.addr = alloca i8*, align 8
  %dfstr.addr = alloca i8*, align 8
  %dfsize.addr = alloca i32, align 4
  %cp1 = alloca i8*, align 8
  %cp2 = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  store i8* %dfstr, i8** %dfstr.addr, align 8
  store i32 %dfsize, i32* %dfsize.addr, align 4
  %0 = load i8** %str.addr, align 8
  store i8* %0, i8** %cp1, align 8
  %1 = load i8** %dfstr.addr, align 8
  store i8* %1, i8** %cp2, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8** %cp1, align 8
  %3 = load i8* %2, align 1
  %conv = sext i8 %3 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %4 = load i8** %cp2, align 8
  %5 = load i8** %dfstr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %4 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %6 = load i32* %dfsize.addr, align 4
  %sub = sub nsw i32 %6, 5
  %conv2 = sext i32 %sub to i64
  %cmp3 = icmp slt i64 %sub.ptr.sub, %conv2
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load i8** %cp1, align 8
  %9 = load i8* %8, align 1
  %conv5 = sext i8 %9 to i32
  switch i32 %conv5, label %sw.default [
    i32 60, label %sw.bb
    i32 62, label %sw.bb8
  ]

sw.bb:                                            ; preds = %for.body
  %10 = load i8** %cp2, align 8
  %incdec.ptr = getelementptr inbounds i8* %10, i32 1
  store i8* %incdec.ptr, i8** %cp2, align 8
  store i8 38, i8* %10, align 1
  %11 = load i8** %cp2, align 8
  %incdec.ptr6 = getelementptr inbounds i8* %11, i32 1
  store i8* %incdec.ptr6, i8** %cp2, align 8
  store i8 108, i8* %11, align 1
  %12 = load i8** %cp2, align 8
  %incdec.ptr7 = getelementptr inbounds i8* %12, i32 1
  store i8* %incdec.ptr7, i8** %cp2, align 8
  store i8 116, i8* %12, align 1
  %13 = load i8** %cp2, align 8
  store i8 59, i8* %13, align 1
  br label %sw.epilog

sw.bb8:                                           ; preds = %for.body
  %14 = load i8** %cp2, align 8
  %incdec.ptr9 = getelementptr inbounds i8* %14, i32 1
  store i8* %incdec.ptr9, i8** %cp2, align 8
  store i8 38, i8* %14, align 1
  %15 = load i8** %cp2, align 8
  %incdec.ptr10 = getelementptr inbounds i8* %15, i32 1
  store i8* %incdec.ptr10, i8** %cp2, align 8
  store i8 103, i8* %15, align 1
  %16 = load i8** %cp2, align 8
  %incdec.ptr11 = getelementptr inbounds i8* %16, i32 1
  store i8* %incdec.ptr11, i8** %cp2, align 8
  store i8 116, i8* %16, align 1
  %17 = load i8** %cp2, align 8
  store i8 59, i8* %17, align 1
  br label %sw.epilog

sw.default:                                       ; preds = %for.body
  %18 = load i8** %cp1, align 8
  %19 = load i8* %18, align 1
  %20 = load i8** %cp2, align 8
  store i8 %19, i8* %20, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb8, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %21 = load i8** %cp1, align 8
  %incdec.ptr12 = getelementptr inbounds i8* %21, i32 1
  store i8* %incdec.ptr12, i8** %cp1, align 8
  %22 = load i8** %cp2, align 8
  %incdec.ptr13 = getelementptr inbounds i8* %22, i32 1
  store i8* %incdec.ptr13, i8** %cp2, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %23 = load i8** %cp2, align 8
  store i8 0, i8* %23, align 1
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @hexit(i8 signext %c) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i8, align 1
  store i8 %c, i8* %c.addr, align 1
  %0 = load i8* %c.addr, align 1
  %conv = sext i8 %0 to i32
  %cmp = icmp sge i32 %conv, 48
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8* %c.addr, align 1
  %conv2 = sext i8 %1 to i32
  %cmp3 = icmp sle i32 %conv2, 57
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8* %c.addr, align 1
  %conv5 = sext i8 %2 to i32
  %sub = sub nsw i32 %conv5, 48
  store i32 %sub, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i8* %c.addr, align 1
  %conv6 = sext i8 %3 to i32
  %cmp7 = icmp sge i32 %conv6, 97
  br i1 %cmp7, label %land.lhs.true9, label %if.end16

land.lhs.true9:                                   ; preds = %if.end
  %4 = load i8* %c.addr, align 1
  %conv10 = sext i8 %4 to i32
  %cmp11 = icmp sle i32 %conv10, 102
  br i1 %cmp11, label %if.then13, label %if.end16

if.then13:                                        ; preds = %land.lhs.true9
  %5 = load i8* %c.addr, align 1
  %conv14 = sext i8 %5 to i32
  %sub15 = sub nsw i32 %conv14, 97
  %add = add nsw i32 %sub15, 10
  store i32 %add, i32* %retval
  br label %return

if.end16:                                         ; preds = %land.lhs.true9, %if.end
  %6 = load i8* %c.addr, align 1
  %conv17 = sext i8 %6 to i32
  %cmp18 = icmp sge i32 %conv17, 65
  br i1 %cmp18, label %land.lhs.true20, label %if.end28

land.lhs.true20:                                  ; preds = %if.end16
  %7 = load i8* %c.addr, align 1
  %conv21 = sext i8 %7 to i32
  %cmp22 = icmp sle i32 %conv21, 70
  br i1 %cmp22, label %if.then24, label %if.end28

if.then24:                                        ; preds = %land.lhs.true20
  %8 = load i8* %c.addr, align 1
  %conv25 = sext i8 %8 to i32
  %sub26 = sub nsw i32 %conv25, 65
  %add27 = add nsw i32 %sub26, 10
  store i32 %add27, i32* %retval
  br label %return

if.end28:                                         ; preds = %land.lhs.true20, %if.end16
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end28, %if.then24, %if.then13, %if.then
  %9 = load i32* %retval
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define internal void @send_dirredirect(%struct.httpd_conn* %hc) #0 {
entry:
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %cp = alloca i8*, align 8
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  %0 = load %struct.httpd_conn** %hc.addr, align 8
  %query = getelementptr inbounds %struct.httpd_conn* %0, i32 0, i32 19
  %1 = load i8** %query, align 8
  %arrayidx = getelementptr inbounds i8* %1, i64 0
  %2 = load i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl = getelementptr inbounds %struct.httpd_conn* %3, i32 0, i32 12
  %4 = load i8** %encodedurl, align 8
  %call = call i8* @strchr(i8* %4, i32 63) #8
  store i8* %call, i8** %cp, align 8
  %5 = load i8** %cp, align 8
  %cmp2 = icmp ne i8* %5, null
  br i1 %cmp2, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.then
  %6 = load i8** %cp, align 8
  store i8 0, i8* %6, align 1
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %7 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl5 = getelementptr inbounds %struct.httpd_conn* %7, i32 0, i32 12
  %8 = load i8** %encodedurl5, align 8
  %call6 = call i64 @strlen(i8* %8) #8
  %add = add i64 %call6, 2
  %9 = load %struct.httpd_conn** %hc.addr, align 8
  %query7 = getelementptr inbounds %struct.httpd_conn* %9, i32 0, i32 19
  %10 = load i8** %query7, align 8
  %call8 = call i64 @strlen(i8* %10) #8
  %add9 = add i64 %add, %call8
  call void @httpd_realloc_str(i8** @send_dirredirect.location, i64* @send_dirredirect.maxlocation, i64 %add9)
  %11 = load i8** @send_dirredirect.location, align 8
  %12 = load i64* @send_dirredirect.maxlocation, align 8
  %13 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl10 = getelementptr inbounds %struct.httpd_conn* %13, i32 0, i32 12
  %14 = load i8** %encodedurl10, align 8
  %15 = load %struct.httpd_conn** %hc.addr, align 8
  %query11 = getelementptr inbounds %struct.httpd_conn* %15, i32 0, i32 19
  %16 = load i8** %query11, align 8
  %call12 = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %11, i64 %12, i8* getelementptr inbounds ([7 x i8]* @.str516, i32 0, i32 0), i8* %14, i8* %16)
  br label %if.end18

if.else:                                          ; preds = %entry
  %17 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl13 = getelementptr inbounds %struct.httpd_conn* %17, i32 0, i32 12
  %18 = load i8** %encodedurl13, align 8
  %call14 = call i64 @strlen(i8* %18) #8
  %add15 = add i64 %call14, 1
  call void @httpd_realloc_str(i8** @send_dirredirect.location, i64* @send_dirredirect.maxlocation, i64 %add15)
  %19 = load i8** @send_dirredirect.location, align 8
  %20 = load i64* @send_dirredirect.maxlocation, align 8
  %21 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl16 = getelementptr inbounds %struct.httpd_conn* %21, i32 0, i32 12
  %22 = load i8** %encodedurl16, align 8
  %call17 = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %19, i64 %20, i8* getelementptr inbounds ([4 x i8]* @.str517, i32 0, i32 0), i8* %22)
  br label %if.end18

if.end18:                                         ; preds = %if.else, %if.end
  %23 = load i8** @send_dirredirect.location, align 8
  %call19 = call i64 @strlen(i8* %23) #8
  %add20 = add i64 11, %call19
  call void @httpd_realloc_str(i8** @send_dirredirect.header, i64* @send_dirredirect.maxheader, i64 %add20)
  %24 = load i8** @send_dirredirect.header, align 8
  %25 = load i64* @send_dirredirect.maxheader, align 8
  %26 = load i8** @send_dirredirect.location, align 8
  %call21 = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %24, i64 %25, i8* getelementptr inbounds ([7 x i8]* @.str518, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @send_dirredirect.headstr, i32 0, i32 0), i8* %26)
  %27 = load %struct.httpd_conn** %hc.addr, align 8
  %28 = load i8** @err302title, align 8
  %29 = load i8** @send_dirredirect.header, align 8
  %30 = load i8** @err302form, align 8
  %31 = load i8** @send_dirredirect.location, align 8
  call void @send_response(%struct.httpd_conn* %27, i32 302, i8* %28, i8* %29, i8* %30, i8* %31)
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @auth_check(%struct.httpd_conn* %hc, i8* %dirname) #0 {
entry:
  %retval = alloca i32, align 4
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %dirname.addr = alloca i8*, align 8
  %topdir = alloca i8*, align 8
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  store i8* %dirname, i8** %dirname.addr, align 8
  %0 = load %struct.httpd_conn** %hc.addr, align 8
  %hs = getelementptr inbounds %struct.httpd_conn* %0, i32 0, i32 1
  %1 = load %struct.httpd_server** %hs, align 8
  %global_passwd = getelementptr inbounds %struct.httpd_server* %1, i32 0, i32 16
  %2 = load i32* %global_passwd, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end7

if.then:                                          ; preds = %entry
  %3 = load %struct.httpd_conn** %hc.addr, align 8
  %hs1 = getelementptr inbounds %struct.httpd_conn* %3, i32 0, i32 1
  %4 = load %struct.httpd_server** %hs1, align 8
  %vhost = getelementptr inbounds %struct.httpd_server* %4, i32 0, i32 15
  %5 = load i32* %vhost, align 4
  %tobool2 = icmp ne i32 %5, 0
  br i1 %tobool2, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then
  %6 = load %struct.httpd_conn** %hc.addr, align 8
  %hostdir = getelementptr inbounds %struct.httpd_conn* %6, i32 0, i32 29
  %7 = load i8** %hostdir, align 8
  %arrayidx = getelementptr inbounds i8* %7, i64 0
  %8 = load i8* %arrayidx, align 1
  %conv = sext i8 %8 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %if.then4, label %if.else

if.then4:                                         ; preds = %land.lhs.true
  %9 = load %struct.httpd_conn** %hc.addr, align 8
  %hostdir5 = getelementptr inbounds %struct.httpd_conn* %9, i32 0, i32 29
  %10 = load i8** %hostdir5, align 8
  store i8* %10, i8** %topdir, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %if.then
  store i8* getelementptr inbounds ([2 x i8]* @.str31175, i32 0, i32 0), i8** %topdir, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  %11 = load %struct.httpd_conn** %hc.addr, align 8
  %12 = load i8** %topdir, align 8
  %call = call i32 @auth_check2(%struct.httpd_conn* %11, i8* %12)
  switch i32 %call, label %sw.epilog [
    i32 -1, label %sw.bb
    i32 1, label %sw.bb6
  ]

sw.bb:                                            ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

sw.bb6:                                           ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %if.end
  br label %if.end7

if.end7:                                          ; preds = %sw.epilog, %entry
  %13 = load %struct.httpd_conn** %hc.addr, align 8
  %14 = load i8** %dirname.addr, align 8
  %call8 = call i32 @auth_check2(%struct.httpd_conn* %13, i8* %14)
  store i32 %call8, i32* %retval
  br label %return

return:                                           ; preds = %if.end7, %sw.bb6, %sw.bb
  %15 = load i32* %retval
  ret i32 %15
}

; Function Attrs: nounwind uwtable
define internal i32 @check_referrer(%struct.httpd_conn* %hc) #0 {
entry:
  %retval = alloca i32, align 4
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %r = alloca i32, align 4
  %cp = alloca i8*, align 8
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  %0 = load %struct.httpd_conn** %hc.addr, align 8
  %hs = getelementptr inbounds %struct.httpd_conn* %0, i32 0, i32 1
  %1 = load %struct.httpd_server** %hs, align 8
  %url_pattern = getelementptr inbounds %struct.httpd_server* %1, i32 0, i32 17
  %2 = load i8** %url_pattern, align 8
  %cmp = icmp eq i8* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.httpd_conn** %hc.addr, align 8
  %call = call i32 @really_check_referrer(%struct.httpd_conn* %3)
  store i32 %call, i32* %r, align 4
  %4 = load i32* %r, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.end14, label %if.then1

if.then1:                                         ; preds = %if.end
  %5 = load %struct.httpd_conn** %hc.addr, align 8
  %hs2 = getelementptr inbounds %struct.httpd_conn* %5, i32 0, i32 1
  %6 = load %struct.httpd_server** %hs2, align 8
  %vhost = getelementptr inbounds %struct.httpd_server* %6, i32 0, i32 15
  %7 = load i32* %vhost, align 4
  %tobool3 = icmp ne i32 %7, 0
  br i1 %tobool3, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then1
  %8 = load %struct.httpd_conn** %hc.addr, align 8
  %hostname = getelementptr inbounds %struct.httpd_conn* %8, i32 0, i32 50
  %9 = load i8** %hostname, align 8
  %cmp4 = icmp ne i8* %9, null
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %land.lhs.true
  %10 = load %struct.httpd_conn** %hc.addr, align 8
  %hostname6 = getelementptr inbounds %struct.httpd_conn* %10, i32 0, i32 50
  %11 = load i8** %hostname6, align 8
  store i8* %11, i8** %cp, align 8
  br label %if.end8

if.else:                                          ; preds = %land.lhs.true, %if.then1
  %12 = load %struct.httpd_conn** %hc.addr, align 8
  %hs7 = getelementptr inbounds %struct.httpd_conn* %12, i32 0, i32 1
  %13 = load %struct.httpd_server** %hs7, align 8
  %server_hostname = getelementptr inbounds %struct.httpd_server* %13, i32 0, i32 1
  %14 = load i8** %server_hostname, align 8
  store i8* %14, i8** %cp, align 8
  br label %if.end8

if.end8:                                          ; preds = %if.else, %if.then5
  %15 = load i8** %cp, align 8
  %cmp9 = icmp eq i8* %15, null
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.end8
  store i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8** %cp, align 8
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %if.end8
  %16 = load %struct.httpd_conn** %hc.addr, align 8
  %client_addr = getelementptr inbounds %struct.httpd_conn* %16, i32 0, i32 2
  %call12 = call i8* @httpd_ntoa(%union.httpd_sockaddr* %client_addr)
  %17 = load i8** %cp, align 8
  %18 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl = getelementptr inbounds %struct.httpd_conn* %18, i32 0, i32 12
  %19 = load i8** %encodedurl, align 8
  %20 = load %struct.httpd_conn** %hc.addr, align 8
  %referrer = getelementptr inbounds %struct.httpd_conn* %20, i32 0, i32 20
  %21 = load i8** %referrer, align 8
  call void (i32, i8*, ...)* @syslog(i32 6, i8* getelementptr inbounds ([46 x i8]* @.str504, i32 0, i32 0), i8* %call12, i8* %17, i8* %19, i8* %21)
  %22 = load %struct.httpd_conn** %hc.addr, align 8
  %23 = load i8** @err403title, align 8
  %24 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl13 = getelementptr inbounds %struct.httpd_conn* %24, i32 0, i32 12
  %25 = load i8** %encodedurl13, align 8
  call void @httpd_send_err(%struct.httpd_conn* %22, i32 403, i8* %23, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* getelementptr inbounds ([71 x i8]* @.str505, i32 0, i32 0), i8* %25)
  br label %if.end14

if.end14:                                         ; preds = %if.end11, %if.end
  %26 = load i32* %r, align 4
  store i32 %26, i32* %retval
  br label %return

return:                                           ; preds = %if.end14, %if.then
  %27 = load i32* %retval
  ret i32 %27
}

; Function Attrs: nounwind uwtable
define internal i32 @ls(%struct.httpd_conn* %hc) #0 {
entry:
  %retval = alloca i32, align 4
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %dirp = alloca %struct.__dirstream*, align 8
  %de = alloca %struct.dirent*, align 8
  %namlen = alloca i32, align 4
  %nnames = alloca i32, align 4
  %fp = alloca %struct._IO_FILE*, align 8
  %i = alloca i32, align 4
  %r = alloca i32, align 4
  %sb = alloca %struct.stat, align 8
  %lsb = alloca %struct.stat, align 8
  %modestr = alloca [20 x i8], align 16
  %linkprefix = alloca i8*, align 8
  %lnk = alloca [4097 x i8], align 16
  %linklen = alloca i32, align 4
  %fileclass = alloca i8*, align 8
  %now = alloca i64, align 8
  %timestr = alloca i8*, align 8
  %client_data = alloca %union.ClientData, align 8
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  %0 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename = getelementptr inbounds %struct.httpd_conn* %0, i32 0, i32 16
  %1 = load i8** %expnfilename, align 8
  %call = call %struct.__dirstream* @opendir(i8* %1)
  store %struct.__dirstream* %call, %struct.__dirstream** %dirp, align 8
  %2 = load %struct.__dirstream** %dirp, align 8
  %cmp = icmp eq %struct.__dirstream* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename1 = getelementptr inbounds %struct.httpd_conn* %3, i32 0, i32 16
  %4 = load i8** %expnfilename1, align 8
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([19 x i8]* @.str488, i32 0, i32 0), i8* %4)
  %5 = load %struct.httpd_conn** %hc.addr, align 8
  %6 = load i8** @err404title, align 8
  %7 = load i8** @err404form, align 8
  %8 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl = getelementptr inbounds %struct.httpd_conn* %8, i32 0, i32 12
  %9 = load i8** %encodedurl, align 8
  call void @httpd_send_err(%struct.httpd_conn* %5, i32 404, i8* %6, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %7, i8* %9)
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %10 = load %struct.httpd_conn** %hc.addr, align 8
  %method = getelementptr inbounds %struct.httpd_conn* %10, i32 0, i32 8
  %11 = load i32* %method, align 4
  %cmp2 = icmp eq i32 %11, 2
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %12 = load %struct.__dirstream** %dirp, align 8
  %call4 = call i32 @closedir(%struct.__dirstream* %12)
  %13 = load %struct.httpd_conn** %hc.addr, align 8
  %14 = load i8** @ok200title, align 8
  %15 = load %struct.httpd_conn** %hc.addr, align 8
  %sb5 = getelementptr inbounds %struct.httpd_conn* %15, i32 0, i32 59
  %st_mtim = getelementptr inbounds %struct.stat* %sb5, i32 0, i32 12
  %tv_sec = getelementptr inbounds %struct.timespec* %st_mtim, i32 0, i32 0
  %16 = load i64* %tv_sec, align 8
  call void @send_mime(%struct.httpd_conn* %13, i32 200, i8* %14, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8]* @.str183, i32 0, i32 0), i64 -1, i64 %16)
  br label %if.end280

if.else:                                          ; preds = %if.end
  %17 = load %struct.httpd_conn** %hc.addr, align 8
  %method6 = getelementptr inbounds %struct.httpd_conn* %17, i32 0, i32 8
  %18 = load i32* %method6, align 4
  %cmp7 = icmp eq i32 %18, 1
  br i1 %cmp7, label %if.then8, label %if.else275

if.then8:                                         ; preds = %if.else
  %19 = load %struct.httpd_conn** %hc.addr, align 8
  %hs = getelementptr inbounds %struct.httpd_conn* %19, i32 0, i32 1
  %20 = load %struct.httpd_server** %hs, align 8
  %cgi_limit = getelementptr inbounds %struct.httpd_server* %20, i32 0, i32 4
  %21 = load i32* %cgi_limit, align 4
  %cmp9 = icmp ne i32 %21, 0
  br i1 %cmp9, label %land.lhs.true, label %if.end17

land.lhs.true:                                    ; preds = %if.then8
  %22 = load %struct.httpd_conn** %hc.addr, align 8
  %hs10 = getelementptr inbounds %struct.httpd_conn* %22, i32 0, i32 1
  %23 = load %struct.httpd_server** %hs10, align 8
  %cgi_count = getelementptr inbounds %struct.httpd_server* %23, i32 0, i32 5
  %24 = load i32* %cgi_count, align 4
  %25 = load %struct.httpd_conn** %hc.addr, align 8
  %hs11 = getelementptr inbounds %struct.httpd_conn* %25, i32 0, i32 1
  %26 = load %struct.httpd_server** %hs11, align 8
  %cgi_limit12 = getelementptr inbounds %struct.httpd_server* %26, i32 0, i32 4
  %27 = load i32* %cgi_limit12, align 4
  %cmp13 = icmp sge i32 %24, %27
  br i1 %cmp13, label %if.then14, label %if.end17

if.then14:                                        ; preds = %land.lhs.true
  %28 = load %struct.__dirstream** %dirp, align 8
  %call15 = call i32 @closedir(%struct.__dirstream* %28)
  %29 = load %struct.httpd_conn** %hc.addr, align 8
  %30 = load i8** @httpd_err503title, align 8
  %31 = load i8** @httpd_err503form, align 8
  %32 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl16 = getelementptr inbounds %struct.httpd_conn* %32, i32 0, i32 12
  %33 = load i8** %encodedurl16, align 8
  call void @httpd_send_err(%struct.httpd_conn* %29, i32 503, i8* %30, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %31, i8* %33)
  store i32 -1, i32* %retval
  br label %return

if.end17:                                         ; preds = %land.lhs.true, %if.then8
  %34 = load %struct.httpd_conn** %hc.addr, align 8
  %hs18 = getelementptr inbounds %struct.httpd_conn* %34, i32 0, i32 1
  %35 = load %struct.httpd_server** %hs18, align 8
  %cgi_count19 = getelementptr inbounds %struct.httpd_server* %35, i32 0, i32 5
  %36 = load i32* %cgi_count19, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %cgi_count19, align 4
  %call20 = call i32 @fork() #5
  store i32 %call20, i32* %r, align 4
  %37 = load i32* %r, align 4
  %cmp21 = icmp slt i32 %37, 0
  br i1 %cmp21, label %if.then22, label %if.end25

if.then22:                                        ; preds = %if.end17
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([10 x i8]* @.str436, i32 0, i32 0))
  %38 = load %struct.__dirstream** %dirp, align 8
  %call23 = call i32 @closedir(%struct.__dirstream* %38)
  %39 = load %struct.httpd_conn** %hc.addr, align 8
  %40 = load i8** @err500title, align 8
  %41 = load i8** @err500form, align 8
  %42 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl24 = getelementptr inbounds %struct.httpd_conn* %42, i32 0, i32 12
  %43 = load i8** %encodedurl24, align 8
  call void @httpd_send_err(%struct.httpd_conn* %39, i32 500, i8* %40, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %41, i8* %43)
  store i32 -1, i32* %retval
  br label %return

if.end25:                                         ; preds = %if.end17
  %44 = load i32* %r, align 4
  %cmp26 = icmp eq i32 %44, 0
  br i1 %cmp26, label %if.then27, label %if.end266

if.then27:                                        ; preds = %if.end25
  store i32 1, i32* @sub_process, align 4
  %45 = load %struct.httpd_conn** %hc.addr, align 8
  %hs28 = getelementptr inbounds %struct.httpd_conn* %45, i32 0, i32 1
  %46 = load %struct.httpd_server** %hs28, align 8
  call void @httpd_unlisten(%struct.httpd_server* %46)
  %47 = load %struct.httpd_conn** %hc.addr, align 8
  %48 = load i8** @ok200title, align 8
  %49 = load %struct.httpd_conn** %hc.addr, align 8
  %sb29 = getelementptr inbounds %struct.httpd_conn* %49, i32 0, i32 59
  %st_mtim30 = getelementptr inbounds %struct.stat* %sb29, i32 0, i32 12
  %tv_sec31 = getelementptr inbounds %struct.timespec* %st_mtim30, i32 0, i32 0
  %50 = load i64* %tv_sec31, align 8
  call void @send_mime(%struct.httpd_conn* %47, i32 200, i8* %48, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8]* @.str183, i32 0, i32 0), i64 -1, i64 %50)
  %51 = load %struct.httpd_conn** %hc.addr, align 8
  call void @httpd_write_response(%struct.httpd_conn* %51)
  %call32 = call i32 @nice(i32 10) #5
  %52 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd = getelementptr inbounds %struct.httpd_conn* %52, i32 0, i32 60
  %53 = load i32* %conn_fd, align 4
  %call33 = call %struct._IO_FILE* @fdopen(i32 %53, i8* getelementptr inbounds ([2 x i8]* @.str489, i32 0, i32 0)) #5
  store %struct._IO_FILE* %call33, %struct._IO_FILE** %fp, align 8
  %54 = load %struct._IO_FILE** %fp, align 8
  %cmp34 = icmp eq %struct._IO_FILE* %54, null
  br i1 %cmp34, label %if.then35, label %if.end38

if.then35:                                        ; preds = %if.then27
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([12 x i8]* @.str490, i32 0, i32 0))
  %55 = load %struct.httpd_conn** %hc.addr, align 8
  %56 = load i8** @err500title, align 8
  %57 = load i8** @err500form, align 8
  %58 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl36 = getelementptr inbounds %struct.httpd_conn* %58, i32 0, i32 12
  %59 = load i8** %encodedurl36, align 8
  call void @httpd_send_err(%struct.httpd_conn* %55, i32 500, i8* %56, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %57, i8* %59)
  %60 = load %struct.httpd_conn** %hc.addr, align 8
  call void @httpd_write_response(%struct.httpd_conn* %60)
  %61 = load %struct.__dirstream** %dirp, align 8
  %call37 = call i32 @closedir(%struct.__dirstream* %61)
  call void @exit(i32 1) #9
  unreachable

if.end38:                                         ; preds = %if.then27
  %62 = load %struct._IO_FILE** %fp, align 8
  %63 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl39 = getelementptr inbounds %struct.httpd_conn* %63, i32 0, i32 12
  %64 = load i8** %encodedurl39, align 8
  %65 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl40 = getelementptr inbounds %struct.httpd_conn* %65, i32 0, i32 12
  %66 = load i8** %encodedurl40, align 8
  %call41 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %62, i8* getelementptr inbounds ([400 x i8]* @.str491, i32 0, i32 0), i8* %64, i8* %66)
  store i32 0, i32* %nnames, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end75, %if.end38
  %67 = load %struct.__dirstream** %dirp, align 8
  %call42 = call %struct.dirent* @readdir(%struct.__dirstream* %67)
  store %struct.dirent* %call42, %struct.dirent** %de, align 8
  %cmp43 = icmp ne %struct.dirent* %call42, null
  br i1 %cmp43, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %68 = load i32* %nnames, align 4
  %69 = load i32* @ls.maxnames, align 4
  %cmp44 = icmp sge i32 %68, %69
  br i1 %cmp44, label %if.then45, label %if.end75

if.then45:                                        ; preds = %while.body
  %70 = load i32* @ls.maxnames, align 4
  %cmp46 = icmp eq i32 %70, 0
  br i1 %cmp46, label %if.then47, label %if.else53

if.then47:                                        ; preds = %if.then45
  store i32 100, i32* @ls.maxnames, align 4
  %71 = load i32* @ls.maxnames, align 4
  %mul = mul nsw i32 %71, 4097
  %conv = sext i32 %mul to i64
  %mul48 = mul i64 1, %conv
  %call49 = call noalias i8* @malloc(i64 %mul48) #5
  store i8* %call49, i8** @ls.names, align 8
  %72 = load i32* @ls.maxnames, align 4
  %conv50 = sext i32 %72 to i64
  %mul51 = mul i64 8, %conv50
  %call52 = call noalias i8* @malloc(i64 %mul51) #5
  %73 = bitcast i8* %call52 to i8**
  store i8** %73, i8*** @ls.nameptrs, align 8
  br label %if.end62

if.else53:                                        ; preds = %if.then45
  %74 = load i32* @ls.maxnames, align 4
  %mul54 = mul nsw i32 %74, 2
  store i32 %mul54, i32* @ls.maxnames, align 4
  %75 = load i8** @ls.names, align 8
  %76 = load i32* @ls.maxnames, align 4
  %mul55 = mul nsw i32 %76, 4097
  %conv56 = sext i32 %mul55 to i64
  %mul57 = mul i64 1, %conv56
  %call58 = call i8* @realloc(i8* %75, i64 %mul57) #5
  store i8* %call58, i8** @ls.names, align 8
  %77 = load i8*** @ls.nameptrs, align 8
  %78 = bitcast i8** %77 to i8*
  %79 = load i32* @ls.maxnames, align 4
  %conv59 = sext i32 %79 to i64
  %mul60 = mul i64 8, %conv59
  %call61 = call i8* @realloc(i8* %78, i64 %mul60) #5
  %80 = bitcast i8* %call61 to i8**
  store i8** %80, i8*** @ls.nameptrs, align 8
  br label %if.end62

if.end62:                                         ; preds = %if.else53, %if.then47
  %81 = load i8** @ls.names, align 8
  %cmp63 = icmp eq i8* %81, null
  br i1 %cmp63, label %if.then67, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end62
  %82 = load i8*** @ls.nameptrs, align 8
  %cmp65 = icmp eq i8** %82, null
  br i1 %cmp65, label %if.then67, label %if.end68

if.then67:                                        ; preds = %lor.lhs.false, %if.end62
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([43 x i8]* @.str492, i32 0, i32 0))
  call void @exit(i32 1) #9
  unreachable

if.end68:                                         ; preds = %lor.lhs.false
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end68
  %83 = load i32* %i, align 4
  %84 = load i32* @ls.maxnames, align 4
  %cmp69 = icmp slt i32 %83, %84
  br i1 %cmp69, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %85 = load i32* %i, align 4
  %mul71 = mul nsw i32 %85, 4097
  %idxprom = sext i32 %mul71 to i64
  %86 = load i8** @ls.names, align 8
  %arrayidx = getelementptr inbounds i8* %86, i64 %idxprom
  %87 = load i32* %i, align 4
  %idxprom72 = sext i32 %87 to i64
  %88 = load i8*** @ls.nameptrs, align 8
  %arrayidx73 = getelementptr inbounds i8** %88, i64 %idxprom72
  store i8* %arrayidx, i8** %arrayidx73, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %89 = load i32* %i, align 4
  %inc74 = add nsw i32 %89, 1
  store i32 %inc74, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end75

if.end75:                                         ; preds = %for.end, %while.body
  %90 = load %struct.dirent** %de, align 8
  %d_name = getelementptr inbounds %struct.dirent* %90, i32 0, i32 4
  %arraydecay = getelementptr inbounds [256 x i8]* %d_name, i32 0, i32 0
  %call76 = call i64 @strlen(i8* %arraydecay) #8
  %conv77 = trunc i64 %call76 to i32
  store i32 %conv77, i32* %namlen, align 4
  %91 = load i32* %nnames, align 4
  %idxprom78 = sext i32 %91 to i64
  %92 = load i8*** @ls.nameptrs, align 8
  %arrayidx79 = getelementptr inbounds i8** %92, i64 %idxprom78
  %93 = load i8** %arrayidx79, align 8
  %94 = load %struct.dirent** %de, align 8
  %d_name80 = getelementptr inbounds %struct.dirent* %94, i32 0, i32 4
  %arraydecay81 = getelementptr inbounds [256 x i8]* %d_name80, i32 0, i32 0
  %95 = load i32* %namlen, align 4
  %conv82 = sext i32 %95 to i64
  %call83 = call i8* @strncpy(i8* %93, i8* %arraydecay81, i64 %conv82) #5
  %96 = load i32* %namlen, align 4
  %idxprom84 = sext i32 %96 to i64
  %97 = load i32* %nnames, align 4
  %idxprom85 = sext i32 %97 to i64
  %98 = load i8*** @ls.nameptrs, align 8
  %arrayidx86 = getelementptr inbounds i8** %98, i64 %idxprom85
  %99 = load i8** %arrayidx86, align 8
  %arrayidx87 = getelementptr inbounds i8* %99, i64 %idxprom84
  store i8 0, i8* %arrayidx87, align 1
  %100 = load i32* %nnames, align 4
  %inc88 = add nsw i32 %100, 1
  store i32 %inc88, i32* %nnames, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %101 = load %struct.__dirstream** %dirp, align 8
  %call89 = call i32 @closedir(%struct.__dirstream* %101)
  %102 = load i8*** @ls.nameptrs, align 8
  %103 = bitcast i8** %102 to i8*
  %104 = load i32* %nnames, align 4
  %conv90 = sext i32 %104 to i64
  call void @qsort(i8* %103, i64 %conv90, i64 8, i32 (i8*, i8*)* @name_compare)
  store i32 0, i32* %i, align 4
  br label %for.cond91

for.cond91:                                       ; preds = %for.inc261, %while.end
  %105 = load i32* %i, align 4
  %106 = load i32* %nnames, align 4
  %cmp92 = icmp slt i32 %105, %106
  br i1 %cmp92, label %for.body94, label %for.end263

for.body94:                                       ; preds = %for.cond91
  %107 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename95 = getelementptr inbounds %struct.httpd_conn* %107, i32 0, i32 16
  %108 = load i8** %expnfilename95, align 8
  %call96 = call i64 @strlen(i8* %108) #8
  %add = add i64 %call96, 1
  %109 = load i32* %i, align 4
  %idxprom97 = sext i32 %109 to i64
  %110 = load i8*** @ls.nameptrs, align 8
  %arrayidx98 = getelementptr inbounds i8** %110, i64 %idxprom97
  %111 = load i8** %arrayidx98, align 8
  %call99 = call i64 @strlen(i8* %111) #8
  %add100 = add i64 %add, %call99
  call void @httpd_realloc_str(i8** @ls.name, i64* @ls.maxname, i64 %add100)
  %112 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename = getelementptr inbounds %struct.httpd_conn* %112, i32 0, i32 15
  %113 = load i8** %origfilename, align 8
  %call101 = call i64 @strlen(i8* %113) #8
  %add102 = add i64 %call101, 1
  %114 = load i32* %i, align 4
  %idxprom103 = sext i32 %114 to i64
  %115 = load i8*** @ls.nameptrs, align 8
  %arrayidx104 = getelementptr inbounds i8** %115, i64 %idxprom103
  %116 = load i8** %arrayidx104, align 8
  %call105 = call i64 @strlen(i8* %116) #8
  %add106 = add i64 %add102, %call105
  call void @httpd_realloc_str(i8** @ls.rname, i64* @ls.maxrname, i64 %add106)
  %117 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename107 = getelementptr inbounds %struct.httpd_conn* %117, i32 0, i32 16
  %118 = load i8** %expnfilename107, align 8
  %arrayidx108 = getelementptr inbounds i8* %118, i64 0
  %119 = load i8* %arrayidx108, align 1
  %conv109 = sext i8 %119 to i32
  %cmp110 = icmp eq i32 %conv109, 0
  br i1 %cmp110, label %if.then117, label %lor.lhs.false112

lor.lhs.false112:                                 ; preds = %for.body94
  %120 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename113 = getelementptr inbounds %struct.httpd_conn* %120, i32 0, i32 16
  %121 = load i8** %expnfilename113, align 8
  %call114 = call i32 @strcmp(i8* %121, i8* getelementptr inbounds ([2 x i8]* @.str31175, i32 0, i32 0)) #8
  %cmp115 = icmp eq i32 %call114, 0
  br i1 %cmp115, label %if.then117, label %if.else124

if.then117:                                       ; preds = %lor.lhs.false112, %for.body94
  %122 = load i8** @ls.name, align 8
  %123 = load i32* %i, align 4
  %idxprom118 = sext i32 %123 to i64
  %124 = load i8*** @ls.nameptrs, align 8
  %arrayidx119 = getelementptr inbounds i8** %124, i64 %idxprom118
  %125 = load i8** %arrayidx119, align 8
  %call120 = call i8* @strcpy(i8* %122, i8* %125) #5
  %126 = load i8** @ls.rname, align 8
  %127 = load i32* %i, align 4
  %idxprom121 = sext i32 %127 to i64
  %128 = load i8*** @ls.nameptrs, align 8
  %arrayidx122 = getelementptr inbounds i8** %128, i64 %idxprom121
  %129 = load i8** %arrayidx122, align 8
  %call123 = call i8* @strcpy(i8* %126, i8* %129) #5
  br label %if.end143

if.else124:                                       ; preds = %lor.lhs.false112
  %130 = load i8** @ls.name, align 8
  %131 = load i64* @ls.maxname, align 8
  %132 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename125 = getelementptr inbounds %struct.httpd_conn* %132, i32 0, i32 16
  %133 = load i8** %expnfilename125, align 8
  %134 = load i32* %i, align 4
  %idxprom126 = sext i32 %134 to i64
  %135 = load i8*** @ls.nameptrs, align 8
  %arrayidx127 = getelementptr inbounds i8** %135, i64 %idxprom126
  %136 = load i8** %arrayidx127, align 8
  %call128 = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %130, i64 %131, i8* getelementptr inbounds ([6 x i8]* @.str493, i32 0, i32 0), i8* %133, i8* %136)
  %137 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename129 = getelementptr inbounds %struct.httpd_conn* %137, i32 0, i32 15
  %138 = load i8** %origfilename129, align 8
  %call130 = call i32 @strcmp(i8* %138, i8* getelementptr inbounds ([2 x i8]* @.str31175, i32 0, i32 0)) #8
  %cmp131 = icmp eq i32 %call130, 0
  br i1 %cmp131, label %if.then133, label %if.else137

if.then133:                                       ; preds = %if.else124
  %139 = load i8** @ls.rname, align 8
  %140 = load i64* @ls.maxrname, align 8
  %141 = load i32* %i, align 4
  %idxprom134 = sext i32 %141 to i64
  %142 = load i8*** @ls.nameptrs, align 8
  %arrayidx135 = getelementptr inbounds i8** %142, i64 %idxprom134
  %143 = load i8** %arrayidx135, align 8
  %call136 = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %139, i64 %140, i8* getelementptr inbounds ([3 x i8]* @.str494, i32 0, i32 0), i8* %143)
  br label %if.end142

if.else137:                                       ; preds = %if.else124
  %144 = load i8** @ls.rname, align 8
  %145 = load i64* @ls.maxrname, align 8
  %146 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename138 = getelementptr inbounds %struct.httpd_conn* %146, i32 0, i32 15
  %147 = load i8** %origfilename138, align 8
  %148 = load i32* %i, align 4
  %idxprom139 = sext i32 %148 to i64
  %149 = load i8*** @ls.nameptrs, align 8
  %arrayidx140 = getelementptr inbounds i8** %149, i64 %idxprom139
  %150 = load i8** %arrayidx140, align 8
  %call141 = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %144, i64 %145, i8* getelementptr inbounds ([5 x i8]* @.str465, i32 0, i32 0), i8* %147, i8* %150)
  br label %if.end142

if.end142:                                        ; preds = %if.else137, %if.then133
  br label %if.end143

if.end143:                                        ; preds = %if.end142, %if.then117
  %151 = load i8** @ls.rname, align 8
  %call144 = call i64 @strlen(i8* %151) #8
  %mul145 = mul i64 3, %call144
  %add146 = add i64 %mul145, 1
  call void @httpd_realloc_str(i8** @ls.encrname, i64* @ls.maxencrname, i64 %add146)
  %152 = load i8** @ls.encrname, align 8
  %153 = load i64* @ls.maxencrname, align 8
  %conv147 = trunc i64 %153 to i32
  %154 = load i8** @ls.rname, align 8
  call void @strencode(i8* %152, i32 %conv147, i8* %154)
  %155 = load i8** @ls.name, align 8
  %call148 = call i32 @stat(i8* %155, %struct.stat* %sb) #5
  %cmp149 = icmp slt i32 %call148, 0
  br i1 %cmp149, label %if.then155, label %lor.lhs.false151

lor.lhs.false151:                                 ; preds = %if.end143
  %156 = load i8** @ls.name, align 8
  %call152 = call i32 @lstat(i8* %156, %struct.stat* %lsb) #5
  %cmp153 = icmp slt i32 %call152, 0
  br i1 %cmp153, label %if.then155, label %if.end156

if.then155:                                       ; preds = %lor.lhs.false151, %if.end143
  br label %for.inc261

if.end156:                                        ; preds = %lor.lhs.false151
  store i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8** %linkprefix, align 8
  %arrayidx157 = getelementptr inbounds [4097 x i8]* %lnk, i32 0, i64 0
  store i8 0, i8* %arrayidx157, align 1
  %st_mode = getelementptr inbounds %struct.stat* %lsb, i32 0, i32 3
  %157 = load i32* %st_mode, align 4
  %and = and i32 %157, 61440
  switch i32 %and, label %sw.default [
    i32 4096, label %sw.bb
    i32 8192, label %sw.bb159
    i32 16384, label %sw.bb161
    i32 24576, label %sw.bb163
    i32 32768, label %sw.bb165
    i32 49152, label %sw.bb167
    i32 40960, label %sw.bb169
  ]

sw.bb:                                            ; preds = %if.end156
  %arrayidx158 = getelementptr inbounds [20 x i8]* %modestr, i32 0, i64 0
  store i8 112, i8* %arrayidx158, align 1
  br label %sw.epilog

sw.bb159:                                         ; preds = %if.end156
  %arrayidx160 = getelementptr inbounds [20 x i8]* %modestr, i32 0, i64 0
  store i8 99, i8* %arrayidx160, align 1
  br label %sw.epilog

sw.bb161:                                         ; preds = %if.end156
  %arrayidx162 = getelementptr inbounds [20 x i8]* %modestr, i32 0, i64 0
  store i8 100, i8* %arrayidx162, align 1
  br label %sw.epilog

sw.bb163:                                         ; preds = %if.end156
  %arrayidx164 = getelementptr inbounds [20 x i8]* %modestr, i32 0, i64 0
  store i8 98, i8* %arrayidx164, align 1
  br label %sw.epilog

sw.bb165:                                         ; preds = %if.end156
  %arrayidx166 = getelementptr inbounds [20 x i8]* %modestr, i32 0, i64 0
  store i8 45, i8* %arrayidx166, align 1
  br label %sw.epilog

sw.bb167:                                         ; preds = %if.end156
  %arrayidx168 = getelementptr inbounds [20 x i8]* %modestr, i32 0, i64 0
  store i8 115, i8* %arrayidx168, align 1
  br label %sw.epilog

sw.bb169:                                         ; preds = %if.end156
  %arrayidx170 = getelementptr inbounds [20 x i8]* %modestr, i32 0, i64 0
  store i8 108, i8* %arrayidx170, align 1
  %158 = load i8** @ls.name, align 8
  %arraydecay171 = getelementptr inbounds [4097 x i8]* %lnk, i32 0, i32 0
  %call172 = call i64 @readlink(i8* %158, i8* %arraydecay171, i64 4096) #5
  %conv173 = trunc i64 %call172 to i32
  store i32 %conv173, i32* %linklen, align 4
  %159 = load i32* %linklen, align 4
  %cmp174 = icmp ne i32 %159, -1
  br i1 %cmp174, label %if.then176, label %if.end179

if.then176:                                       ; preds = %sw.bb169
  %160 = load i32* %linklen, align 4
  %idxprom177 = sext i32 %160 to i64
  %arrayidx178 = getelementptr inbounds [4097 x i8]* %lnk, i32 0, i64 %idxprom177
  store i8 0, i8* %arrayidx178, align 1
  store i8* getelementptr inbounds ([8 x i8]* @.str495, i32 0, i32 0), i8** %linkprefix, align 8
  br label %if.end179

if.end179:                                        ; preds = %if.then176, %sw.bb169
  br label %sw.epilog

sw.default:                                       ; preds = %if.end156
  %arrayidx180 = getelementptr inbounds [20 x i8]* %modestr, i32 0, i64 0
  store i8 63, i8* %arrayidx180, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end179, %sw.bb167, %sw.bb165, %sw.bb163, %sw.bb161, %sw.bb159, %sw.bb
  %st_mode181 = getelementptr inbounds %struct.stat* %lsb, i32 0, i32 3
  %161 = load i32* %st_mode181, align 4
  %and182 = and i32 %161, 4
  %tobool = icmp ne i32 %and182, 0
  %cond = select i1 %tobool, i32 114, i32 45
  %conv183 = trunc i32 %cond to i8
  %arrayidx184 = getelementptr inbounds [20 x i8]* %modestr, i32 0, i64 1
  store i8 %conv183, i8* %arrayidx184, align 1
  %st_mode185 = getelementptr inbounds %struct.stat* %lsb, i32 0, i32 3
  %162 = load i32* %st_mode185, align 4
  %and186 = and i32 %162, 2
  %tobool187 = icmp ne i32 %and186, 0
  %cond188 = select i1 %tobool187, i32 119, i32 45
  %conv189 = trunc i32 %cond188 to i8
  %arrayidx190 = getelementptr inbounds [20 x i8]* %modestr, i32 0, i64 2
  store i8 %conv189, i8* %arrayidx190, align 1
  %st_mode191 = getelementptr inbounds %struct.stat* %lsb, i32 0, i32 3
  %163 = load i32* %st_mode191, align 4
  %and192 = and i32 %163, 1
  %tobool193 = icmp ne i32 %and192, 0
  %cond194 = select i1 %tobool193, i32 120, i32 45
  %conv195 = trunc i32 %cond194 to i8
  %arrayidx196 = getelementptr inbounds [20 x i8]* %modestr, i32 0, i64 3
  store i8 %conv195, i8* %arrayidx196, align 1
  %arrayidx197 = getelementptr inbounds [20 x i8]* %modestr, i32 0, i64 4
  store i8 0, i8* %arrayidx197, align 1
  %call198 = call i64 @time(i64* null) #5
  store i64 %call198, i64* %now, align 8
  %st_mtim199 = getelementptr inbounds %struct.stat* %lsb, i32 0, i32 12
  %tv_sec200 = getelementptr inbounds %struct.timespec* %st_mtim199, i32 0, i32 0
  %call201 = call i8* @ctime(i64* %tv_sec200) #5
  store i8* %call201, i8** %timestr, align 8
  %164 = load i8** %timestr, align 8
  %arrayidx202 = getelementptr inbounds i8* %164, i64 4
  %165 = load i8* %arrayidx202, align 1
  %166 = load i8** %timestr, align 8
  %arrayidx203 = getelementptr inbounds i8* %166, i64 0
  store i8 %165, i8* %arrayidx203, align 1
  %167 = load i8** %timestr, align 8
  %arrayidx204 = getelementptr inbounds i8* %167, i64 5
  %168 = load i8* %arrayidx204, align 1
  %169 = load i8** %timestr, align 8
  %arrayidx205 = getelementptr inbounds i8* %169, i64 1
  store i8 %168, i8* %arrayidx205, align 1
  %170 = load i8** %timestr, align 8
  %arrayidx206 = getelementptr inbounds i8* %170, i64 6
  %171 = load i8* %arrayidx206, align 1
  %172 = load i8** %timestr, align 8
  %arrayidx207 = getelementptr inbounds i8* %172, i64 2
  store i8 %171, i8* %arrayidx207, align 1
  %173 = load i8** %timestr, align 8
  %arrayidx208 = getelementptr inbounds i8* %173, i64 3
  store i8 32, i8* %arrayidx208, align 1
  %174 = load i8** %timestr, align 8
  %arrayidx209 = getelementptr inbounds i8* %174, i64 8
  %175 = load i8* %arrayidx209, align 1
  %176 = load i8** %timestr, align 8
  %arrayidx210 = getelementptr inbounds i8* %176, i64 4
  store i8 %175, i8* %arrayidx210, align 1
  %177 = load i8** %timestr, align 8
  %arrayidx211 = getelementptr inbounds i8* %177, i64 9
  %178 = load i8* %arrayidx211, align 1
  %179 = load i8** %timestr, align 8
  %arrayidx212 = getelementptr inbounds i8* %179, i64 5
  store i8 %178, i8* %arrayidx212, align 1
  %180 = load i8** %timestr, align 8
  %arrayidx213 = getelementptr inbounds i8* %180, i64 6
  store i8 32, i8* %arrayidx213, align 1
  %181 = load i64* %now, align 8
  %st_mtim214 = getelementptr inbounds %struct.stat* %lsb, i32 0, i32 12
  %tv_sec215 = getelementptr inbounds %struct.timespec* %st_mtim214, i32 0, i32 0
  %182 = load i64* %tv_sec215, align 8
  %sub = sub nsw i64 %181, %182
  %cmp216 = icmp sgt i64 %sub, 15724800
  br i1 %cmp216, label %if.then218, label %if.else228

if.then218:                                       ; preds = %sw.epilog
  %183 = load i8** %timestr, align 8
  %arrayidx219 = getelementptr inbounds i8* %183, i64 7
  store i8 32, i8* %arrayidx219, align 1
  %184 = load i8** %timestr, align 8
  %arrayidx220 = getelementptr inbounds i8* %184, i64 20
  %185 = load i8* %arrayidx220, align 1
  %186 = load i8** %timestr, align 8
  %arrayidx221 = getelementptr inbounds i8* %186, i64 8
  store i8 %185, i8* %arrayidx221, align 1
  %187 = load i8** %timestr, align 8
  %arrayidx222 = getelementptr inbounds i8* %187, i64 21
  %188 = load i8* %arrayidx222, align 1
  %189 = load i8** %timestr, align 8
  %arrayidx223 = getelementptr inbounds i8* %189, i64 9
  store i8 %188, i8* %arrayidx223, align 1
  %190 = load i8** %timestr, align 8
  %arrayidx224 = getelementptr inbounds i8* %190, i64 22
  %191 = load i8* %arrayidx224, align 1
  %192 = load i8** %timestr, align 8
  %arrayidx225 = getelementptr inbounds i8* %192, i64 10
  store i8 %191, i8* %arrayidx225, align 1
  %193 = load i8** %timestr, align 8
  %arrayidx226 = getelementptr inbounds i8* %193, i64 23
  %194 = load i8* %arrayidx226, align 1
  %195 = load i8** %timestr, align 8
  %arrayidx227 = getelementptr inbounds i8* %195, i64 11
  store i8 %194, i8* %arrayidx227, align 1
  br label %if.end238

if.else228:                                       ; preds = %sw.epilog
  %196 = load i8** %timestr, align 8
  %arrayidx229 = getelementptr inbounds i8* %196, i64 11
  %197 = load i8* %arrayidx229, align 1
  %198 = load i8** %timestr, align 8
  %arrayidx230 = getelementptr inbounds i8* %198, i64 7
  store i8 %197, i8* %arrayidx230, align 1
  %199 = load i8** %timestr, align 8
  %arrayidx231 = getelementptr inbounds i8* %199, i64 12
  %200 = load i8* %arrayidx231, align 1
  %201 = load i8** %timestr, align 8
  %arrayidx232 = getelementptr inbounds i8* %201, i64 8
  store i8 %200, i8* %arrayidx232, align 1
  %202 = load i8** %timestr, align 8
  %arrayidx233 = getelementptr inbounds i8* %202, i64 9
  store i8 58, i8* %arrayidx233, align 1
  %203 = load i8** %timestr, align 8
  %arrayidx234 = getelementptr inbounds i8* %203, i64 14
  %204 = load i8* %arrayidx234, align 1
  %205 = load i8** %timestr, align 8
  %arrayidx235 = getelementptr inbounds i8* %205, i64 10
  store i8 %204, i8* %arrayidx235, align 1
  %206 = load i8** %timestr, align 8
  %arrayidx236 = getelementptr inbounds i8* %206, i64 15
  %207 = load i8* %arrayidx236, align 1
  %208 = load i8** %timestr, align 8
  %arrayidx237 = getelementptr inbounds i8* %208, i64 11
  store i8 %207, i8* %arrayidx237, align 1
  br label %if.end238

if.end238:                                        ; preds = %if.else228, %if.then218
  %209 = load i8** %timestr, align 8
  %arrayidx239 = getelementptr inbounds i8* %209, i64 12
  store i8 0, i8* %arrayidx239, align 1
  %st_mode240 = getelementptr inbounds %struct.stat* %sb, i32 0, i32 3
  %210 = load i32* %st_mode240, align 4
  %and241 = and i32 %210, 61440
  switch i32 %and241, label %sw.default245 [
    i32 16384, label %sw.bb242
    i32 49152, label %sw.bb243
    i32 40960, label %sw.bb244
  ]

sw.bb242:                                         ; preds = %if.end238
  store i8* getelementptr inbounds ([2 x i8]* @.str75219, i32 0, i32 0), i8** %fileclass, align 8
  br label %sw.epilog250

sw.bb243:                                         ; preds = %if.end238
  store i8* getelementptr inbounds ([2 x i8]* @.str47191, i32 0, i32 0), i8** %fileclass, align 8
  br label %sw.epilog250

sw.bb244:                                         ; preds = %if.end238
  store i8* getelementptr inbounds ([2 x i8]* @.str496, i32 0, i32 0), i8** %fileclass, align 8
  br label %sw.epilog250

sw.default245:                                    ; preds = %if.end238
  %st_mode246 = getelementptr inbounds %struct.stat* %sb, i32 0, i32 3
  %211 = load i32* %st_mode246, align 4
  %and247 = and i32 %211, 1
  %tobool248 = icmp ne i32 %and247, 0
  %cond249 = select i1 %tobool248, i8* getelementptr inbounds ([2 x i8]* @.str497, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0)
  store i8* %cond249, i8** %fileclass, align 8
  br label %sw.epilog250

sw.epilog250:                                     ; preds = %sw.default245, %sw.bb244, %sw.bb243, %sw.bb242
  %212 = load %struct._IO_FILE** %fp, align 8
  %arraydecay251 = getelementptr inbounds [20 x i8]* %modestr, i32 0, i32 0
  %st_nlink = getelementptr inbounds %struct.stat* %lsb, i32 0, i32 2
  %213 = load i64* %st_nlink, align 8
  %st_size = getelementptr inbounds %struct.stat* %lsb, i32 0, i32 8
  %214 = load i64* %st_size, align 8
  %215 = load i8** %timestr, align 8
  %216 = load i8** @ls.encrname, align 8
  %st_mode252 = getelementptr inbounds %struct.stat* %sb, i32 0, i32 3
  %217 = load i32* %st_mode252, align 4
  %and253 = and i32 %217, 61440
  %cmp254 = icmp eq i32 %and253, 16384
  %cond256 = select i1 %cmp254, i8* getelementptr inbounds ([2 x i8]* @.str75219, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0)
  %218 = load i32* %i, align 4
  %idxprom257 = sext i32 %218 to i64
  %219 = load i8*** @ls.nameptrs, align 8
  %arrayidx258 = getelementptr inbounds i8** %219, i64 %idxprom257
  %220 = load i8** %arrayidx258, align 8
  %221 = load i8** %linkprefix, align 8
  %arraydecay259 = getelementptr inbounds [4097 x i8]* %lnk, i32 0, i32 0
  %222 = load i8** %fileclass, align 8
  %call260 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %212, i8* getelementptr inbounds ([58 x i8]* @.str498, i32 0, i32 0), i8* %arraydecay251, i64 %213, i64 %214, i8* %215, i8* %216, i8* %cond256, i8* %220, i8* %221, i8* %arraydecay259, i8* %222)
  br label %for.inc261

for.inc261:                                       ; preds = %sw.epilog250, %if.then155
  %223 = load i32* %i, align 4
  %inc262 = add nsw i32 %223, 1
  store i32 %inc262, i32* %i, align 4
  br label %for.cond91

for.end263:                                       ; preds = %for.cond91
  %224 = load %struct._IO_FILE** %fp, align 8
  %call264 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %224, i8* getelementptr inbounds ([30 x i8]* @.str499, i32 0, i32 0))
  %225 = load %struct._IO_FILE** %fp, align 8
  %call265 = call i32 @fclose(%struct._IO_FILE* %225)
  call void @exit(i32 0) #9
  unreachable

if.end266:                                        ; preds = %if.end25
  %226 = load %struct.__dirstream** %dirp, align 8
  %call267 = call i32 @closedir(%struct.__dirstream* %226)
  %227 = load i32* %r, align 4
  %228 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename268 = getelementptr inbounds %struct.httpd_conn* %228, i32 0, i32 16
  %229 = load i8** %expnfilename268, align 8
  call void (i32, i8*, ...)* @syslog(i32 7, i8* getelementptr inbounds ([51 x i8]* @.str500, i32 0, i32 0), i32 %227, i8* %229)
  %230 = load i32* %r, align 4
  %i269 = bitcast %union.ClientData* %client_data to i32*
  store i32 %230, i32* %i269, align 4
  %coerce.dive = getelementptr %union.ClientData* %client_data, i32 0, i32 0
  %231 = load i8** %coerce.dive
  %call270 = call %struct.TimerStruct* @tmr_create(%struct.timeval* null, void (i8*, %struct.timeval*)* @cgi_kill, i8* %231, i64 30000, i32 0)
  %cmp271 = icmp eq %struct.TimerStruct* %call270, null
  br i1 %cmp271, label %if.then273, label %if.end274

if.then273:                                       ; preds = %if.end266
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([31 x i8]* @.str501, i32 0, i32 0))
  call void @exit(i32 1) #9
  unreachable

if.end274:                                        ; preds = %if.end266
  %232 = load %struct.httpd_conn** %hc.addr, align 8
  %status = getelementptr inbounds %struct.httpd_conn* %232, i32 0, i32 9
  store i32 200, i32* %status, align 4
  %233 = load %struct.httpd_conn** %hc.addr, align 8
  %bytes_sent = getelementptr inbounds %struct.httpd_conn* %233, i32 0, i32 11
  store i64 25000, i64* %bytes_sent, align 8
  %234 = load %struct.httpd_conn** %hc.addr, align 8
  %should_linger = getelementptr inbounds %struct.httpd_conn* %234, i32 0, i32 58
  store i32 0, i32* %should_linger, align 4
  br label %if.end279

if.else275:                                       ; preds = %if.else
  %235 = load %struct.__dirstream** %dirp, align 8
  %call276 = call i32 @closedir(%struct.__dirstream* %235)
  %236 = load %struct.httpd_conn** %hc.addr, align 8
  %237 = load i8** @err501title, align 8
  %238 = load i8** @err501form, align 8
  %239 = load %struct.httpd_conn** %hc.addr, align 8
  %method277 = getelementptr inbounds %struct.httpd_conn* %239, i32 0, i32 8
  %240 = load i32* %method277, align 4
  %call278 = call i8* @httpd_method_str(i32 %240)
  call void @httpd_send_err(%struct.httpd_conn* %236, i32 501, i8* %237, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %238, i8* %call278)
  store i32 -1, i32* %retval
  br label %return

if.end279:                                        ; preds = %if.end274
  br label %if.end280

if.end280:                                        ; preds = %if.end279, %if.then3
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end280, %if.else275, %if.then22, %if.then14, %if.then
  %241 = load i32* %retval
  ret i32 %241
}

; Function Attrs: nounwind uwtable
define internal i32 @cgi(%struct.httpd_conn* %hc) #0 {
entry:
  %retval = alloca i32, align 4
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %r = alloca i32, align 4
  %client_data = alloca %union.ClientData, align 8
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  %0 = load %struct.httpd_conn** %hc.addr, align 8
  %method = getelementptr inbounds %struct.httpd_conn* %0, i32 0, i32 8
  %1 = load i32* %method, align 4
  %cmp = icmp eq i32 %1, 1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.httpd_conn** %hc.addr, align 8
  %method1 = getelementptr inbounds %struct.httpd_conn* %2, i32 0, i32 8
  %3 = load i32* %method1, align 4
  %cmp2 = icmp eq i32 %3, 3
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct.httpd_conn** %hc.addr, align 8
  %hs = getelementptr inbounds %struct.httpd_conn* %4, i32 0, i32 1
  %5 = load %struct.httpd_server** %hs, align 8
  %cgi_limit = getelementptr inbounds %struct.httpd_server* %5, i32 0, i32 4
  %6 = load i32* %cgi_limit, align 4
  %cmp3 = icmp ne i32 %6, 0
  br i1 %cmp3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %7 = load %struct.httpd_conn** %hc.addr, align 8
  %hs4 = getelementptr inbounds %struct.httpd_conn* %7, i32 0, i32 1
  %8 = load %struct.httpd_server** %hs4, align 8
  %cgi_count = getelementptr inbounds %struct.httpd_server* %8, i32 0, i32 5
  %9 = load i32* %cgi_count, align 4
  %10 = load %struct.httpd_conn** %hc.addr, align 8
  %hs5 = getelementptr inbounds %struct.httpd_conn* %10, i32 0, i32 1
  %11 = load %struct.httpd_server** %hs5, align 8
  %cgi_limit6 = getelementptr inbounds %struct.httpd_server* %11, i32 0, i32 4
  %12 = load i32* %cgi_limit6, align 4
  %cmp7 = icmp sge i32 %9, %12
  br i1 %cmp7, label %if.then8, label %if.end

if.then8:                                         ; preds = %land.lhs.true
  %13 = load %struct.httpd_conn** %hc.addr, align 8
  %14 = load i8** @httpd_err503title, align 8
  %15 = load i8** @httpd_err503form, align 8
  %16 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl = getelementptr inbounds %struct.httpd_conn* %16, i32 0, i32 12
  %17 = load i8** %encodedurl, align 8
  call void @httpd_send_err(%struct.httpd_conn* %13, i32 503, i8* %14, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %15, i8* %17)
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %if.then
  %18 = load %struct.httpd_conn** %hc.addr, align 8
  %hs9 = getelementptr inbounds %struct.httpd_conn* %18, i32 0, i32 1
  %19 = load %struct.httpd_server** %hs9, align 8
  %cgi_count10 = getelementptr inbounds %struct.httpd_server* %19, i32 0, i32 5
  %20 = load i32* %cgi_count10, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %cgi_count10, align 4
  %21 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd = getelementptr inbounds %struct.httpd_conn* %21, i32 0, i32 60
  %22 = load i32* %conn_fd, align 4
  call void @httpd_clear_ndelay(i32 %22)
  %call = call i32 @fork() #5
  store i32 %call, i32* %r, align 4
  %23 = load i32* %r, align 4
  %cmp11 = icmp slt i32 %23, 0
  br i1 %cmp11, label %if.then12, label %if.end14

if.then12:                                        ; preds = %if.end
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([10 x i8]* @.str436, i32 0, i32 0))
  %24 = load %struct.httpd_conn** %hc.addr, align 8
  %25 = load i8** @err500title, align 8
  %26 = load i8** @err500form, align 8
  %27 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl13 = getelementptr inbounds %struct.httpd_conn* %27, i32 0, i32 12
  %28 = load i8** %encodedurl13, align 8
  call void @httpd_send_err(%struct.httpd_conn* %24, i32 500, i8* %25, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %26, i8* %28)
  store i32 -1, i32* %retval
  br label %return

if.end14:                                         ; preds = %if.end
  %29 = load i32* %r, align 4
  %cmp15 = icmp eq i32 %29, 0
  br i1 %cmp15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.end14
  store i32 1, i32* @sub_process, align 4
  %30 = load %struct.httpd_conn** %hc.addr, align 8
  %hs17 = getelementptr inbounds %struct.httpd_conn* %30, i32 0, i32 1
  %31 = load %struct.httpd_server** %hs17, align 8
  call void @httpd_unlisten(%struct.httpd_server* %31)
  %32 = load %struct.httpd_conn** %hc.addr, align 8
  call void @cgi_child(%struct.httpd_conn* %32)
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %if.end14
  %33 = load i32* %r, align 4
  %34 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename = getelementptr inbounds %struct.httpd_conn* %34, i32 0, i32 16
  %35 = load i8** %expnfilename, align 8
  call void (i32, i8*, ...)* @syslog(i32 7, i8* getelementptr inbounds ([41 x i8]* @.str437, i32 0, i32 0), i32 %33, i8* %35)
  %36 = load i32* %r, align 4
  %i = bitcast %union.ClientData* %client_data to i32*
  store i32 %36, i32* %i, align 4
  %coerce.dive = getelementptr %union.ClientData* %client_data, i32 0, i32 0
  %37 = load i8** %coerce.dive
  %call19 = call %struct.TimerStruct* @tmr_create(%struct.timeval* null, void (i8*, %struct.timeval*)* @cgi_kill, i8* %37, i64 30000, i32 0)
  %cmp20 = icmp eq %struct.TimerStruct* %call19, null
  br i1 %cmp20, label %if.then21, label %if.end22

if.then21:                                        ; preds = %if.end18
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([34 x i8]* @.str438, i32 0, i32 0))
  call void @exit(i32 1) #9
  unreachable

if.end22:                                         ; preds = %if.end18
  %38 = load %struct.httpd_conn** %hc.addr, align 8
  %status = getelementptr inbounds %struct.httpd_conn* %38, i32 0, i32 9
  store i32 200, i32* %status, align 4
  %39 = load %struct.httpd_conn** %hc.addr, align 8
  %bytes_sent = getelementptr inbounds %struct.httpd_conn* %39, i32 0, i32 11
  store i64 25000, i64* %bytes_sent, align 8
  %40 = load %struct.httpd_conn** %hc.addr, align 8
  %should_linger = getelementptr inbounds %struct.httpd_conn* %40, i32 0, i32 58
  store i32 0, i32* %should_linger, align 4
  br label %if.end25

if.else:                                          ; preds = %lor.lhs.false
  %41 = load %struct.httpd_conn** %hc.addr, align 8
  %42 = load i8** @err501title, align 8
  %43 = load i8** @err501form, align 8
  %44 = load %struct.httpd_conn** %hc.addr, align 8
  %method23 = getelementptr inbounds %struct.httpd_conn* %44, i32 0, i32 8
  %45 = load i32* %method23, align 4
  %call24 = call i8* @httpd_method_str(i32 %45)
  call void @httpd_send_err(%struct.httpd_conn* %41, i32 501, i8* %42, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %43, i8* %call24)
  store i32 -1, i32* %retval
  br label %return

if.end25:                                         ; preds = %if.end22
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end25, %if.else, %if.then12, %if.then8
  %46 = load i32* %retval
  ret i32 %46
}

; Function Attrs: nounwind uwtable
define internal void @figure_mime(%struct.httpd_conn* %hc) #0 {
entry:
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %prev_dot = alloca i8*, align 8
  %dot = alloca i8*, align 8
  %ext = alloca i8*, align 8
  %me_indexes = alloca [100 x i32], align 16
  %n_me_indexes = alloca i32, align 4
  %ext_len = alloca i64, align 8
  %encodings_len = alloca i64, align 8
  %i = alloca i32, align 4
  %top = alloca i32, align 4
  %bot = alloca i32, align 4
  %mid = alloca i32, align 4
  %r = alloca i32, align 4
  %default_type = alloca i8*, align 8
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  store i8* getelementptr inbounds ([23 x i8]* @.str100244, i32 0, i32 0), i8** %default_type, align 8
  store i32 0, i32* %n_me_indexes, align 4
  %0 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename = getelementptr inbounds %struct.httpd_conn* %0, i32 0, i32 16
  %1 = load i8** %expnfilename, align 8
  %call = call i64 @strlen(i8* %1) #8
  %2 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename1 = getelementptr inbounds %struct.httpd_conn* %2, i32 0, i32 16
  %3 = load i8** %expnfilename1, align 8
  %arrayidx = getelementptr inbounds i8* %3, i64 %call
  store i8* %arrayidx, i8** %prev_dot, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc36, %entry
  %4 = load i8** %prev_dot, align 8
  %add.ptr = getelementptr inbounds i8* %4, i64 -1
  store i8* %add.ptr, i8** %dot, align 8
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.cond
  %5 = load i8** %dot, align 8
  %6 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename3 = getelementptr inbounds %struct.httpd_conn* %6, i32 0, i32 16
  %7 = load i8** %expnfilename3, align 8
  %cmp = icmp uge i8* %5, %7
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond2
  %8 = load i8** %dot, align 8
  %9 = load i8* %8, align 1
  %conv = sext i8 %9 to i32
  %cmp4 = icmp ne i32 %conv, 46
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond2
  %10 = phi i1 [ false, %for.cond2 ], [ %cmp4, %land.rhs ]
  br i1 %10, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i8** %dot, align 8
  %incdec.ptr = getelementptr inbounds i8* %11, i32 -1
  store i8* %incdec.ptr, i8** %dot, align 8
  br label %for.cond2

for.end:                                          ; preds = %land.end
  %12 = load i8** %dot, align 8
  %13 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename6 = getelementptr inbounds %struct.httpd_conn* %13, i32 0, i32 16
  %14 = load i8** %expnfilename6, align 8
  %cmp7 = icmp ult i8* %12, %14
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %15 = load i8** %default_type, align 8
  %16 = load %struct.httpd_conn** %hc.addr, align 8
  %type = getelementptr inbounds %struct.httpd_conn* %16, i32 0, i32 49
  store i8* %15, i8** %type, align 8
  br label %done

if.end:                                           ; preds = %for.end
  %17 = load i8** %dot, align 8
  %add.ptr9 = getelementptr inbounds i8* %17, i64 1
  store i8* %add.ptr9, i8** %ext, align 8
  %18 = load i8** %prev_dot, align 8
  %19 = load i8** %ext, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %18 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %19 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %ext_len, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc33, %if.end
  %20 = load i32* %i, align 4
  %cmp11 = icmp slt i32 %20, 3
  br i1 %cmp11, label %for.body13, label %for.end35

for.body13:                                       ; preds = %for.cond10
  %21 = load i64* %ext_len, align 8
  %22 = load i32* %i, align 4
  %idxprom = sext i32 %22 to i64
  %arrayidx14 = getelementptr inbounds [3 x %struct.mime_entry]* @enc_tab, i32 0, i64 %idxprom
  %ext_len15 = getelementptr inbounds %struct.mime_entry* %arrayidx14, i32 0, i32 1
  %23 = load i64* %ext_len15, align 8
  %cmp16 = icmp eq i64 %21, %23
  br i1 %cmp16, label %land.lhs.true, label %if.end32

land.lhs.true:                                    ; preds = %for.body13
  %24 = load i8** %ext, align 8
  %25 = load i32* %i, align 4
  %idxprom18 = sext i32 %25 to i64
  %arrayidx19 = getelementptr inbounds [3 x %struct.mime_entry]* @enc_tab, i32 0, i64 %idxprom18
  %ext20 = getelementptr inbounds %struct.mime_entry* %arrayidx19, i32 0, i32 0
  %26 = load i8** %ext20, align 8
  %27 = load i64* %ext_len, align 8
  %call21 = call i32 @strncasecmp(i8* %24, i8* %26, i64 %27) #8
  %cmp22 = icmp eq i32 %call21, 0
  br i1 %cmp22, label %if.then24, label %if.end32

if.then24:                                        ; preds = %land.lhs.true
  %28 = load i32* %n_me_indexes, align 4
  %conv25 = sext i32 %28 to i64
  %cmp26 = icmp ult i64 %conv25, 100
  br i1 %cmp26, label %if.then28, label %if.end31

if.then28:                                        ; preds = %if.then24
  %29 = load i32* %i, align 4
  %30 = load i32* %n_me_indexes, align 4
  %idxprom29 = sext i32 %30 to i64
  %arrayidx30 = getelementptr inbounds [100 x i32]* %me_indexes, i32 0, i64 %idxprom29
  store i32 %29, i32* %arrayidx30, align 4
  %31 = load i32* %n_me_indexes, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %n_me_indexes, align 4
  br label %if.end31

if.end31:                                         ; preds = %if.then28, %if.then24
  br label %next

if.end32:                                         ; preds = %land.lhs.true, %for.body13
  br label %for.inc33

for.inc33:                                        ; preds = %if.end32
  %32 = load i32* %i, align 4
  %inc34 = add nsw i32 %32, 1
  store i32 %inc34, i32* %i, align 4
  br label %for.cond10

for.end35:                                        ; preds = %for.cond10
  br label %for.end37

next:                                             ; preds = %if.end31
  br label %for.inc36

for.inc36:                                        ; preds = %next
  %33 = load i8** %dot, align 8
  store i8* %33, i8** %prev_dot, align 8
  br label %for.cond

for.end37:                                        ; preds = %for.end35
  store i32 192, i32* %top, align 4
  store i32 0, i32* %bot, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end74, %for.end37
  %34 = load i32* %top, align 4
  %35 = load i32* %bot, align 4
  %cmp38 = icmp sge i32 %34, %35
  br i1 %cmp38, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %36 = load i32* %top, align 4
  %37 = load i32* %bot, align 4
  %add = add nsw i32 %36, %37
  %div = sdiv i32 %add, 2
  store i32 %div, i32* %mid, align 4
  %38 = load i8** %ext, align 8
  %39 = load i32* %mid, align 4
  %idxprom40 = sext i32 %39 to i64
  %arrayidx41 = getelementptr inbounds [193 x %struct.mime_entry]* @typ_tab, i32 0, i64 %idxprom40
  %ext42 = getelementptr inbounds %struct.mime_entry* %arrayidx41, i32 0, i32 0
  %40 = load i8** %ext42, align 8
  %41 = load i64* %ext_len, align 8
  %call43 = call i32 @strncasecmp(i8* %38, i8* %40, i64 %41) #8
  store i32 %call43, i32* %r, align 4
  %42 = load i32* %r, align 4
  %cmp44 = icmp slt i32 %42, 0
  br i1 %cmp44, label %if.then46, label %if.else

if.then46:                                        ; preds = %while.body
  %43 = load i32* %mid, align 4
  %sub = sub nsw i32 %43, 1
  store i32 %sub, i32* %top, align 4
  br label %if.end74

if.else:                                          ; preds = %while.body
  %44 = load i32* %r, align 4
  %cmp47 = icmp sgt i32 %44, 0
  br i1 %cmp47, label %if.then49, label %if.else51

if.then49:                                        ; preds = %if.else
  %45 = load i32* %mid, align 4
  %add50 = add nsw i32 %45, 1
  store i32 %add50, i32* %bot, align 4
  br label %if.end73

if.else51:                                        ; preds = %if.else
  %46 = load i64* %ext_len, align 8
  %47 = load i32* %mid, align 4
  %idxprom52 = sext i32 %47 to i64
  %arrayidx53 = getelementptr inbounds [193 x %struct.mime_entry]* @typ_tab, i32 0, i64 %idxprom52
  %ext_len54 = getelementptr inbounds %struct.mime_entry* %arrayidx53, i32 0, i32 1
  %48 = load i64* %ext_len54, align 8
  %cmp55 = icmp ult i64 %46, %48
  br i1 %cmp55, label %if.then57, label %if.else59

if.then57:                                        ; preds = %if.else51
  %49 = load i32* %mid, align 4
  %sub58 = sub nsw i32 %49, 1
  store i32 %sub58, i32* %top, align 4
  br label %if.end72

if.else59:                                        ; preds = %if.else51
  %50 = load i64* %ext_len, align 8
  %51 = load i32* %mid, align 4
  %idxprom60 = sext i32 %51 to i64
  %arrayidx61 = getelementptr inbounds [193 x %struct.mime_entry]* @typ_tab, i32 0, i64 %idxprom60
  %ext_len62 = getelementptr inbounds %struct.mime_entry* %arrayidx61, i32 0, i32 1
  %52 = load i64* %ext_len62, align 8
  %cmp63 = icmp ugt i64 %50, %52
  br i1 %cmp63, label %if.then65, label %if.else67

if.then65:                                        ; preds = %if.else59
  %53 = load i32* %mid, align 4
  %add66 = add nsw i32 %53, 1
  store i32 %add66, i32* %bot, align 4
  br label %if.end71

if.else67:                                        ; preds = %if.else59
  %54 = load i32* %mid, align 4
  %idxprom68 = sext i32 %54 to i64
  %arrayidx69 = getelementptr inbounds [193 x %struct.mime_entry]* @typ_tab, i32 0, i64 %idxprom68
  %val = getelementptr inbounds %struct.mime_entry* %arrayidx69, i32 0, i32 2
  %55 = load i8** %val, align 8
  %56 = load %struct.httpd_conn** %hc.addr, align 8
  %type70 = getelementptr inbounds %struct.httpd_conn* %56, i32 0, i32 49
  store i8* %55, i8** %type70, align 8
  br label %done

if.end71:                                         ; preds = %if.then65
  br label %if.end72

if.end72:                                         ; preds = %if.end71, %if.then57
  br label %if.end73

if.end73:                                         ; preds = %if.end72, %if.then49
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %if.then46
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %57 = load i8** %default_type, align 8
  %58 = load %struct.httpd_conn** %hc.addr, align 8
  %type75 = getelementptr inbounds %struct.httpd_conn* %58, i32 0, i32 49
  store i8* %57, i8** %type75, align 8
  br label %done

done:                                             ; preds = %while.end, %if.else67, %if.then
  %59 = load %struct.httpd_conn** %hc.addr, align 8
  %encodings = getelementptr inbounds %struct.httpd_conn* %59, i32 0, i32 17
  %60 = load i8** %encodings, align 8
  %arrayidx76 = getelementptr inbounds i8* %60, i64 0
  store i8 0, i8* %arrayidx76, align 1
  store i64 0, i64* %encodings_len, align 8
  %61 = load i32* %n_me_indexes, align 4
  %sub77 = sub nsw i32 %61, 1
  store i32 %sub77, i32* %i, align 4
  br label %for.cond78

for.cond78:                                       ; preds = %for.inc114, %done
  %62 = load i32* %i, align 4
  %cmp79 = icmp sge i32 %62, 0
  br i1 %cmp79, label %for.body81, label %for.end115

for.body81:                                       ; preds = %for.cond78
  %63 = load %struct.httpd_conn** %hc.addr, align 8
  %encodings82 = getelementptr inbounds %struct.httpd_conn* %63, i32 0, i32 17
  %64 = load %struct.httpd_conn** %hc.addr, align 8
  %maxencodings = getelementptr inbounds %struct.httpd_conn* %64, i32 0, i32 36
  %65 = load i64* %encodings_len, align 8
  %66 = load i32* %i, align 4
  %idxprom83 = sext i32 %66 to i64
  %arrayidx84 = getelementptr inbounds [100 x i32]* %me_indexes, i32 0, i64 %idxprom83
  %67 = load i32* %arrayidx84, align 4
  %idxprom85 = sext i32 %67 to i64
  %arrayidx86 = getelementptr inbounds [3 x %struct.mime_entry]* @enc_tab, i32 0, i64 %idxprom85
  %val_len = getelementptr inbounds %struct.mime_entry* %arrayidx86, i32 0, i32 3
  %68 = load i64* %val_len, align 8
  %add87 = add i64 %65, %68
  %add88 = add i64 %add87, 1
  call void @httpd_realloc_str(i8** %encodings82, i64* %maxencodings, i64 %add88)
  %69 = load %struct.httpd_conn** %hc.addr, align 8
  %encodings89 = getelementptr inbounds %struct.httpd_conn* %69, i32 0, i32 17
  %70 = load i8** %encodings89, align 8
  %arrayidx90 = getelementptr inbounds i8* %70, i64 0
  %71 = load i8* %arrayidx90, align 1
  %conv91 = sext i8 %71 to i32
  %cmp92 = icmp ne i32 %conv91, 0
  br i1 %cmp92, label %if.then94, label %if.end99

if.then94:                                        ; preds = %for.body81
  %72 = load i64* %encodings_len, align 8
  %73 = load %struct.httpd_conn** %hc.addr, align 8
  %encodings95 = getelementptr inbounds %struct.httpd_conn* %73, i32 0, i32 17
  %74 = load i8** %encodings95, align 8
  %arrayidx96 = getelementptr inbounds i8* %74, i64 %72
  %call97 = call i8* @strcpy(i8* %arrayidx96, i8* getelementptr inbounds ([2 x i8]* @.str101245, i32 0, i32 0)) #5
  %75 = load i64* %encodings_len, align 8
  %inc98 = add i64 %75, 1
  store i64 %inc98, i64* %encodings_len, align 8
  br label %if.end99

if.end99:                                         ; preds = %if.then94, %for.body81
  %76 = load i64* %encodings_len, align 8
  %77 = load %struct.httpd_conn** %hc.addr, align 8
  %encodings100 = getelementptr inbounds %struct.httpd_conn* %77, i32 0, i32 17
  %78 = load i8** %encodings100, align 8
  %arrayidx101 = getelementptr inbounds i8* %78, i64 %76
  %79 = load i32* %i, align 4
  %idxprom102 = sext i32 %79 to i64
  %arrayidx103 = getelementptr inbounds [100 x i32]* %me_indexes, i32 0, i64 %idxprom102
  %80 = load i32* %arrayidx103, align 4
  %idxprom104 = sext i32 %80 to i64
  %arrayidx105 = getelementptr inbounds [3 x %struct.mime_entry]* @enc_tab, i32 0, i64 %idxprom104
  %val106 = getelementptr inbounds %struct.mime_entry* %arrayidx105, i32 0, i32 2
  %81 = load i8** %val106, align 8
  %call107 = call i8* @strcpy(i8* %arrayidx101, i8* %81) #5
  %82 = load i32* %i, align 4
  %idxprom108 = sext i32 %82 to i64
  %arrayidx109 = getelementptr inbounds [100 x i32]* %me_indexes, i32 0, i64 %idxprom108
  %83 = load i32* %arrayidx109, align 4
  %idxprom110 = sext i32 %83 to i64
  %arrayidx111 = getelementptr inbounds [3 x %struct.mime_entry]* @enc_tab, i32 0, i64 %idxprom110
  %val_len112 = getelementptr inbounds %struct.mime_entry* %arrayidx111, i32 0, i32 3
  %84 = load i64* %val_len112, align 8
  %85 = load i64* %encodings_len, align 8
  %add113 = add i64 %85, %84
  store i64 %add113, i64* %encodings_len, align 8
  br label %for.inc114

for.inc114:                                       ; preds = %if.end99
  %86 = load i32* %i, align 4
  %dec = add nsw i32 %86, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond78

for.end115:                                       ; preds = %for.cond78
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @send_authenticate(%struct.httpd_conn* %hc, i8* %realm) #0 {
entry:
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %realm.addr = alloca i8*, align 8
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  store i8* %realm, i8** %realm.addr, align 8
  %0 = load i8** %realm.addr, align 8
  %call = call i64 @strlen(i8* %0) #8
  %add = add i64 32, %call
  %add1 = add i64 %add, 3
  call void @httpd_realloc_str(i8** @send_authenticate.header, i64* @send_authenticate.maxheader, i64 %add1)
  %1 = load i8** @send_authenticate.header, align 8
  %2 = load i64* @send_authenticate.maxheader, align 8
  %3 = load i8** %realm.addr, align 8
  %call2 = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %1, i64 %2, i8* getelementptr inbounds ([8 x i8]* @.str514, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8]* @send_authenticate.headstr, i32 0, i32 0), i8* %3)
  %4 = load %struct.httpd_conn** %hc.addr, align 8
  %5 = load i8** @err401title, align 8
  %6 = load i8** @send_authenticate.header, align 8
  %7 = load i8** @err401form, align 8
  %8 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl = getelementptr inbounds %struct.httpd_conn* %8, i32 0, i32 12
  %9 = load i8** %encodedurl, align 8
  call void @httpd_send_err(%struct.httpd_conn* %4, i32 401, i8* %5, i8* %6, i8* %7, i8* %9)
  %10 = load %struct.httpd_conn** %hc.addr, align 8
  %method = getelementptr inbounds %struct.httpd_conn* %10, i32 0, i32 8
  %11 = load i32* %method, align 4
  %cmp = icmp eq i32 %11, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %12 = load %struct.httpd_conn** %hc.addr, align 8
  %should_linger = getelementptr inbounds %struct.httpd_conn* %12, i32 0, i32 58
  store i32 1, i32* %should_linger, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @b64_decode(i8* %str, i8* %space, i32 %size) #0 {
entry:
  %str.addr = alloca i8*, align 8
  %space.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %cp = alloca i8*, align 8
  %space_idx = alloca i32, align 4
  %phase = alloca i32, align 4
  %d = alloca i32, align 4
  %prev_d = alloca i32, align 4
  %c = alloca i8, align 1
  store i8* %str, i8** %str.addr, align 8
  store i8* %space, i8** %space.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  store i32 0, i32* %prev_d, align 4
  store i32 0, i32* %space_idx, align 4
  store i32 0, i32* %phase, align 4
  %0 = load i8** %str.addr, align 8
  store i8* %0, i8** %cp, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i8** %cp, align 8
  %2 = load i8* %1, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8** %cp, align 8
  %4 = load i8* %3, align 1
  %conv2 = zext i8 %4 to i32
  %idxprom = sext i32 %conv2 to i64
  %arrayidx = getelementptr inbounds [256 x i32]* @b64_decode_table, i32 0, i64 %idxprom
  %5 = load i32* %arrayidx, align 4
  store i32 %5, i32* %d, align 4
  %6 = load i32* %d, align 4
  %cmp3 = icmp ne i32 %6, -1
  br i1 %cmp3, label %if.then, label %if.end41

if.then:                                          ; preds = %for.body
  %7 = load i32* %phase, align 4
  switch i32 %7, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb5
    i32 2, label %sw.bb14
    i32 3, label %sw.bb29
  ]

sw.bb:                                            ; preds = %if.then
  %8 = load i32* %phase, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %phase, align 4
  br label %sw.epilog

sw.bb5:                                           ; preds = %if.then
  %9 = load i32* %prev_d, align 4
  %shl = shl i32 %9, 2
  %10 = load i32* %d, align 4
  %and = and i32 %10, 48
  %shr = ashr i32 %and, 4
  %or = or i32 %shl, %shr
  %conv6 = trunc i32 %or to i8
  store i8 %conv6, i8* %c, align 1
  %11 = load i32* %space_idx, align 4
  %12 = load i32* %size.addr, align 4
  %cmp7 = icmp slt i32 %11, %12
  br i1 %cmp7, label %if.then9, label %if.end

if.then9:                                         ; preds = %sw.bb5
  %13 = load i8* %c, align 1
  %14 = load i32* %space_idx, align 4
  %inc10 = add nsw i32 %14, 1
  store i32 %inc10, i32* %space_idx, align 4
  %idxprom11 = sext i32 %14 to i64
  %15 = load i8** %space.addr, align 8
  %arrayidx12 = getelementptr inbounds i8* %15, i64 %idxprom11
  store i8 %13, i8* %arrayidx12, align 1
  br label %if.end

if.end:                                           ; preds = %if.then9, %sw.bb5
  %16 = load i32* %phase, align 4
  %inc13 = add nsw i32 %16, 1
  store i32 %inc13, i32* %phase, align 4
  br label %sw.epilog

sw.bb14:                                          ; preds = %if.then
  %17 = load i32* %prev_d, align 4
  %and15 = and i32 %17, 15
  %shl16 = shl i32 %and15, 4
  %18 = load i32* %d, align 4
  %and17 = and i32 %18, 60
  %shr18 = ashr i32 %and17, 2
  %or19 = or i32 %shl16, %shr18
  %conv20 = trunc i32 %or19 to i8
  store i8 %conv20, i8* %c, align 1
  %19 = load i32* %space_idx, align 4
  %20 = load i32* %size.addr, align 4
  %cmp21 = icmp slt i32 %19, %20
  br i1 %cmp21, label %if.then23, label %if.end27

if.then23:                                        ; preds = %sw.bb14
  %21 = load i8* %c, align 1
  %22 = load i32* %space_idx, align 4
  %inc24 = add nsw i32 %22, 1
  store i32 %inc24, i32* %space_idx, align 4
  %idxprom25 = sext i32 %22 to i64
  %23 = load i8** %space.addr, align 8
  %arrayidx26 = getelementptr inbounds i8* %23, i64 %idxprom25
  store i8 %21, i8* %arrayidx26, align 1
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %sw.bb14
  %24 = load i32* %phase, align 4
  %inc28 = add nsw i32 %24, 1
  store i32 %inc28, i32* %phase, align 4
  br label %sw.epilog

sw.bb29:                                          ; preds = %if.then
  %25 = load i32* %prev_d, align 4
  %and30 = and i32 %25, 3
  %shl31 = shl i32 %and30, 6
  %26 = load i32* %d, align 4
  %or32 = or i32 %shl31, %26
  %conv33 = trunc i32 %or32 to i8
  store i8 %conv33, i8* %c, align 1
  %27 = load i32* %space_idx, align 4
  %28 = load i32* %size.addr, align 4
  %cmp34 = icmp slt i32 %27, %28
  br i1 %cmp34, label %if.then36, label %if.end40

if.then36:                                        ; preds = %sw.bb29
  %29 = load i8* %c, align 1
  %30 = load i32* %space_idx, align 4
  %inc37 = add nsw i32 %30, 1
  store i32 %inc37, i32* %space_idx, align 4
  %idxprom38 = sext i32 %30 to i64
  %31 = load i8** %space.addr, align 8
  %arrayidx39 = getelementptr inbounds i8* %31, i64 %idxprom38
  store i8 %29, i8* %arrayidx39, align 1
  br label %if.end40

if.end40:                                         ; preds = %if.then36, %sw.bb29
  store i32 0, i32* %phase, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end40, %if.end27, %if.end, %sw.bb, %if.then
  %32 = load i32* %d, align 4
  store i32 %32, i32* %prev_d, align 4
  br label %if.end41

if.end41:                                         ; preds = %sw.epilog, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end41
  %33 = load i8** %cp, align 8
  %incdec.ptr = getelementptr inbounds i8* %33, i32 1
  store i8* %incdec.ptr, i8** %cp, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %34 = load i32* %space_idx, align 4
  ret i32 %34
}

; Function Attrs: nounwind uwtable
define internal i32 @really_check_referrer(%struct.httpd_conn* %hc) #0 {
entry:
  %retval = alloca i32, align 4
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %hs = alloca %struct.httpd_server*, align 8
  %cp1 = alloca i8*, align 8
  %cp2 = alloca i8*, align 8
  %cp3 = alloca i8*, align 8
  %lp = alloca i8*, align 8
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  %0 = load %struct.httpd_conn** %hc.addr, align 8
  %hs1 = getelementptr inbounds %struct.httpd_conn* %0, i32 0, i32 1
  %1 = load %struct.httpd_server** %hs1, align 8
  store %struct.httpd_server* %1, %struct.httpd_server** %hs, align 8
  %2 = load %struct.httpd_conn** %hc.addr, align 8
  %referrer = getelementptr inbounds %struct.httpd_conn* %2, i32 0, i32 20
  %3 = load i8** %referrer, align 8
  %cmp = icmp eq i8* %3, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct.httpd_conn** %hc.addr, align 8
  %referrer2 = getelementptr inbounds %struct.httpd_conn* %4, i32 0, i32 20
  %5 = load i8** %referrer2, align 8
  %arrayidx = getelementptr inbounds i8* %5, i64 0
  %6 = load i8* %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %cmp3 = icmp eq i32 %conv, 0
  br i1 %cmp3, label %if.then, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %7 = load %struct.httpd_conn** %hc.addr, align 8
  %referrer6 = getelementptr inbounds %struct.httpd_conn* %7, i32 0, i32 20
  %8 = load i8** %referrer6, align 8
  %call = call i8* @strstr(i8* %8, i8* getelementptr inbounds ([3 x i8]* @.str506, i32 0, i32 0)) #8
  store i8* %call, i8** %cp1, align 8
  %cmp7 = icmp eq i8* %call, null
  br i1 %cmp7, label %if.then, label %if.end12

if.then:                                          ; preds = %lor.lhs.false5, %lor.lhs.false, %entry
  %9 = load %struct.httpd_server** %hs, align 8
  %no_empty_referrers = getelementptr inbounds %struct.httpd_server* %9, i32 0, i32 19
  %10 = load i32* %no_empty_referrers, align 4
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %11 = load %struct.httpd_server** %hs, align 8
  %url_pattern = getelementptr inbounds %struct.httpd_server* %11, i32 0, i32 17
  %12 = load i8** %url_pattern, align 8
  %13 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename = getelementptr inbounds %struct.httpd_conn* %13, i32 0, i32 15
  %14 = load i8** %origfilename, align 8
  %call9 = call i32 @match(i8* %12, i8* %14)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.then11, label %if.end

if.then11:                                        ; preds = %land.lhs.true
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %if.then
  store i32 1, i32* %retval
  br label %return

if.end12:                                         ; preds = %lor.lhs.false5
  %15 = load i8** %cp1, align 8
  %add.ptr = getelementptr inbounds i8* %15, i64 2
  store i8* %add.ptr, i8** %cp1, align 8
  %16 = load i8** %cp1, align 8
  store i8* %16, i8** %cp2, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end12
  %17 = load i8** %cp2, align 8
  %18 = load i8* %17, align 1
  %conv13 = sext i8 %18 to i32
  %cmp14 = icmp ne i32 %conv13, 47
  br i1 %cmp14, label %land.lhs.true16, label %land.end

land.lhs.true16:                                  ; preds = %for.cond
  %19 = load i8** %cp2, align 8
  %20 = load i8* %19, align 1
  %conv17 = sext i8 %20 to i32
  %cmp18 = icmp ne i32 %conv17, 58
  br i1 %cmp18, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true16
  %21 = load i8** %cp2, align 8
  %22 = load i8* %21, align 1
  %conv20 = sext i8 %22 to i32
  %cmp21 = icmp ne i32 %conv20, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true16, %for.cond
  %23 = phi i1 [ false, %land.lhs.true16 ], [ false, %for.cond ], [ %cmp21, %land.rhs ]
  br i1 %23, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %24 = load i8** %cp2, align 8
  %incdec.ptr = getelementptr inbounds i8* %24, i32 1
  store i8* %incdec.ptr, i8** %cp2, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %25 = load i8** %cp2, align 8
  %26 = load i8** %cp1, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %25 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %26 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  call void @httpd_realloc_str(i8** @really_check_referrer.refhost, i64* @really_check_referrer.refhost_size, i64 %sub.ptr.sub)
  %27 = load i8** @really_check_referrer.refhost, align 8
  store i8* %27, i8** %cp3, align 8
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc37, %for.end
  %28 = load i8** %cp1, align 8
  %29 = load i8** %cp2, align 8
  %cmp24 = icmp ult i8* %28, %29
  br i1 %cmp24, label %for.body26, label %for.end40

for.body26:                                       ; preds = %for.cond23
  %30 = load i8** %cp1, align 8
  %31 = load i8* %30, align 1
  %conv27 = sext i8 %31 to i32
  %idxprom = sext i32 %conv27 to i64
  %call28 = call i16** @__ctype_b_loc() #10
  %32 = load i16** %call28, align 8
  %arrayidx29 = getelementptr inbounds i16* %32, i64 %idxprom
  %33 = load i16* %arrayidx29, align 2
  %conv30 = zext i16 %33 to i32
  %and = and i32 %conv30, 256
  %tobool31 = icmp ne i32 %and, 0
  br i1 %tobool31, label %if.then32, label %if.else

if.then32:                                        ; preds = %for.body26
  %34 = load i8** %cp1, align 8
  %35 = load i8* %34, align 1
  %conv33 = sext i8 %35 to i32
  %call34 = call i32 @tolower(i32 %conv33) #5
  %conv35 = trunc i32 %call34 to i8
  %36 = load i8** %cp3, align 8
  store i8 %conv35, i8* %36, align 1
  br label %if.end36

if.else:                                          ; preds = %for.body26
  %37 = load i8** %cp1, align 8
  %38 = load i8* %37, align 1
  %39 = load i8** %cp3, align 8
  store i8 %38, i8* %39, align 1
  br label %if.end36

if.end36:                                         ; preds = %if.else, %if.then32
  br label %for.inc37

for.inc37:                                        ; preds = %if.end36
  %40 = load i8** %cp1, align 8
  %incdec.ptr38 = getelementptr inbounds i8* %40, i32 1
  store i8* %incdec.ptr38, i8** %cp1, align 8
  %41 = load i8** %cp3, align 8
  %incdec.ptr39 = getelementptr inbounds i8* %41, i32 1
  store i8* %incdec.ptr39, i8** %cp3, align 8
  br label %for.cond23

for.end40:                                        ; preds = %for.cond23
  %42 = load i8** %cp3, align 8
  store i8 0, i8* %42, align 1
  %43 = load %struct.httpd_server** %hs, align 8
  %local_pattern = getelementptr inbounds %struct.httpd_server* %43, i32 0, i32 18
  %44 = load i8** %local_pattern, align 8
  %cmp41 = icmp ne i8* %44, null
  br i1 %cmp41, label %if.then43, label %if.else45

if.then43:                                        ; preds = %for.end40
  %45 = load %struct.httpd_server** %hs, align 8
  %local_pattern44 = getelementptr inbounds %struct.httpd_server* %45, i32 0, i32 18
  %46 = load i8** %local_pattern44, align 8
  store i8* %46, i8** %lp, align 8
  br label %if.end58

if.else45:                                        ; preds = %for.end40
  %47 = load %struct.httpd_server** %hs, align 8
  %vhost = getelementptr inbounds %struct.httpd_server* %47, i32 0, i32 15
  %48 = load i32* %vhost, align 4
  %tobool46 = icmp ne i32 %48, 0
  br i1 %tobool46, label %if.else52, label %if.then47

if.then47:                                        ; preds = %if.else45
  %49 = load %struct.httpd_server** %hs, align 8
  %server_hostname = getelementptr inbounds %struct.httpd_server* %49, i32 0, i32 1
  %50 = load i8** %server_hostname, align 8
  store i8* %50, i8** %lp, align 8
  %51 = load i8** %lp, align 8
  %cmp48 = icmp eq i8* %51, null
  br i1 %cmp48, label %if.then50, label %if.end51

if.then50:                                        ; preds = %if.then47
  store i32 1, i32* %retval
  br label %return

if.end51:                                         ; preds = %if.then47
  br label %if.end57

if.else52:                                        ; preds = %if.else45
  %52 = load %struct.httpd_conn** %hc.addr, align 8
  %hostname = getelementptr inbounds %struct.httpd_conn* %52, i32 0, i32 50
  %53 = load i8** %hostname, align 8
  store i8* %53, i8** %lp, align 8
  %54 = load i8** %lp, align 8
  %cmp53 = icmp eq i8* %54, null
  br i1 %cmp53, label %if.then55, label %if.end56

if.then55:                                        ; preds = %if.else52
  store i32 1, i32* %retval
  br label %return

if.end56:                                         ; preds = %if.else52
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.end51
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.then43
  %55 = load i8** %lp, align 8
  %56 = load i8** @really_check_referrer.refhost, align 8
  %call59 = call i32 @match(i8* %55, i8* %56)
  %tobool60 = icmp ne i32 %call59, 0
  br i1 %tobool60, label %if.end67, label %land.lhs.true61

land.lhs.true61:                                  ; preds = %if.end58
  %57 = load %struct.httpd_server** %hs, align 8
  %url_pattern62 = getelementptr inbounds %struct.httpd_server* %57, i32 0, i32 17
  %58 = load i8** %url_pattern62, align 8
  %59 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename63 = getelementptr inbounds %struct.httpd_conn* %59, i32 0, i32 15
  %60 = load i8** %origfilename63, align 8
  %call64 = call i32 @match(i8* %58, i8* %60)
  %tobool65 = icmp ne i32 %call64, 0
  br i1 %tobool65, label %if.then66, label %if.end67

if.then66:                                        ; preds = %land.lhs.true61
  store i32 0, i32* %retval
  br label %return

if.end67:                                         ; preds = %land.lhs.true61, %if.end58
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end67, %if.then66, %if.then55, %if.then50, %if.end, %if.then11
  %61 = load i32* %retval
  ret i32 %61
}

; Function Attrs: nounwind uwtable
define internal i32 @name_compare(i8* %v1, i8* %v2) #0 {
entry:
  %v1.addr = alloca i8*, align 8
  %v2.addr = alloca i8*, align 8
  %c1 = alloca i8**, align 8
  %c2 = alloca i8**, align 8
  store i8* %v1, i8** %v1.addr, align 8
  store i8* %v2, i8** %v2.addr, align 8
  %0 = load i8** %v1.addr, align 8
  %1 = bitcast i8* %0 to i8**
  store i8** %1, i8*** %c1, align 8
  %2 = load i8** %v2.addr, align 8
  %3 = bitcast i8* %2 to i8**
  store i8** %3, i8*** %c2, align 8
  %4 = load i8*** %c1, align 8
  %5 = load i8** %4, align 8
  %6 = load i8*** %c2, align 8
  %7 = load i8** %6, align 8
  %call = call i32 @strcmp(i8* %5, i8* %7) #8
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal void @strencode(i8* %to, i32 %tosize, i8* %from) #0 {
entry:
  %to.addr = alloca i8*, align 8
  %tosize.addr = alloca i32, align 4
  %from.addr = alloca i8*, align 8
  %tolen = alloca i32, align 4
  store i8* %to, i8** %to.addr, align 8
  store i32 %tosize, i32* %tosize.addr, align 4
  store i8* %from, i8** %from.addr, align 8
  store i32 0, i32* %tolen, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8** %from.addr, align 8
  %1 = load i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %2 = load i32* %tolen, align 4
  %add = add nsw i32 %2, 4
  %3 = load i32* %tosize.addr, align 4
  %cmp2 = icmp slt i32 %add, %3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %4 = phi i1 [ false, %for.cond ], [ %cmp2, %land.rhs ]
  br i1 %4, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %5 = load i8** %from.addr, align 8
  %6 = load i8* %5, align 1
  %conv4 = sext i8 %6 to i32
  %idxprom = sext i32 %conv4 to i64
  %call = call i16** @__ctype_b_loc() #10
  %7 = load i16** %call, align 8
  %arrayidx = getelementptr inbounds i16* %7, i64 %idxprom
  %8 = load i16* %arrayidx, align 2
  %conv5 = zext i16 %8 to i32
  %and = and i32 %conv5, 8
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %9 = load i8** %from.addr, align 8
  %10 = load i8* %9, align 1
  %conv6 = sext i8 %10 to i32
  %call7 = call i8* @strchr(i8* getelementptr inbounds ([6 x i8]* @.str502, i32 0, i32 0), i32 %conv6) #8
  %cmp8 = icmp ne i8* %call7, null
  br i1 %cmp8, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %for.body
  %11 = load i8** %from.addr, align 8
  %12 = load i8* %11, align 1
  %13 = load i8** %to.addr, align 8
  store i8 %12, i8* %13, align 1
  %14 = load i8** %to.addr, align 8
  %incdec.ptr = getelementptr inbounds i8* %14, i32 1
  store i8* %incdec.ptr, i8** %to.addr, align 8
  %15 = load i32* %tolen, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %tolen, align 4
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %16 = load i8** %to.addr, align 8
  %17 = load i8** %from.addr, align 8
  %18 = load i8* %17, align 1
  %conv10 = sext i8 %18 to i32
  %and11 = and i32 %conv10, 255
  %call12 = call i32 (i8*, i8*, ...)* @sprintf(i8* %16, i8* getelementptr inbounds ([7 x i8]* @.str503, i32 0, i32 0), i32 %and11) #5
  %19 = load i8** %to.addr, align 8
  %add.ptr = getelementptr inbounds i8* %19, i64 3
  store i8* %add.ptr, i8** %to.addr, align 8
  %20 = load i32* %tolen, align 4
  %add13 = add nsw i32 %20, 3
  store i32 %add13, i32* %tolen, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %21 = load i8** %from.addr, align 8
  %incdec.ptr14 = getelementptr inbounds i8* %21, i32 1
  store i8* %incdec.ptr14, i8** %from.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %22 = load i8** %to.addr, align 8
  store i8 0, i8* %22, align 1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @cgi_kill(i8* %client_data.coerce, %struct.timeval* %nowP) #0 {
entry:
  %client_data = alloca %union.ClientData, align 8
  %nowP.addr = alloca %struct.timeval*, align 8
  %pid = alloca i32, align 4
  %coerce.dive = getelementptr %union.ClientData* %client_data, i32 0, i32 0
  store i8* %client_data.coerce, i8** %coerce.dive
  store %struct.timeval* %nowP, %struct.timeval** %nowP.addr, align 8
  %i = bitcast %union.ClientData* %client_data to i32*
  %0 = load i32* %i, align 4
  store i32 %0, i32* %pid, align 4
  %1 = load i32* %pid, align 4
  %call = call i32 @kill(i32 %1, i32 2) #5
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %entry
  %2 = load i32* %pid, align 4
  call void (i32, i8*, ...)* @syslog(i32 4, i8* getelementptr inbounds ([22 x i8]* @.str439, i32 0, i32 0), i32 %2)
  %3 = load %struct.timeval** %nowP.addr, align 8
  %coerce.dive1 = getelementptr %union.ClientData* %client_data, i32 0, i32 0
  %4 = load i8** %coerce.dive1
  %call2 = call %struct.TimerStruct* @tmr_create(%struct.timeval* %3, void (i8*, %struct.timeval*)* @cgi_kill2, i8* %4, i64 5000, i32 0)
  %cmp3 = icmp eq %struct.TimerStruct* %call2, null
  br i1 %cmp3, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.then
  call void (i32, i8*, ...)* @syslog(i32 2, i8* getelementptr inbounds ([29 x i8]* @.str440, i32 0, i32 0))
  call void @exit(i32 1) #9
  unreachable

if.end:                                           ; preds = %if.then
  br label %if.end5

if.end5:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @cgi_child(%struct.httpd_conn* %hc) #0 {
entry:
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %r = alloca i32, align 4
  %argp = alloca i8**, align 8
  %envp = alloca i8**, align 8
  %binary = alloca i8*, align 8
  %directory = alloca i8*, align 8
  %newfd = alloca i32, align 4
  %p = alloca [2 x i32], align 4
  %p54 = alloca [2 x i32], align 4
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  %0 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd = getelementptr inbounds %struct.httpd_conn* %0, i32 0, i32 60
  %1 = load i32* %conn_fd, align 4
  %call = call i32 (i32, i32, ...)* @fcntl(i32 %1, i32 2, i32 0)
  call void @closelog()
  %2 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd1 = getelementptr inbounds %struct.httpd_conn* %2, i32 0, i32 60
  %3 = load i32* %conn_fd1, align 4
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd2 = getelementptr inbounds %struct.httpd_conn* %4, i32 0, i32 60
  %5 = load i32* %conn_fd2, align 4
  %cmp3 = icmp eq i32 %5, 1
  br i1 %cmp3, label %if.then, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %6 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd5 = getelementptr inbounds %struct.httpd_conn* %6, i32 0, i32 60
  %7 = load i32* %conn_fd5, align 4
  %cmp6 = icmp eq i32 %7, 2
  br i1 %cmp6, label %if.then, label %if.end12

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false, %entry
  %8 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd7 = getelementptr inbounds %struct.httpd_conn* %8, i32 0, i32 60
  %9 = load i32* %conn_fd7, align 4
  %call8 = call i32 @dup2(i32 %9, i32 3) #5
  store i32 %call8, i32* %newfd, align 4
  %10 = load i32* %newfd, align 4
  %cmp9 = icmp sge i32 %10, 0
  br i1 %cmp9, label %if.then10, label %if.end

if.then10:                                        ; preds = %if.then
  %11 = load i32* %newfd, align 4
  %12 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd11 = getelementptr inbounds %struct.httpd_conn* %12, i32 0, i32 60
  store i32 %11, i32* %conn_fd11, align 4
  br label %if.end

if.end:                                           ; preds = %if.then10, %if.then
  br label %if.end12

if.end12:                                         ; preds = %if.end, %lor.lhs.false4
  %13 = load %struct.httpd_conn** %hc.addr, align 8
  %call13 = call i8** @make_envp(%struct.httpd_conn* %13)
  store i8** %call13, i8*** %envp, align 8
  %14 = load %struct.httpd_conn** %hc.addr, align 8
  %call14 = call i8** @make_argp(%struct.httpd_conn* %14)
  store i8** %call14, i8*** %argp, align 8
  %15 = load %struct.httpd_conn** %hc.addr, align 8
  %method = getelementptr inbounds %struct.httpd_conn* %15, i32 0, i32 8
  %16 = load i32* %method, align 4
  %cmp15 = icmp eq i32 %16, 3
  br i1 %cmp15, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end12
  %17 = load %struct.httpd_conn** %hc.addr, align 8
  %read_idx = getelementptr inbounds %struct.httpd_conn* %17, i32 0, i32 5
  %18 = load i64* %read_idx, align 8
  %19 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_idx = getelementptr inbounds %struct.httpd_conn* %19, i32 0, i32 6
  %20 = load i64* %checked_idx, align 8
  %cmp16 = icmp ugt i64 %18, %20
  br i1 %cmp16, label %if.then17, label %if.else

if.then17:                                        ; preds = %land.lhs.true
  %arraydecay = getelementptr inbounds [2 x i32]* %p, i32 0, i32 0
  %call18 = call i32 @pipe(i32* %arraydecay) #5
  %cmp19 = icmp slt i32 %call18, 0
  br i1 %cmp19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.then17
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([10 x i8]* @.str442, i32 0, i32 0))
  %21 = load %struct.httpd_conn** %hc.addr, align 8
  %22 = load i8** @err500title, align 8
  %23 = load i8** @err500form, align 8
  %24 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl = getelementptr inbounds %struct.httpd_conn* %24, i32 0, i32 12
  %25 = load i8** %encodedurl, align 8
  call void @httpd_send_err(%struct.httpd_conn* %21, i32 500, i8* %22, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %23, i8* %25)
  %26 = load %struct.httpd_conn** %hc.addr, align 8
  call void @httpd_write_response(%struct.httpd_conn* %26)
  call void @exit(i32 1) #9
  unreachable

if.end21:                                         ; preds = %if.then17
  %call22 = call i32 @fork() #5
  store i32 %call22, i32* %r, align 4
  %27 = load i32* %r, align 4
  %cmp23 = icmp slt i32 %27, 0
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %if.end21
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([10 x i8]* @.str436, i32 0, i32 0))
  %28 = load %struct.httpd_conn** %hc.addr, align 8
  %29 = load i8** @err500title, align 8
  %30 = load i8** @err500form, align 8
  %31 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl25 = getelementptr inbounds %struct.httpd_conn* %31, i32 0, i32 12
  %32 = load i8** %encodedurl25, align 8
  call void @httpd_send_err(%struct.httpd_conn* %28, i32 500, i8* %29, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %30, i8* %32)
  %33 = load %struct.httpd_conn** %hc.addr, align 8
  call void @httpd_write_response(%struct.httpd_conn* %33)
  call void @exit(i32 1) #9
  unreachable

if.end26:                                         ; preds = %if.end21
  %34 = load i32* %r, align 4
  %cmp27 = icmp eq i32 %34, 0
  br i1 %cmp27, label %if.then28, label %if.end31

if.then28:                                        ; preds = %if.end26
  store i32 1, i32* @sub_process, align 4
  %arrayidx = getelementptr inbounds [2 x i32]* %p, i32 0, i64 0
  %35 = load i32* %arrayidx, align 4
  %call29 = call i32 @close(i32 %35)
  %36 = load %struct.httpd_conn** %hc.addr, align 8
  %arrayidx30 = getelementptr inbounds [2 x i32]* %p, i32 0, i64 1
  %37 = load i32* %arrayidx30, align 4
  call void @cgi_interpose_input(%struct.httpd_conn* %36, i32 %37)
  call void @exit(i32 0) #9
  unreachable

if.end31:                                         ; preds = %if.end26
  %arrayidx32 = getelementptr inbounds [2 x i32]* %p, i32 0, i64 1
  %38 = load i32* %arrayidx32, align 4
  %call33 = call i32 @close(i32 %38)
  %arrayidx34 = getelementptr inbounds [2 x i32]* %p, i32 0, i64 0
  %39 = load i32* %arrayidx34, align 4
  %cmp35 = icmp ne i32 %39, 0
  br i1 %cmp35, label %if.then36, label %if.end41

if.then36:                                        ; preds = %if.end31
  %arrayidx37 = getelementptr inbounds [2 x i32]* %p, i32 0, i64 0
  %40 = load i32* %arrayidx37, align 4
  %call38 = call i32 @dup2(i32 %40, i32 0) #5
  %arrayidx39 = getelementptr inbounds [2 x i32]* %p, i32 0, i64 0
  %41 = load i32* %arrayidx39, align 4
  %call40 = call i32 @close(i32 %41)
  br label %if.end41

if.end41:                                         ; preds = %if.then36, %if.end31
  br label %if.end48

if.else:                                          ; preds = %land.lhs.true, %if.end12
  %42 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd42 = getelementptr inbounds %struct.httpd_conn* %42, i32 0, i32 60
  %43 = load i32* %conn_fd42, align 4
  %cmp43 = icmp ne i32 %43, 0
  br i1 %cmp43, label %if.then44, label %if.end47

if.then44:                                        ; preds = %if.else
  %44 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd45 = getelementptr inbounds %struct.httpd_conn* %44, i32 0, i32 60
  %45 = load i32* %conn_fd45, align 4
  %call46 = call i32 @dup2(i32 %45, i32 0) #5
  br label %if.end47

if.end47:                                         ; preds = %if.then44, %if.else
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.end41
  %46 = load i8*** %argp, align 8
  %arrayidx49 = getelementptr inbounds i8** %46, i64 0
  %47 = load i8** %arrayidx49, align 8
  %call50 = call i32 @strncmp(i8* %47, i8* getelementptr inbounds ([5 x i8]* @.str443, i32 0, i32 0), i64 4) #8
  %cmp51 = icmp ne i32 %call50, 0
  br i1 %cmp51, label %land.lhs.true52, label %if.else95

land.lhs.true52:                                  ; preds = %if.end48
  %48 = load %struct.httpd_conn** %hc.addr, align 8
  %mime_flag = getelementptr inbounds %struct.httpd_conn* %48, i32 0, i32 51
  %49 = load i32* %mime_flag, align 4
  %tobool = icmp ne i32 %49, 0
  br i1 %tobool, label %if.then53, label %if.else95

if.then53:                                        ; preds = %land.lhs.true52
  %arraydecay55 = getelementptr inbounds [2 x i32]* %p54, i32 0, i32 0
  %call56 = call i32 @pipe(i32* %arraydecay55) #5
  %cmp57 = icmp slt i32 %call56, 0
  br i1 %cmp57, label %if.then58, label %if.end60

if.then58:                                        ; preds = %if.then53
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([10 x i8]* @.str442, i32 0, i32 0))
  %50 = load %struct.httpd_conn** %hc.addr, align 8
  %51 = load i8** @err500title, align 8
  %52 = load i8** @err500form, align 8
  %53 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl59 = getelementptr inbounds %struct.httpd_conn* %53, i32 0, i32 12
  %54 = load i8** %encodedurl59, align 8
  call void @httpd_send_err(%struct.httpd_conn* %50, i32 500, i8* %51, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %52, i8* %54)
  %55 = load %struct.httpd_conn** %hc.addr, align 8
  call void @httpd_write_response(%struct.httpd_conn* %55)
  call void @exit(i32 1) #9
  unreachable

if.end60:                                         ; preds = %if.then53
  %call61 = call i32 @fork() #5
  store i32 %call61, i32* %r, align 4
  %56 = load i32* %r, align 4
  %cmp62 = icmp slt i32 %56, 0
  br i1 %cmp62, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.end60
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([10 x i8]* @.str436, i32 0, i32 0))
  %57 = load %struct.httpd_conn** %hc.addr, align 8
  %58 = load i8** @err500title, align 8
  %59 = load i8** @err500form, align 8
  %60 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl64 = getelementptr inbounds %struct.httpd_conn* %60, i32 0, i32 12
  %61 = load i8** %encodedurl64, align 8
  call void @httpd_send_err(%struct.httpd_conn* %57, i32 500, i8* %58, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %59, i8* %61)
  %62 = load %struct.httpd_conn** %hc.addr, align 8
  call void @httpd_write_response(%struct.httpd_conn* %62)
  call void @exit(i32 1) #9
  unreachable

if.end65:                                         ; preds = %if.end60
  %63 = load i32* %r, align 4
  %cmp66 = icmp eq i32 %63, 0
  br i1 %cmp66, label %if.then67, label %if.end71

if.then67:                                        ; preds = %if.end65
  store i32 1, i32* @sub_process, align 4
  %arrayidx68 = getelementptr inbounds [2 x i32]* %p54, i32 0, i64 1
  %64 = load i32* %arrayidx68, align 4
  %call69 = call i32 @close(i32 %64)
  %65 = load %struct.httpd_conn** %hc.addr, align 8
  %arrayidx70 = getelementptr inbounds [2 x i32]* %p54, i32 0, i64 0
  %66 = load i32* %arrayidx70, align 4
  call void @cgi_interpose_output(%struct.httpd_conn* %65, i32 %66)
  call void @exit(i32 0) #9
  unreachable

if.end71:                                         ; preds = %if.end65
  %arrayidx72 = getelementptr inbounds [2 x i32]* %p54, i32 0, i64 0
  %67 = load i32* %arrayidx72, align 4
  %call73 = call i32 @close(i32 %67)
  %arrayidx74 = getelementptr inbounds [2 x i32]* %p54, i32 0, i64 1
  %68 = load i32* %arrayidx74, align 4
  %cmp75 = icmp ne i32 %68, 1
  br i1 %cmp75, label %if.then76, label %if.end79

if.then76:                                        ; preds = %if.end71
  %arrayidx77 = getelementptr inbounds [2 x i32]* %p54, i32 0, i64 1
  %69 = load i32* %arrayidx77, align 4
  %call78 = call i32 @dup2(i32 %69, i32 1) #5
  br label %if.end79

if.end79:                                         ; preds = %if.then76, %if.end71
  %arrayidx80 = getelementptr inbounds [2 x i32]* %p54, i32 0, i64 1
  %70 = load i32* %arrayidx80, align 4
  %cmp81 = icmp ne i32 %70, 2
  br i1 %cmp81, label %if.then82, label %if.end85

if.then82:                                        ; preds = %if.end79
  %arrayidx83 = getelementptr inbounds [2 x i32]* %p54, i32 0, i64 1
  %71 = load i32* %arrayidx83, align 4
  %call84 = call i32 @dup2(i32 %71, i32 2) #5
  br label %if.end85

if.end85:                                         ; preds = %if.then82, %if.end79
  %arrayidx86 = getelementptr inbounds [2 x i32]* %p54, i32 0, i64 1
  %72 = load i32* %arrayidx86, align 4
  %cmp87 = icmp ne i32 %72, 1
  br i1 %cmp87, label %land.lhs.true88, label %if.end94

land.lhs.true88:                                  ; preds = %if.end85
  %arrayidx89 = getelementptr inbounds [2 x i32]* %p54, i32 0, i64 1
  %73 = load i32* %arrayidx89, align 4
  %cmp90 = icmp ne i32 %73, 2
  br i1 %cmp90, label %if.then91, label %if.end94

if.then91:                                        ; preds = %land.lhs.true88
  %arrayidx92 = getelementptr inbounds [2 x i32]* %p54, i32 0, i64 1
  %74 = load i32* %arrayidx92, align 4
  %call93 = call i32 @close(i32 %74)
  br label %if.end94

if.end94:                                         ; preds = %if.then91, %land.lhs.true88, %if.end85
  br label %if.end108

if.else95:                                        ; preds = %land.lhs.true52, %if.end48
  %75 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd96 = getelementptr inbounds %struct.httpd_conn* %75, i32 0, i32 60
  %76 = load i32* %conn_fd96, align 4
  %cmp97 = icmp ne i32 %76, 1
  br i1 %cmp97, label %if.then98, label %if.end101

if.then98:                                        ; preds = %if.else95
  %77 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd99 = getelementptr inbounds %struct.httpd_conn* %77, i32 0, i32 60
  %78 = load i32* %conn_fd99, align 4
  %call100 = call i32 @dup2(i32 %78, i32 1) #5
  br label %if.end101

if.end101:                                        ; preds = %if.then98, %if.else95
  %79 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd102 = getelementptr inbounds %struct.httpd_conn* %79, i32 0, i32 60
  %80 = load i32* %conn_fd102, align 4
  %cmp103 = icmp ne i32 %80, 2
  br i1 %cmp103, label %if.then104, label %if.end107

if.then104:                                       ; preds = %if.end101
  %81 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd105 = getelementptr inbounds %struct.httpd_conn* %81, i32 0, i32 60
  %82 = load i32* %conn_fd105, align 4
  %call106 = call i32 @dup2(i32 %82, i32 2) #5
  br label %if.end107

if.end107:                                        ; preds = %if.then104, %if.end101
  br label %if.end108

if.end108:                                        ; preds = %if.end107, %if.end94
  %call109 = call i32 @nice(i32 10) #5
  %83 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename = getelementptr inbounds %struct.httpd_conn* %83, i32 0, i32 16
  %84 = load i8** %expnfilename, align 8
  %call110 = call noalias i8* @strdup(i8* %84) #5
  store i8* %call110, i8** %directory, align 8
  %85 = load i8** %directory, align 8
  %cmp111 = icmp eq i8* %85, null
  br i1 %cmp111, label %if.then112, label %if.else114

if.then112:                                       ; preds = %if.end108
  %86 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename113 = getelementptr inbounds %struct.httpd_conn* %86, i32 0, i32 16
  %87 = load i8** %expnfilename113, align 8
  store i8* %87, i8** %binary, align 8
  br label %if.end122

if.else114:                                       ; preds = %if.end108
  %88 = load i8** %directory, align 8
  %call115 = call i8* @strrchr(i8* %88, i32 47) #8
  store i8* %call115, i8** %binary, align 8
  %89 = load i8** %binary, align 8
  %cmp116 = icmp eq i8* %89, null
  br i1 %cmp116, label %if.then117, label %if.else119

if.then117:                                       ; preds = %if.else114
  %90 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename118 = getelementptr inbounds %struct.httpd_conn* %90, i32 0, i32 16
  %91 = load i8** %expnfilename118, align 8
  store i8* %91, i8** %binary, align 8
  br label %if.end121

if.else119:                                       ; preds = %if.else114
  %92 = load i8** %binary, align 8
  %incdec.ptr = getelementptr inbounds i8* %92, i32 1
  store i8* %incdec.ptr, i8** %binary, align 8
  store i8 0, i8* %92, align 1
  %93 = load i8** %directory, align 8
  %call120 = call i32 @chdir(i8* %93) #5
  br label %if.end121

if.end121:                                        ; preds = %if.else119, %if.then117
  br label %if.end122

if.end122:                                        ; preds = %if.end121, %if.then112
  %call123 = call i32 (i32, void (i32)*, ...)* bitcast (i32 (...)* @sigset to i32 (i32, void (i32)*, ...)*)(i32 13, void (i32)* null)
  %94 = load i8** %binary, align 8
  %95 = load i8*** %argp, align 8
  %96 = load i8*** %envp, align 8
  %call124 = call i32 @execve(i8* %94, i8** %95, i8** %96) #5
  %97 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename125 = getelementptr inbounds %struct.httpd_conn* %97, i32 0, i32 16
  %98 = load i8** %expnfilename125, align 8
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([18 x i8]* @.str444, i32 0, i32 0), i8* %98)
  %99 = load %struct.httpd_conn** %hc.addr, align 8
  %100 = load i8** @err500title, align 8
  %101 = load i8** @err500form, align 8
  %102 = load %struct.httpd_conn** %hc.addr, align 8
  %encodedurl126 = getelementptr inbounds %struct.httpd_conn* %102, i32 0, i32 12
  %103 = load i8** %encodedurl126, align 8
  call void @httpd_send_err(%struct.httpd_conn* %99, i32 500, i8* %100, i8* getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), i8* %101, i8* %103)
  %104 = load %struct.httpd_conn** %hc.addr, align 8
  call void @httpd_write_response(%struct.httpd_conn* %104)
  call void @_exit(i32 1) #11
  unreachable

return:                                           ; No predecessors!
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @cgi_kill2(i8* %client_data.coerce, %struct.timeval* %nowP) #0 {
entry:
  %client_data = alloca %union.ClientData, align 8
  %nowP.addr = alloca %struct.timeval*, align 8
  %pid = alloca i32, align 4
  %coerce.dive = getelementptr %union.ClientData* %client_data, i32 0, i32 0
  store i8* %client_data.coerce, i8** %coerce.dive
  store %struct.timeval* %nowP, %struct.timeval** %nowP.addr, align 8
  %i = bitcast %union.ClientData* %client_data to i32*
  %0 = load i32* %i, align 4
  store i32 %0, i32* %pid, align 4
  %1 = load i32* %pid, align 4
  %call = call i32 @kill(i32 %1, i32 9) #5
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32* %pid, align 4
  call void (i32, i8*, ...)* @syslog(i32 4, i8* getelementptr inbounds ([27 x i8]* @.str441, i32 0, i32 0), i32 %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal i8** @make_envp(%struct.httpd_conn* %hc) #0 {
entry:
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %envn = alloca i32, align 4
  %cp = alloca i8*, align 8
  %buf = alloca [256 x i8], align 16
  %cp2 = alloca i8*, align 8
  %l = alloca i64, align 8
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  store i32 0, i32* %envn, align 4
  %call = call i8* @build_env(i8* getelementptr inbounds ([8 x i8]* @.str455, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8]* @.str456, i32 0, i32 0))
  %0 = load i32* %envn, align 4
  %inc = add nsw i32 %0, 1
  store i32 %inc, i32* %envn, align 4
  %idxprom = sext i32 %0 to i64
  %arrayidx = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom
  store i8* %call, i8** %arrayidx, align 8
  %call1 = call i8* @build_env(i8* getelementptr inbounds ([19 x i8]* @.str457, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8]* @.str8140, i32 0, i32 0))
  %1 = load i32* %envn, align 4
  %inc2 = add nsw i32 %1, 1
  store i32 %inc2, i32* %envn, align 4
  %idxprom3 = sext i32 %1 to i64
  %arrayidx4 = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom3
  store i8* %call1, i8** %arrayidx4, align 8
  %2 = load %struct.httpd_conn** %hc.addr, align 8
  %hs = getelementptr inbounds %struct.httpd_conn* %2, i32 0, i32 1
  %3 = load %struct.httpd_server** %hs, align 8
  %vhost = getelementptr inbounds %struct.httpd_server* %3, i32 0, i32 15
  %4 = load i32* %vhost, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct.httpd_conn** %hc.addr, align 8
  %hostname = getelementptr inbounds %struct.httpd_conn* %5, i32 0, i32 50
  %6 = load i8** %hostname, align 8
  %cmp = icmp ne i8* %6, null
  br i1 %cmp, label %land.lhs.true5, label %if.else

land.lhs.true5:                                   ; preds = %land.lhs.true
  %7 = load %struct.httpd_conn** %hc.addr, align 8
  %hostname6 = getelementptr inbounds %struct.httpd_conn* %7, i32 0, i32 50
  %8 = load i8** %hostname6, align 8
  %arrayidx7 = getelementptr inbounds i8* %8, i64 0
  %9 = load i8* %arrayidx7, align 1
  %conv = sext i8 %9 to i32
  %cmp8 = icmp ne i32 %conv, 0
  br i1 %cmp8, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true5
  %10 = load %struct.httpd_conn** %hc.addr, align 8
  %hostname10 = getelementptr inbounds %struct.httpd_conn* %10, i32 0, i32 50
  %11 = load i8** %hostname10, align 8
  store i8* %11, i8** %cp, align 8
  br label %if.end35

if.else:                                          ; preds = %land.lhs.true5, %land.lhs.true, %entry
  %12 = load %struct.httpd_conn** %hc.addr, align 8
  %hdrhost = getelementptr inbounds %struct.httpd_conn* %12, i32 0, i32 28
  %13 = load i8** %hdrhost, align 8
  %cmp11 = icmp ne i8* %13, null
  br i1 %cmp11, label %land.lhs.true13, label %if.else21

land.lhs.true13:                                  ; preds = %if.else
  %14 = load %struct.httpd_conn** %hc.addr, align 8
  %hdrhost14 = getelementptr inbounds %struct.httpd_conn* %14, i32 0, i32 28
  %15 = load i8** %hdrhost14, align 8
  %arrayidx15 = getelementptr inbounds i8* %15, i64 0
  %16 = load i8* %arrayidx15, align 1
  %conv16 = sext i8 %16 to i32
  %cmp17 = icmp ne i32 %conv16, 0
  br i1 %cmp17, label %if.then19, label %if.else21

if.then19:                                        ; preds = %land.lhs.true13
  %17 = load %struct.httpd_conn** %hc.addr, align 8
  %hdrhost20 = getelementptr inbounds %struct.httpd_conn* %17, i32 0, i32 28
  %18 = load i8** %hdrhost20, align 8
  store i8* %18, i8** %cp, align 8
  br label %if.end34

if.else21:                                        ; preds = %land.lhs.true13, %if.else
  %19 = load %struct.httpd_conn** %hc.addr, align 8
  %reqhost = getelementptr inbounds %struct.httpd_conn* %19, i32 0, i32 27
  %20 = load i8** %reqhost, align 8
  %cmp22 = icmp ne i8* %20, null
  br i1 %cmp22, label %land.lhs.true24, label %if.else32

land.lhs.true24:                                  ; preds = %if.else21
  %21 = load %struct.httpd_conn** %hc.addr, align 8
  %reqhost25 = getelementptr inbounds %struct.httpd_conn* %21, i32 0, i32 27
  %22 = load i8** %reqhost25, align 8
  %arrayidx26 = getelementptr inbounds i8* %22, i64 0
  %23 = load i8* %arrayidx26, align 1
  %conv27 = sext i8 %23 to i32
  %cmp28 = icmp ne i32 %conv27, 0
  br i1 %cmp28, label %if.then30, label %if.else32

if.then30:                                        ; preds = %land.lhs.true24
  %24 = load %struct.httpd_conn** %hc.addr, align 8
  %reqhost31 = getelementptr inbounds %struct.httpd_conn* %24, i32 0, i32 27
  %25 = load i8** %reqhost31, align 8
  store i8* %25, i8** %cp, align 8
  br label %if.end

if.else32:                                        ; preds = %land.lhs.true24, %if.else21
  %26 = load %struct.httpd_conn** %hc.addr, align 8
  %hs33 = getelementptr inbounds %struct.httpd_conn* %26, i32 0, i32 1
  %27 = load %struct.httpd_server** %hs33, align 8
  %server_hostname = getelementptr inbounds %struct.httpd_server* %27, i32 0, i32 1
  %28 = load i8** %server_hostname, align 8
  store i8* %28, i8** %cp, align 8
  br label %if.end

if.end:                                           ; preds = %if.else32, %if.then30
  br label %if.end34

if.end34:                                         ; preds = %if.end, %if.then19
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %if.then
  %29 = load i8** %cp, align 8
  %cmp36 = icmp ne i8* %29, null
  br i1 %cmp36, label %if.then38, label %if.end43

if.then38:                                        ; preds = %if.end35
  %30 = load i8** %cp, align 8
  %call39 = call i8* @build_env(i8* getelementptr inbounds ([15 x i8]* @.str458, i32 0, i32 0), i8* %30)
  %31 = load i32* %envn, align 4
  %inc40 = add nsw i32 %31, 1
  store i32 %inc40, i32* %envn, align 4
  %idxprom41 = sext i32 %31 to i64
  %arrayidx42 = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom41
  store i8* %call39, i8** %arrayidx42, align 8
  br label %if.end43

if.end43:                                         ; preds = %if.then38, %if.end35
  %32 = load i32* %envn, align 4
  %inc44 = add nsw i32 %32, 1
  store i32 %inc44, i32* %envn, align 4
  %idxprom45 = sext i32 %32 to i64
  %arrayidx46 = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom45
  store i8* getelementptr inbounds ([26 x i8]* @.str459, i32 0, i32 0), i8** %arrayidx46, align 8
  %33 = load %struct.httpd_conn** %hc.addr, align 8
  %protocol = getelementptr inbounds %struct.httpd_conn* %33, i32 0, i32 14
  %34 = load i8** %protocol, align 8
  %call47 = call i8* @build_env(i8* getelementptr inbounds ([19 x i8]* @.str460, i32 0, i32 0), i8* %34)
  %35 = load i32* %envn, align 4
  %inc48 = add nsw i32 %35, 1
  store i32 %inc48, i32* %envn, align 4
  %idxprom49 = sext i32 %35 to i64
  %arrayidx50 = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom49
  store i8* %call47, i8** %arrayidx50, align 8
  %arraydecay = getelementptr inbounds [256 x i8]* %buf, i32 0, i32 0
  %36 = load %struct.httpd_conn** %hc.addr, align 8
  %hs51 = getelementptr inbounds %struct.httpd_conn* %36, i32 0, i32 1
  %37 = load %struct.httpd_server** %hs51, align 8
  %port = getelementptr inbounds %struct.httpd_server* %37, i32 0, i32 2
  %38 = load i16* %port, align 2
  %conv52 = zext i16 %38 to i32
  %call53 = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %arraydecay, i64 256, i8* getelementptr inbounds ([3 x i8]* @.str461, i32 0, i32 0), i32 %conv52)
  %arraydecay54 = getelementptr inbounds [256 x i8]* %buf, i32 0, i32 0
  %call55 = call i8* @build_env(i8* getelementptr inbounds ([15 x i8]* @.str462, i32 0, i32 0), i8* %arraydecay54)
  %39 = load i32* %envn, align 4
  %inc56 = add nsw i32 %39, 1
  store i32 %inc56, i32* %envn, align 4
  %idxprom57 = sext i32 %39 to i64
  %arrayidx58 = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom57
  store i8* %call55, i8** %arrayidx58, align 8
  %40 = load %struct.httpd_conn** %hc.addr, align 8
  %method = getelementptr inbounds %struct.httpd_conn* %40, i32 0, i32 8
  %41 = load i32* %method, align 4
  %call59 = call i8* @httpd_method_str(i32 %41)
  %call60 = call i8* @build_env(i8* getelementptr inbounds ([18 x i8]* @.str463, i32 0, i32 0), i8* %call59)
  %42 = load i32* %envn, align 4
  %inc61 = add nsw i32 %42, 1
  store i32 %inc61, i32* %envn, align 4
  %idxprom62 = sext i32 %42 to i64
  %arrayidx63 = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom62
  store i8* %call60, i8** %arrayidx63, align 8
  %43 = load %struct.httpd_conn** %hc.addr, align 8
  %pathinfo = getelementptr inbounds %struct.httpd_conn* %43, i32 0, i32 18
  %44 = load i8** %pathinfo, align 8
  %arrayidx64 = getelementptr inbounds i8* %44, i64 0
  %45 = load i8* %arrayidx64, align 1
  %conv65 = sext i8 %45 to i32
  %cmp66 = icmp ne i32 %conv65, 0
  br i1 %cmp66, label %if.then68, label %if.end92

if.then68:                                        ; preds = %if.end43
  %46 = load %struct.httpd_conn** %hc.addr, align 8
  %pathinfo69 = getelementptr inbounds %struct.httpd_conn* %46, i32 0, i32 18
  %47 = load i8** %pathinfo69, align 8
  %call70 = call i8* @build_env(i8* getelementptr inbounds ([14 x i8]* @.str464, i32 0, i32 0), i8* %47)
  %48 = load i32* %envn, align 4
  %inc71 = add nsw i32 %48, 1
  store i32 %inc71, i32* %envn, align 4
  %idxprom72 = sext i32 %48 to i64
  %arrayidx73 = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom72
  store i8* %call70, i8** %arrayidx73, align 8
  %49 = load %struct.httpd_conn** %hc.addr, align 8
  %hs74 = getelementptr inbounds %struct.httpd_conn* %49, i32 0, i32 1
  %50 = load %struct.httpd_server** %hs74, align 8
  %cwd = getelementptr inbounds %struct.httpd_server* %50, i32 0, i32 9
  %51 = load i8** %cwd, align 8
  %call75 = call i64 @strlen(i8* %51) #8
  %52 = load %struct.httpd_conn** %hc.addr, align 8
  %pathinfo76 = getelementptr inbounds %struct.httpd_conn* %52, i32 0, i32 18
  %53 = load i8** %pathinfo76, align 8
  %call77 = call i64 @strlen(i8* %53) #8
  %add = add i64 %call75, %call77
  %add78 = add i64 %add, 1
  store i64 %add78, i64* %l, align 8
  %54 = load i64* %l, align 8
  %mul = mul i64 1, %54
  %call79 = call noalias i8* @malloc(i64 %mul) #5
  store i8* %call79, i8** %cp2, align 8
  %55 = load i8** %cp2, align 8
  %cmp80 = icmp ne i8* %55, null
  br i1 %cmp80, label %if.then82, label %if.end91

if.then82:                                        ; preds = %if.then68
  %56 = load i8** %cp2, align 8
  %57 = load i64* %l, align 8
  %58 = load %struct.httpd_conn** %hc.addr, align 8
  %hs83 = getelementptr inbounds %struct.httpd_conn* %58, i32 0, i32 1
  %59 = load %struct.httpd_server** %hs83, align 8
  %cwd84 = getelementptr inbounds %struct.httpd_server* %59, i32 0, i32 9
  %60 = load i8** %cwd84, align 8
  %61 = load %struct.httpd_conn** %hc.addr, align 8
  %pathinfo85 = getelementptr inbounds %struct.httpd_conn* %61, i32 0, i32 18
  %62 = load i8** %pathinfo85, align 8
  %call86 = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %56, i64 %57, i8* getelementptr inbounds ([5 x i8]* @.str465, i32 0, i32 0), i8* %60, i8* %62)
  %63 = load i8** %cp2, align 8
  %call87 = call i8* @build_env(i8* getelementptr inbounds ([19 x i8]* @.str466, i32 0, i32 0), i8* %63)
  %64 = load i32* %envn, align 4
  %inc88 = add nsw i32 %64, 1
  store i32 %inc88, i32* %envn, align 4
  %idxprom89 = sext i32 %64 to i64
  %arrayidx90 = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom89
  store i8* %call87, i8** %arrayidx90, align 8
  br label %if.end91

if.end91:                                         ; preds = %if.then82, %if.then68
  br label %if.end92

if.end92:                                         ; preds = %if.end91, %if.end43
  %65 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename = getelementptr inbounds %struct.httpd_conn* %65, i32 0, i32 15
  %66 = load i8** %origfilename, align 8
  %call93 = call i32 @strcmp(i8* %66, i8* getelementptr inbounds ([2 x i8]* @.str31175, i32 0, i32 0)) #8
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end92
  br label %cond.end

cond.false:                                       ; preds = %if.end92
  %67 = load %struct.httpd_conn** %hc.addr, align 8
  %origfilename96 = getelementptr inbounds %struct.httpd_conn* %67, i32 0, i32 15
  %68 = load i8** %origfilename96, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ getelementptr inbounds ([1 x i8]* @.str26170, i32 0, i32 0), %cond.true ], [ %68, %cond.false ]
  %call97 = call i8* @build_env(i8* getelementptr inbounds ([16 x i8]* @.str467, i32 0, i32 0), i8* %cond)
  %69 = load i32* %envn, align 4
  %inc98 = add nsw i32 %69, 1
  store i32 %inc98, i32* %envn, align 4
  %idxprom99 = sext i32 %69 to i64
  %arrayidx100 = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom99
  store i8* %call97, i8** %arrayidx100, align 8
  %70 = load %struct.httpd_conn** %hc.addr, align 8
  %query = getelementptr inbounds %struct.httpd_conn* %70, i32 0, i32 19
  %71 = load i8** %query, align 8
  %arrayidx101 = getelementptr inbounds i8* %71, i64 0
  %72 = load i8* %arrayidx101, align 1
  %conv102 = sext i8 %72 to i32
  %cmp103 = icmp ne i32 %conv102, 0
  br i1 %cmp103, label %if.then105, label %if.end111

if.then105:                                       ; preds = %cond.end
  %73 = load %struct.httpd_conn** %hc.addr, align 8
  %query106 = getelementptr inbounds %struct.httpd_conn* %73, i32 0, i32 19
  %74 = load i8** %query106, align 8
  %call107 = call i8* @build_env(i8* getelementptr inbounds ([16 x i8]* @.str468, i32 0, i32 0), i8* %74)
  %75 = load i32* %envn, align 4
  %inc108 = add nsw i32 %75, 1
  store i32 %inc108, i32* %envn, align 4
  %idxprom109 = sext i32 %75 to i64
  %arrayidx110 = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom109
  store i8* %call107, i8** %arrayidx110, align 8
  br label %if.end111

if.end111:                                        ; preds = %if.then105, %cond.end
  %76 = load %struct.httpd_conn** %hc.addr, align 8
  %client_addr = getelementptr inbounds %struct.httpd_conn* %76, i32 0, i32 2
  %call112 = call i8* @httpd_ntoa(%union.httpd_sockaddr* %client_addr)
  %call113 = call i8* @build_env(i8* getelementptr inbounds ([15 x i8]* @.str469, i32 0, i32 0), i8* %call112)
  %77 = load i32* %envn, align 4
  %inc114 = add nsw i32 %77, 1
  store i32 %inc114, i32* %envn, align 4
  %idxprom115 = sext i32 %77 to i64
  %arrayidx116 = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom115
  store i8* %call113, i8** %arrayidx116, align 8
  %78 = load %struct.httpd_conn** %hc.addr, align 8
  %referrer = getelementptr inbounds %struct.httpd_conn* %78, i32 0, i32 20
  %79 = load i8** %referrer, align 8
  %arrayidx117 = getelementptr inbounds i8* %79, i64 0
  %80 = load i8* %arrayidx117, align 1
  %conv118 = sext i8 %80 to i32
  %cmp119 = icmp ne i32 %conv118, 0
  br i1 %cmp119, label %if.then121, label %if.end132

if.then121:                                       ; preds = %if.end111
  %81 = load %struct.httpd_conn** %hc.addr, align 8
  %referrer122 = getelementptr inbounds %struct.httpd_conn* %81, i32 0, i32 20
  %82 = load i8** %referrer122, align 8
  %call123 = call i8* @build_env(i8* getelementptr inbounds ([16 x i8]* @.str470, i32 0, i32 0), i8* %82)
  %83 = load i32* %envn, align 4
  %inc124 = add nsw i32 %83, 1
  store i32 %inc124, i32* %envn, align 4
  %idxprom125 = sext i32 %83 to i64
  %arrayidx126 = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom125
  store i8* %call123, i8** %arrayidx126, align 8
  %84 = load %struct.httpd_conn** %hc.addr, align 8
  %referrer127 = getelementptr inbounds %struct.httpd_conn* %84, i32 0, i32 20
  %85 = load i8** %referrer127, align 8
  %call128 = call i8* @build_env(i8* getelementptr inbounds ([17 x i8]* @.str471, i32 0, i32 0), i8* %85)
  %86 = load i32* %envn, align 4
  %inc129 = add nsw i32 %86, 1
  store i32 %inc129, i32* %envn, align 4
  %idxprom130 = sext i32 %86 to i64
  %arrayidx131 = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom130
  store i8* %call128, i8** %arrayidx131, align 8
  br label %if.end132

if.end132:                                        ; preds = %if.then121, %if.end111
  %87 = load %struct.httpd_conn** %hc.addr, align 8
  %useragent = getelementptr inbounds %struct.httpd_conn* %87, i32 0, i32 21
  %88 = load i8** %useragent, align 8
  %arrayidx133 = getelementptr inbounds i8* %88, i64 0
  %89 = load i8* %arrayidx133, align 1
  %conv134 = sext i8 %89 to i32
  %cmp135 = icmp ne i32 %conv134, 0
  br i1 %cmp135, label %if.then137, label %if.end143

if.then137:                                       ; preds = %if.end132
  %90 = load %struct.httpd_conn** %hc.addr, align 8
  %useragent138 = getelementptr inbounds %struct.httpd_conn* %90, i32 0, i32 21
  %91 = load i8** %useragent138, align 8
  %call139 = call i8* @build_env(i8* getelementptr inbounds ([19 x i8]* @.str472, i32 0, i32 0), i8* %91)
  %92 = load i32* %envn, align 4
  %inc140 = add nsw i32 %92, 1
  store i32 %inc140, i32* %envn, align 4
  %idxprom141 = sext i32 %92 to i64
  %arrayidx142 = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom141
  store i8* %call139, i8** %arrayidx142, align 8
  br label %if.end143

if.end143:                                        ; preds = %if.then137, %if.end132
  %93 = load %struct.httpd_conn** %hc.addr, align 8
  %accept = getelementptr inbounds %struct.httpd_conn* %93, i32 0, i32 22
  %94 = load i8** %accept, align 8
  %arrayidx144 = getelementptr inbounds i8* %94, i64 0
  %95 = load i8* %arrayidx144, align 1
  %conv145 = sext i8 %95 to i32
  %cmp146 = icmp ne i32 %conv145, 0
  br i1 %cmp146, label %if.then148, label %if.end154

if.then148:                                       ; preds = %if.end143
  %96 = load %struct.httpd_conn** %hc.addr, align 8
  %accept149 = getelementptr inbounds %struct.httpd_conn* %96, i32 0, i32 22
  %97 = load i8** %accept149, align 8
  %call150 = call i8* @build_env(i8* getelementptr inbounds ([15 x i8]* @.str473, i32 0, i32 0), i8* %97)
  %98 = load i32* %envn, align 4
  %inc151 = add nsw i32 %98, 1
  store i32 %inc151, i32* %envn, align 4
  %idxprom152 = sext i32 %98 to i64
  %arrayidx153 = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom152
  store i8* %call150, i8** %arrayidx153, align 8
  br label %if.end154

if.end154:                                        ; preds = %if.then148, %if.end143
  %99 = load %struct.httpd_conn** %hc.addr, align 8
  %accepte = getelementptr inbounds %struct.httpd_conn* %99, i32 0, i32 23
  %100 = load i8** %accepte, align 8
  %arrayidx155 = getelementptr inbounds i8* %100, i64 0
  %101 = load i8* %arrayidx155, align 1
  %conv156 = sext i8 %101 to i32
  %cmp157 = icmp ne i32 %conv156, 0
  br i1 %cmp157, label %if.then159, label %if.end165

if.then159:                                       ; preds = %if.end154
  %102 = load %struct.httpd_conn** %hc.addr, align 8
  %accepte160 = getelementptr inbounds %struct.httpd_conn* %102, i32 0, i32 23
  %103 = load i8** %accepte160, align 8
  %call161 = call i8* @build_env(i8* getelementptr inbounds ([24 x i8]* @.str474, i32 0, i32 0), i8* %103)
  %104 = load i32* %envn, align 4
  %inc162 = add nsw i32 %104, 1
  store i32 %inc162, i32* %envn, align 4
  %idxprom163 = sext i32 %104 to i64
  %arrayidx164 = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom163
  store i8* %call161, i8** %arrayidx164, align 8
  br label %if.end165

if.end165:                                        ; preds = %if.then159, %if.end154
  %105 = load %struct.httpd_conn** %hc.addr, align 8
  %acceptl = getelementptr inbounds %struct.httpd_conn* %105, i32 0, i32 24
  %106 = load i8** %acceptl, align 8
  %arrayidx166 = getelementptr inbounds i8* %106, i64 0
  %107 = load i8* %arrayidx166, align 1
  %conv167 = sext i8 %107 to i32
  %cmp168 = icmp ne i32 %conv167, 0
  br i1 %cmp168, label %if.then170, label %if.end176

if.then170:                                       ; preds = %if.end165
  %108 = load %struct.httpd_conn** %hc.addr, align 8
  %acceptl171 = getelementptr inbounds %struct.httpd_conn* %108, i32 0, i32 24
  %109 = load i8** %acceptl171, align 8
  %call172 = call i8* @build_env(i8* getelementptr inbounds ([24 x i8]* @.str475, i32 0, i32 0), i8* %109)
  %110 = load i32* %envn, align 4
  %inc173 = add nsw i32 %110, 1
  store i32 %inc173, i32* %envn, align 4
  %idxprom174 = sext i32 %110 to i64
  %arrayidx175 = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom174
  store i8* %call172, i8** %arrayidx175, align 8
  br label %if.end176

if.end176:                                        ; preds = %if.then170, %if.end165
  %111 = load %struct.httpd_conn** %hc.addr, align 8
  %cookie = getelementptr inbounds %struct.httpd_conn* %111, i32 0, i32 25
  %112 = load i8** %cookie, align 8
  %arrayidx177 = getelementptr inbounds i8* %112, i64 0
  %113 = load i8* %arrayidx177, align 1
  %conv178 = sext i8 %113 to i32
  %cmp179 = icmp ne i32 %conv178, 0
  br i1 %cmp179, label %if.then181, label %if.end187

if.then181:                                       ; preds = %if.end176
  %114 = load %struct.httpd_conn** %hc.addr, align 8
  %cookie182 = getelementptr inbounds %struct.httpd_conn* %114, i32 0, i32 25
  %115 = load i8** %cookie182, align 8
  %call183 = call i8* @build_env(i8* getelementptr inbounds ([15 x i8]* @.str476, i32 0, i32 0), i8* %115)
  %116 = load i32* %envn, align 4
  %inc184 = add nsw i32 %116, 1
  store i32 %inc184, i32* %envn, align 4
  %idxprom185 = sext i32 %116 to i64
  %arrayidx186 = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom185
  store i8* %call183, i8** %arrayidx186, align 8
  br label %if.end187

if.end187:                                        ; preds = %if.then181, %if.end176
  %117 = load %struct.httpd_conn** %hc.addr, align 8
  %contenttype = getelementptr inbounds %struct.httpd_conn* %117, i32 0, i32 26
  %118 = load i8** %contenttype, align 8
  %arrayidx188 = getelementptr inbounds i8* %118, i64 0
  %119 = load i8* %arrayidx188, align 1
  %conv189 = sext i8 %119 to i32
  %cmp190 = icmp ne i32 %conv189, 0
  br i1 %cmp190, label %if.then192, label %if.end198

if.then192:                                       ; preds = %if.end187
  %120 = load %struct.httpd_conn** %hc.addr, align 8
  %contenttype193 = getelementptr inbounds %struct.httpd_conn* %120, i32 0, i32 26
  %121 = load i8** %contenttype193, align 8
  %call194 = call i8* @build_env(i8* getelementptr inbounds ([16 x i8]* @.str477, i32 0, i32 0), i8* %121)
  %122 = load i32* %envn, align 4
  %inc195 = add nsw i32 %122, 1
  store i32 %inc195, i32* %envn, align 4
  %idxprom196 = sext i32 %122 to i64
  %arrayidx197 = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom196
  store i8* %call194, i8** %arrayidx197, align 8
  br label %if.end198

if.end198:                                        ; preds = %if.then192, %if.end187
  %123 = load %struct.httpd_conn** %hc.addr, align 8
  %hdrhost199 = getelementptr inbounds %struct.httpd_conn* %123, i32 0, i32 28
  %124 = load i8** %hdrhost199, align 8
  %arrayidx200 = getelementptr inbounds i8* %124, i64 0
  %125 = load i8* %arrayidx200, align 1
  %conv201 = sext i8 %125 to i32
  %cmp202 = icmp ne i32 %conv201, 0
  br i1 %cmp202, label %if.then204, label %if.end210

if.then204:                                       ; preds = %if.end198
  %126 = load %struct.httpd_conn** %hc.addr, align 8
  %hdrhost205 = getelementptr inbounds %struct.httpd_conn* %126, i32 0, i32 28
  %127 = load i8** %hdrhost205, align 8
  %call206 = call i8* @build_env(i8* getelementptr inbounds ([13 x i8]* @.str478, i32 0, i32 0), i8* %127)
  %128 = load i32* %envn, align 4
  %inc207 = add nsw i32 %128, 1
  store i32 %inc207, i32* %envn, align 4
  %idxprom208 = sext i32 %128 to i64
  %arrayidx209 = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom208
  store i8* %call206, i8** %arrayidx209, align 8
  br label %if.end210

if.end210:                                        ; preds = %if.then204, %if.end198
  %129 = load %struct.httpd_conn** %hc.addr, align 8
  %contentlength = getelementptr inbounds %struct.httpd_conn* %129, i32 0, i32 48
  %130 = load i64* %contentlength, align 8
  %cmp211 = icmp ne i64 %130, -1
  br i1 %cmp211, label %if.then213, label %if.end222

if.then213:                                       ; preds = %if.end210
  %arraydecay214 = getelementptr inbounds [256 x i8]* %buf, i32 0, i32 0
  %131 = load %struct.httpd_conn** %hc.addr, align 8
  %contentlength215 = getelementptr inbounds %struct.httpd_conn* %131, i32 0, i32 48
  %132 = load i64* %contentlength215, align 8
  %call216 = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %arraydecay214, i64 256, i8* getelementptr inbounds ([4 x i8]* @.str479, i32 0, i32 0), i64 %132)
  %arraydecay217 = getelementptr inbounds [256 x i8]* %buf, i32 0, i32 0
  %call218 = call i8* @build_env(i8* getelementptr inbounds ([18 x i8]* @.str480, i32 0, i32 0), i8* %arraydecay217)
  %133 = load i32* %envn, align 4
  %inc219 = add nsw i32 %133, 1
  store i32 %inc219, i32* %envn, align 4
  %idxprom220 = sext i32 %133 to i64
  %arrayidx221 = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom220
  store i8* %call218, i8** %arrayidx221, align 8
  br label %if.end222

if.end222:                                        ; preds = %if.then213, %if.end210
  %134 = load %struct.httpd_conn** %hc.addr, align 8
  %remoteuser = getelementptr inbounds %struct.httpd_conn* %134, i32 0, i32 31
  %135 = load i8** %remoteuser, align 8
  %arrayidx223 = getelementptr inbounds i8* %135, i64 0
  %136 = load i8* %arrayidx223, align 1
  %conv224 = sext i8 %136 to i32
  %cmp225 = icmp ne i32 %conv224, 0
  br i1 %cmp225, label %if.then227, label %if.end233

if.then227:                                       ; preds = %if.end222
  %137 = load %struct.httpd_conn** %hc.addr, align 8
  %remoteuser228 = getelementptr inbounds %struct.httpd_conn* %137, i32 0, i32 31
  %138 = load i8** %remoteuser228, align 8
  %call229 = call i8* @build_env(i8* getelementptr inbounds ([15 x i8]* @.str481, i32 0, i32 0), i8* %138)
  %139 = load i32* %envn, align 4
  %inc230 = add nsw i32 %139, 1
  store i32 %inc230, i32* %envn, align 4
  %idxprom231 = sext i32 %139 to i64
  %arrayidx232 = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom231
  store i8* %call229, i8** %arrayidx232, align 8
  br label %if.end233

if.end233:                                        ; preds = %if.then227, %if.end222
  %140 = load %struct.httpd_conn** %hc.addr, align 8
  %authorization = getelementptr inbounds %struct.httpd_conn* %140, i32 0, i32 30
  %141 = load i8** %authorization, align 8
  %arrayidx234 = getelementptr inbounds i8* %141, i64 0
  %142 = load i8* %arrayidx234, align 1
  %conv235 = sext i8 %142 to i32
  %cmp236 = icmp ne i32 %conv235, 0
  br i1 %cmp236, label %if.then238, label %if.end243

if.then238:                                       ; preds = %if.end233
  %call239 = call i8* @build_env(i8* getelementptr inbounds ([13 x i8]* @.str482, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str483, i32 0, i32 0))
  %143 = load i32* %envn, align 4
  %inc240 = add nsw i32 %143, 1
  store i32 %inc240, i32* %envn, align 4
  %idxprom241 = sext i32 %143 to i64
  %arrayidx242 = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom241
  store i8* %call239, i8** %arrayidx242, align 8
  br label %if.end243

if.end243:                                        ; preds = %if.then238, %if.end233
  %call244 = call i8* @getenv(i8* getelementptr inbounds ([3 x i8]* @.str484, i32 0, i32 0)) #5
  %cmp245 = icmp ne i8* %call244, null
  br i1 %cmp245, label %if.then247, label %if.end253

if.then247:                                       ; preds = %if.end243
  %call248 = call i8* @getenv(i8* getelementptr inbounds ([3 x i8]* @.str484, i32 0, i32 0)) #5
  %call249 = call i8* @build_env(i8* getelementptr inbounds ([6 x i8]* @.str485, i32 0, i32 0), i8* %call248)
  %144 = load i32* %envn, align 4
  %inc250 = add nsw i32 %144, 1
  store i32 %inc250, i32* %envn, align 4
  %idxprom251 = sext i32 %144 to i64
  %arrayidx252 = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom251
  store i8* %call249, i8** %arrayidx252, align 8
  br label %if.end253

if.end253:                                        ; preds = %if.then247, %if.end243
  %145 = load %struct.httpd_conn** %hc.addr, align 8
  %hs254 = getelementptr inbounds %struct.httpd_conn* %145, i32 0, i32 1
  %146 = load %struct.httpd_server** %hs254, align 8
  %cgi_pattern = getelementptr inbounds %struct.httpd_server* %146, i32 0, i32 3
  %147 = load i8** %cgi_pattern, align 8
  %call255 = call i8* @build_env(i8* getelementptr inbounds ([15 x i8]* @.str486, i32 0, i32 0), i8* %147)
  %148 = load i32* %envn, align 4
  %inc256 = add nsw i32 %148, 1
  store i32 %inc256, i32* %envn, align 4
  %idxprom257 = sext i32 %148 to i64
  %arrayidx258 = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom257
  store i8* %call255, i8** %arrayidx258, align 8
  %149 = load i32* %envn, align 4
  %idxprom259 = sext i32 %149 to i64
  %arrayidx260 = getelementptr inbounds [50 x i8*]* @make_envp.envp, i32 0, i64 %idxprom259
  store i8* null, i8** %arrayidx260, align 8
  ret i8** getelementptr inbounds ([50 x i8*]* @make_envp.envp, i32 0, i32 0)
}

; Function Attrs: nounwind uwtable
define internal i8** @make_argp(%struct.httpd_conn* %hc) #0 {
entry:
  %retval = alloca i8**, align 8
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %argp = alloca i8**, align 8
  %argn = alloca i32, align 4
  %cp1 = alloca i8*, align 8
  %cp2 = alloca i8*, align 8
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  %0 = load %struct.httpd_conn** %hc.addr, align 8
  %query = getelementptr inbounds %struct.httpd_conn* %0, i32 0, i32 19
  %1 = load i8** %query, align 8
  %call = call i64 @strlen(i8* %1) #8
  %add = add i64 %call, 2
  %mul = mul i64 8, %add
  %call1 = call noalias i8* @malloc(i64 %mul) #5
  %2 = bitcast i8* %call1 to i8**
  store i8** %2, i8*** %argp, align 8
  %3 = load i8*** %argp, align 8
  %cmp = icmp eq i8** %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8** null, i8*** %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename = getelementptr inbounds %struct.httpd_conn* %4, i32 0, i32 16
  %5 = load i8** %expnfilename, align 8
  %call2 = call i8* @strrchr(i8* %5, i32 47) #8
  %6 = load i8*** %argp, align 8
  %arrayidx = getelementptr inbounds i8** %6, i64 0
  store i8* %call2, i8** %arrayidx, align 8
  %7 = load i8*** %argp, align 8
  %arrayidx3 = getelementptr inbounds i8** %7, i64 0
  %8 = load i8** %arrayidx3, align 8
  %cmp4 = icmp ne i8* %8, null
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  %9 = load i8*** %argp, align 8
  %arrayidx6 = getelementptr inbounds i8** %9, i64 0
  %10 = load i8** %arrayidx6, align 8
  %incdec.ptr = getelementptr inbounds i8* %10, i32 1
  store i8* %incdec.ptr, i8** %arrayidx6, align 8
  br label %if.end9

if.else:                                          ; preds = %if.end
  %11 = load %struct.httpd_conn** %hc.addr, align 8
  %expnfilename7 = getelementptr inbounds %struct.httpd_conn* %11, i32 0, i32 16
  %12 = load i8** %expnfilename7, align 8
  %13 = load i8*** %argp, align 8
  %arrayidx8 = getelementptr inbounds i8** %13, i64 0
  store i8* %12, i8** %arrayidx8, align 8
  br label %if.end9

if.end9:                                          ; preds = %if.else, %if.then5
  store i32 1, i32* %argn, align 4
  %14 = load %struct.httpd_conn** %hc.addr, align 8
  %query10 = getelementptr inbounds %struct.httpd_conn* %14, i32 0, i32 19
  %15 = load i8** %query10, align 8
  %call11 = call i8* @strchr(i8* %15, i32 61) #8
  %cmp12 = icmp eq i8* %call11, null
  br i1 %cmp12, label %if.then13, label %if.end31

if.then13:                                        ; preds = %if.end9
  %16 = load %struct.httpd_conn** %hc.addr, align 8
  %query14 = getelementptr inbounds %struct.httpd_conn* %16, i32 0, i32 19
  %17 = load i8** %query14, align 8
  store i8* %17, i8** %cp2, align 8
  store i8* %17, i8** %cp1, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then13
  %18 = load i8** %cp2, align 8
  %19 = load i8* %18, align 1
  %conv = sext i8 %19 to i32
  %cmp15 = icmp ne i32 %conv, 0
  br i1 %cmp15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %20 = load i8** %cp2, align 8
  %21 = load i8* %20, align 1
  %conv17 = sext i8 %21 to i32
  %cmp18 = icmp eq i32 %conv17, 43
  br i1 %cmp18, label %if.then20, label %if.end22

if.then20:                                        ; preds = %for.body
  %22 = load i8** %cp2, align 8
  store i8 0, i8* %22, align 1
  %23 = load i8** %cp1, align 8
  %24 = load i8** %cp1, align 8
  call void @strdecode(i8* %23, i8* %24)
  %25 = load i8** %cp1, align 8
  %26 = load i32* %argn, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %argn, align 4
  %idxprom = sext i32 %26 to i64
  %27 = load i8*** %argp, align 8
  %arrayidx21 = getelementptr inbounds i8** %27, i64 %idxprom
  store i8* %25, i8** %arrayidx21, align 8
  %28 = load i8** %cp2, align 8
  %add.ptr = getelementptr inbounds i8* %28, i64 1
  store i8* %add.ptr, i8** %cp1, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.then20, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end22
  %29 = load i8** %cp2, align 8
  %incdec.ptr23 = getelementptr inbounds i8* %29, i32 1
  store i8* %incdec.ptr23, i8** %cp2, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %30 = load i8** %cp2, align 8
  %31 = load i8** %cp1, align 8
  %cmp24 = icmp ne i8* %30, %31
  br i1 %cmp24, label %if.then26, label %if.end30

if.then26:                                        ; preds = %for.end
  %32 = load i8** %cp1, align 8
  %33 = load i8** %cp1, align 8
  call void @strdecode(i8* %32, i8* %33)
  %34 = load i8** %cp1, align 8
  %35 = load i32* %argn, align 4
  %inc27 = add nsw i32 %35, 1
  store i32 %inc27, i32* %argn, align 4
  %idxprom28 = sext i32 %35 to i64
  %36 = load i8*** %argp, align 8
  %arrayidx29 = getelementptr inbounds i8** %36, i64 %idxprom28
  store i8* %34, i8** %arrayidx29, align 8
  br label %if.end30

if.end30:                                         ; preds = %if.then26, %for.end
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %if.end9
  %37 = load i32* %argn, align 4
  %idxprom32 = sext i32 %37 to i64
  %38 = load i8*** %argp, align 8
  %arrayidx33 = getelementptr inbounds i8** %38, i64 %idxprom32
  store i8* null, i8** %arrayidx33, align 8
  %39 = load i8*** %argp, align 8
  store i8** %39, i8*** %retval
  br label %return

return:                                           ; preds = %if.end31, %if.then
  %40 = load i8*** %retval
  ret i8** %40
}

; Function Attrs: nounwind uwtable
define internal void @cgi_interpose_input(%struct.httpd_conn* %hc, i32 %wfd) #0 {
entry:
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %wfd.addr = alloca i32, align 4
  %c = alloca i64, align 8
  %r = alloca i64, align 8
  %buf = alloca [1024 x i8], align 16
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  store i32 %wfd, i32* %wfd.addr, align 4
  %0 = load %struct.httpd_conn** %hc.addr, align 8
  %read_idx = getelementptr inbounds %struct.httpd_conn* %0, i32 0, i32 5
  %1 = load i64* %read_idx, align 8
  %2 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_idx = getelementptr inbounds %struct.httpd_conn* %2, i32 0, i32 6
  %3 = load i64* %checked_idx, align 8
  %sub = sub i64 %1, %3
  store i64 %sub, i64* %c, align 8
  %4 = load i64* %c, align 8
  %cmp = icmp ugt i64 %4, 0
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %entry
  %5 = load i32* %wfd.addr, align 4
  %6 = load %struct.httpd_conn** %hc.addr, align 8
  %checked_idx1 = getelementptr inbounds %struct.httpd_conn* %6, i32 0, i32 6
  %7 = load i64* %checked_idx1, align 8
  %8 = load %struct.httpd_conn** %hc.addr, align 8
  %read_buf = getelementptr inbounds %struct.httpd_conn* %8, i32 0, i32 3
  %9 = load i8** %read_buf, align 8
  %arrayidx = getelementptr inbounds i8* %9, i64 %7
  %10 = load i64* %c, align 8
  %call = call i32 @httpd_write_fully(i32 %5, i8* %arrayidx, i64 %10)
  %conv = sext i32 %call to i64
  %11 = load i64* %c, align 8
  %cmp2 = icmp ne i64 %conv, %11
  br i1 %cmp2, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.then
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end5

if.end5:                                          ; preds = %if.end, %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end36, %if.then23, %if.end5
  %12 = load i64* %c, align 8
  %13 = load %struct.httpd_conn** %hc.addr, align 8
  %contentlength = getelementptr inbounds %struct.httpd_conn* %13, i32 0, i32 48
  %14 = load i64* %contentlength, align 8
  %cmp6 = icmp ult i64 %12, %14
  br i1 %cmp6, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %15 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd = getelementptr inbounds %struct.httpd_conn* %15, i32 0, i32 60
  %16 = load i32* %conn_fd, align 4
  %arraydecay = getelementptr inbounds [1024 x i8]* %buf, i32 0, i32 0
  %17 = load %struct.httpd_conn** %hc.addr, align 8
  %contentlength8 = getelementptr inbounds %struct.httpd_conn* %17, i32 0, i32 48
  %18 = load i64* %contentlength8, align 8
  %19 = load i64* %c, align 8
  %sub9 = sub i64 %18, %19
  %cmp10 = icmp ult i64 1024, %sub9
  br i1 %cmp10, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %20 = load %struct.httpd_conn** %hc.addr, align 8
  %contentlength12 = getelementptr inbounds %struct.httpd_conn* %20, i32 0, i32 48
  %21 = load i64* %contentlength12, align 8
  %22 = load i64* %c, align 8
  %sub13 = sub i64 %21, %22
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 1024, %cond.true ], [ %sub13, %cond.false ]
  %call14 = call i64 @read(i32 %16, i8* %arraydecay, i64 %cond)
  store i64 %call14, i64* %r, align 8
  %23 = load i64* %r, align 8
  %cmp15 = icmp slt i64 %23, 0
  br i1 %cmp15, label %land.lhs.true, label %if.end25

land.lhs.true:                                    ; preds = %cond.end
  %call17 = call i32* @__errno_location() #10
  %24 = load i32* %call17, align 4
  %cmp18 = icmp eq i32 %24, 4
  br i1 %cmp18, label %if.then23, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %call20 = call i32* @__errno_location() #10
  %25 = load i32* %call20, align 4
  %cmp21 = icmp eq i32 %25, 11
  br i1 %cmp21, label %if.then23, label %if.end25

if.then23:                                        ; preds = %lor.lhs.false, %land.lhs.true
  %call24 = call i32 @sleep(i32 1)
  br label %while.cond

if.end25:                                         ; preds = %lor.lhs.false, %cond.end
  %26 = load i64* %r, align 8
  %cmp26 = icmp sle i64 %26, 0
  br i1 %cmp26, label %if.then28, label %if.end29

if.then28:                                        ; preds = %if.end25
  br label %return

if.end29:                                         ; preds = %if.end25
  %27 = load i32* %wfd.addr, align 4
  %arraydecay30 = getelementptr inbounds [1024 x i8]* %buf, i32 0, i32 0
  %28 = load i64* %r, align 8
  %call31 = call i32 @httpd_write_fully(i32 %27, i8* %arraydecay30, i64 %28)
  %conv32 = sext i32 %call31 to i64
  %29 = load i64* %r, align 8
  %cmp33 = icmp ne i64 %conv32, %29
  br i1 %cmp33, label %if.then35, label %if.end36

if.then35:                                        ; preds = %if.end29
  br label %return

if.end36:                                         ; preds = %if.end29
  %30 = load i64* %r, align 8
  %31 = load i64* %c, align 8
  %add = add i64 %31, %30
  store i64 %add, i64* %c, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %32 = load %struct.httpd_conn** %hc.addr, align 8
  call void @post_post_garbage_hack(%struct.httpd_conn* %32)
  br label %return

return:                                           ; preds = %while.end, %if.then35, %if.then28, %if.then4
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @cgi_interpose_output(%struct.httpd_conn* %hc, i32 %rfd) #0 {
entry:
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %rfd.addr = alloca i32, align 4
  %r = alloca i32, align 4
  %buf = alloca [1024 x i8], align 16
  %headers_size = alloca i64, align 8
  %headers_len = alloca i64, align 8
  %headers = alloca i8*, align 8
  %br = alloca i8*, align 8
  %status = alloca i32, align 4
  %title = alloca i8*, align 8
  %cp = alloca i8*, align 8
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  store i32 %rfd, i32* %rfd.addr, align 4
  %0 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd = getelementptr inbounds %struct.httpd_conn* %0, i32 0, i32 60
  %1 = load i32* %conn_fd, align 4
  call void @httpd_clear_ndelay(i32 %1)
  store i64 0, i64* %headers_size, align 8
  call void @httpd_realloc_str(i8** %headers, i64* %headers_size, i64 500)
  store i64 0, i64* %headers_len, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end27, %if.then, %entry
  %2 = load i32* %rfd.addr, align 4
  %arraydecay = getelementptr inbounds [1024 x i8]* %buf, i32 0, i32 0
  %call = call i64 @read(i32 %2, i8* %arraydecay, i64 1024)
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %r, align 4
  %3 = load i32* %r, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.cond
  %call2 = call i32* @__errno_location() #10
  %4 = load i32* %call2, align 4
  %cmp3 = icmp eq i32 %4, 4
  br i1 %cmp3, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %call5 = call i32* @__errno_location() #10
  %5 = load i32* %call5, align 4
  %cmp6 = icmp eq i32 %5, 11
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %call8 = call i32 @sleep(i32 1)
  br label %for.cond

if.end:                                           ; preds = %lor.lhs.false, %for.cond
  %6 = load i32* %r, align 4
  %cmp9 = icmp sle i32 %6, 0
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end
  %7 = load i64* %headers_len, align 8
  %8 = load i8** %headers, align 8
  %arrayidx = getelementptr inbounds i8* %8, i64 %7
  store i8* %arrayidx, i8** %br, align 8
  br label %for.end

if.end12:                                         ; preds = %if.end
  %9 = load i64* %headers_len, align 8
  %10 = load i32* %r, align 4
  %conv13 = sext i32 %10 to i64
  %add = add i64 %9, %conv13
  call void @httpd_realloc_str(i8** %headers, i64* %headers_size, i64 %add)
  %11 = load i64* %headers_len, align 8
  %12 = load i8** %headers, align 8
  %arrayidx14 = getelementptr inbounds i8* %12, i64 %11
  %13 = bitcast [1024 x i8]* %buf to i8*
  %14 = load i32* %r, align 4
  %conv15 = sext i32 %14 to i64
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %arrayidx14, i8* %13, i64 %conv15, i32 1, i1 false)
  %15 = load i32* %r, align 4
  %conv16 = sext i32 %15 to i64
  %16 = load i64* %headers_len, align 8
  %add17 = add i64 %16, %conv16
  store i64 %add17, i64* %headers_len, align 8
  %17 = load i64* %headers_len, align 8
  %18 = load i8** %headers, align 8
  %arrayidx18 = getelementptr inbounds i8* %18, i64 %17
  store i8 0, i8* %arrayidx18, align 1
  %19 = load i8** %headers, align 8
  %call19 = call i8* @strstr(i8* %19, i8* getelementptr inbounds ([5 x i8]* @.str445, i32 0, i32 0)) #8
  store i8* %call19, i8** %br, align 8
  %cmp20 = icmp ne i8* %call19, null
  br i1 %cmp20, label %if.then26, label %lor.lhs.false22

lor.lhs.false22:                                  ; preds = %if.end12
  %20 = load i8** %headers, align 8
  %call23 = call i8* @strstr(i8* %20, i8* getelementptr inbounds ([3 x i8]* @.str446, i32 0, i32 0)) #8
  store i8* %call23, i8** %br, align 8
  %cmp24 = icmp ne i8* %call23, null
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %lor.lhs.false22, %if.end12
  br label %for.end

if.end27:                                         ; preds = %lor.lhs.false22
  br label %for.cond

for.end:                                          ; preds = %if.then26, %if.then11
  %21 = load i8** %headers, align 8
  %arrayidx28 = getelementptr inbounds i8* %21, i64 0
  %22 = load i8* %arrayidx28, align 1
  %conv29 = sext i8 %22 to i32
  %cmp30 = icmp eq i32 %conv29, 0
  br i1 %cmp30, label %if.then32, label %if.end33

if.then32:                                        ; preds = %for.end
  br label %return

if.end33:                                         ; preds = %for.end
  store i32 200, i32* %status, align 4
  %23 = load i8** %headers, align 8
  %call34 = call i32 @strncmp(i8* %23, i8* getelementptr inbounds ([6 x i8]* @.str447, i32 0, i32 0), i64 5) #8
  %cmp35 = icmp eq i32 %call34, 0
  br i1 %cmp35, label %if.then37, label %if.end40

if.then37:                                        ; preds = %if.end33
  %24 = load i8** %headers, align 8
  store i8* %24, i8** %cp, align 8
  %25 = load i8** %cp, align 8
  %call38 = call i64 @strcspn(i8* %25, i8* getelementptr inbounds ([3 x i8]* @.str33177, i32 0, i32 0)) #8
  %26 = load i8** %cp, align 8
  %add.ptr = getelementptr inbounds i8* %26, i64 %call38
  store i8* %add.ptr, i8** %cp, align 8
  %27 = load i8** %cp, align 8
  %call39 = call i32 @atoi(i8* %27) #8
  store i32 %call39, i32* %status, align 4
  br label %if.end40

if.end40:                                         ; preds = %if.then37, %if.end33
  %28 = load i8** %headers, align 8
  %call41 = call i8* @strstr(i8* %28, i8* getelementptr inbounds ([10 x i8]* @.str448, i32 0, i32 0)) #8
  store i8* %call41, i8** %cp, align 8
  %cmp42 = icmp ne i8* %call41, null
  br i1 %cmp42, label %land.lhs.true44, label %if.end56

land.lhs.true44:                                  ; preds = %if.end40
  %29 = load i8** %cp, align 8
  %30 = load i8** %br, align 8
  %cmp45 = icmp ult i8* %29, %30
  br i1 %cmp45, label %land.lhs.true47, label %if.end56

land.lhs.true47:                                  ; preds = %land.lhs.true44
  %31 = load i8** %cp, align 8
  %32 = load i8** %headers, align 8
  %cmp48 = icmp eq i8* %31, %32
  br i1 %cmp48, label %if.then55, label %lor.lhs.false50

lor.lhs.false50:                                  ; preds = %land.lhs.true47
  %33 = load i8** %cp, align 8
  %add.ptr51 = getelementptr inbounds i8* %33, i64 -1
  %34 = load i8* %add.ptr51, align 1
  %conv52 = sext i8 %34 to i32
  %cmp53 = icmp eq i32 %conv52, 10
  br i1 %cmp53, label %if.then55, label %if.end56

if.then55:                                        ; preds = %lor.lhs.false50, %land.lhs.true47
  store i32 302, i32* %status, align 4
  br label %if.end56

if.end56:                                         ; preds = %if.then55, %lor.lhs.false50, %land.lhs.true44, %if.end40
  %35 = load i8** %headers, align 8
  %call57 = call i8* @strstr(i8* %35, i8* getelementptr inbounds ([8 x i8]* @.str449, i32 0, i32 0)) #8
  store i8* %call57, i8** %cp, align 8
  %cmp58 = icmp ne i8* %call57, null
  br i1 %cmp58, label %land.lhs.true60, label %if.end76

land.lhs.true60:                                  ; preds = %if.end56
  %36 = load i8** %cp, align 8
  %37 = load i8** %br, align 8
  %cmp61 = icmp ult i8* %36, %37
  br i1 %cmp61, label %land.lhs.true63, label %if.end76

land.lhs.true63:                                  ; preds = %land.lhs.true60
  %38 = load i8** %cp, align 8
  %39 = load i8** %headers, align 8
  %cmp64 = icmp eq i8* %38, %39
  br i1 %cmp64, label %if.then71, label %lor.lhs.false66

lor.lhs.false66:                                  ; preds = %land.lhs.true63
  %40 = load i8** %cp, align 8
  %add.ptr67 = getelementptr inbounds i8* %40, i64 -1
  %41 = load i8* %add.ptr67, align 1
  %conv68 = sext i8 %41 to i32
  %cmp69 = icmp eq i32 %conv68, 10
  br i1 %cmp69, label %if.then71, label %if.end76

if.then71:                                        ; preds = %lor.lhs.false66, %land.lhs.true63
  %42 = load i8** %cp, align 8
  %add.ptr72 = getelementptr inbounds i8* %42, i64 7
  store i8* %add.ptr72, i8** %cp, align 8
  %43 = load i8** %cp, align 8
  %call73 = call i64 @strspn(i8* %43, i8* getelementptr inbounds ([3 x i8]* @.str33177, i32 0, i32 0)) #8
  %44 = load i8** %cp, align 8
  %add.ptr74 = getelementptr inbounds i8* %44, i64 %call73
  store i8* %add.ptr74, i8** %cp, align 8
  %45 = load i8** %cp, align 8
  %call75 = call i32 @atoi(i8* %45) #8
  store i32 %call75, i32* %status, align 4
  br label %if.end76

if.end76:                                         ; preds = %if.then71, %lor.lhs.false66, %land.lhs.true60, %if.end56
  %46 = load i32* %status, align 4
  switch i32 %46, label %sw.default [
    i32 200, label %sw.bb
    i32 302, label %sw.bb77
    i32 304, label %sw.bb78
    i32 400, label %sw.bb79
    i32 401, label %sw.bb80
    i32 403, label %sw.bb81
    i32 404, label %sw.bb82
    i32 408, label %sw.bb83
    i32 451, label %sw.bb84
    i32 500, label %sw.bb85
    i32 501, label %sw.bb86
    i32 503, label %sw.bb87
  ]

sw.bb:                                            ; preds = %if.end76
  %47 = load i8** @ok200title, align 8
  store i8* %47, i8** %title, align 8
  br label %sw.epilog

sw.bb77:                                          ; preds = %if.end76
  %48 = load i8** @err302title, align 8
  store i8* %48, i8** %title, align 8
  br label %sw.epilog

sw.bb78:                                          ; preds = %if.end76
  %49 = load i8** @err304title, align 8
  store i8* %49, i8** %title, align 8
  br label %sw.epilog

sw.bb79:                                          ; preds = %if.end76
  %50 = load i8** @httpd_err400title, align 8
  store i8* %50, i8** %title, align 8
  br label %sw.epilog

sw.bb80:                                          ; preds = %if.end76
  %51 = load i8** @err401title, align 8
  store i8* %51, i8** %title, align 8
  br label %sw.epilog

sw.bb81:                                          ; preds = %if.end76
  %52 = load i8** @err403title, align 8
  store i8* %52, i8** %title, align 8
  br label %sw.epilog

sw.bb82:                                          ; preds = %if.end76
  %53 = load i8** @err404title, align 8
  store i8* %53, i8** %title, align 8
  br label %sw.epilog

sw.bb83:                                          ; preds = %if.end76
  %54 = load i8** @httpd_err408title, align 8
  store i8* %54, i8** %title, align 8
  br label %sw.epilog

sw.bb84:                                          ; preds = %if.end76
  %55 = load i8** @err451title, align 8
  store i8* %55, i8** %title, align 8
  br label %sw.epilog

sw.bb85:                                          ; preds = %if.end76
  %56 = load i8** @err500title, align 8
  store i8* %56, i8** %title, align 8
  br label %sw.epilog

sw.bb86:                                          ; preds = %if.end76
  %57 = load i8** @err501title, align 8
  store i8* %57, i8** %title, align 8
  br label %sw.epilog

sw.bb87:                                          ; preds = %if.end76
  %58 = load i8** @httpd_err503title, align 8
  store i8* %58, i8** %title, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %if.end76
  store i8* getelementptr inbounds ([10 x i8]* @.str450, i32 0, i32 0), i8** %title, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb87, %sw.bb86, %sw.bb85, %sw.bb84, %sw.bb83, %sw.bb82, %sw.bb81, %sw.bb80, %sw.bb79, %sw.bb78, %sw.bb77, %sw.bb
  %arraydecay88 = getelementptr inbounds [1024 x i8]* %buf, i32 0, i32 0
  %59 = load i32* %status, align 4
  %60 = load i8** %title, align 8
  %call89 = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %arraydecay88, i64 1024, i8* getelementptr inbounds ([17 x i8]* @.str451, i32 0, i32 0), i32 %59, i8* %60)
  %61 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd90 = getelementptr inbounds %struct.httpd_conn* %61, i32 0, i32 60
  %62 = load i32* %conn_fd90, align 4
  %arraydecay91 = getelementptr inbounds [1024 x i8]* %buf, i32 0, i32 0
  %arraydecay92 = getelementptr inbounds [1024 x i8]* %buf, i32 0, i32 0
  %call93 = call i64 @strlen(i8* %arraydecay92) #8
  %call94 = call i32 @httpd_write_fully(i32 %62, i8* %arraydecay91, i64 %call93)
  %63 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd95 = getelementptr inbounds %struct.httpd_conn* %63, i32 0, i32 60
  %64 = load i32* %conn_fd95, align 4
  %65 = load i8** %headers, align 8
  %66 = load i64* %headers_len, align 8
  %call96 = call i32 @httpd_write_fully(i32 %64, i8* %65, i64 %66)
  br label %for.cond97

for.cond97:                                       ; preds = %if.end125, %if.then111, %sw.epilog
  %67 = load i32* %rfd.addr, align 4
  %arraydecay98 = getelementptr inbounds [1024 x i8]* %buf, i32 0, i32 0
  %call99 = call i64 @read(i32 %67, i8* %arraydecay98, i64 1024)
  %conv100 = trunc i64 %call99 to i32
  store i32 %conv100, i32* %r, align 4
  %68 = load i32* %r, align 4
  %cmp101 = icmp slt i32 %68, 0
  br i1 %cmp101, label %land.lhs.true103, label %if.end113

land.lhs.true103:                                 ; preds = %for.cond97
  %call104 = call i32* @__errno_location() #10
  %69 = load i32* %call104, align 4
  %cmp105 = icmp eq i32 %69, 4
  br i1 %cmp105, label %if.then111, label %lor.lhs.false107

lor.lhs.false107:                                 ; preds = %land.lhs.true103
  %call108 = call i32* @__errno_location() #10
  %70 = load i32* %call108, align 4
  %cmp109 = icmp eq i32 %70, 11
  br i1 %cmp109, label %if.then111, label %if.end113

if.then111:                                       ; preds = %lor.lhs.false107, %land.lhs.true103
  %call112 = call i32 @sleep(i32 1)
  br label %for.cond97

if.end113:                                        ; preds = %lor.lhs.false107, %for.cond97
  %71 = load i32* %r, align 4
  %cmp114 = icmp sle i32 %71, 0
  br i1 %cmp114, label %if.then116, label %if.end117

if.then116:                                       ; preds = %if.end113
  br label %for.end126

if.end117:                                        ; preds = %if.end113
  %72 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd118 = getelementptr inbounds %struct.httpd_conn* %72, i32 0, i32 60
  %73 = load i32* %conn_fd118, align 4
  %arraydecay119 = getelementptr inbounds [1024 x i8]* %buf, i32 0, i32 0
  %74 = load i32* %r, align 4
  %conv120 = sext i32 %74 to i64
  %call121 = call i32 @httpd_write_fully(i32 %73, i8* %arraydecay119, i64 %conv120)
  %75 = load i32* %r, align 4
  %cmp122 = icmp ne i32 %call121, %75
  br i1 %cmp122, label %if.then124, label %if.end125

if.then124:                                       ; preds = %if.end117
  br label %for.end126

if.end125:                                        ; preds = %if.end117
  br label %for.cond97

for.end126:                                       ; preds = %if.then124, %if.then116
  %76 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd127 = getelementptr inbounds %struct.httpd_conn* %76, i32 0, i32 60
  %77 = load i32* %conn_fd127, align 4
  %call128 = call i32 @shutdown(i32 %77, i32 1) #5
  br label %return

return:                                           ; preds = %for.end126, %if.then32
  ret void
}

; Function Attrs: nounwind uwtable
define internal i8* @build_env(i8* %fmt, i8* %arg) #0 {
entry:
  %fmt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %cp = alloca i8*, align 8
  %size = alloca i64, align 8
  store i8* %fmt, i8** %fmt.addr, align 8
  store i8* %arg, i8** %arg.addr, align 8
  %0 = load i8** %fmt.addr, align 8
  %call = call i64 @strlen(i8* %0) #8
  %1 = load i8** %arg.addr, align 8
  %call1 = call i64 @strlen(i8* %1) #8
  %add = add i64 %call, %call1
  store i64 %add, i64* %size, align 8
  %2 = load i64* %size, align 8
  %3 = load i64* @build_env.maxbuf, align 8
  %cmp = icmp ugt i64 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i64* %size, align 8
  call void @httpd_realloc_str(i8** @build_env.buf, i64* @build_env.maxbuf, i64 %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i8** @build_env.buf, align 8
  %6 = load i64* @build_env.maxbuf, align 8
  %7 = load i8** %fmt.addr, align 8
  %8 = load i8** %arg.addr, align 8
  %call2 = call i32 (i8*, i64, i8*, ...)* @my_snprintf(i8* %5, i64 %6, i8* %7, i8* %8)
  %9 = load i8** @build_env.buf, align 8
  %call3 = call noalias i8* @strdup(i8* %9) #5
  store i8* %call3, i8** %cp, align 8
  %10 = load i8** %cp, align 8
  %cmp4 = icmp eq i8* %10, null
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([43 x i8]* @.str487, i32 0, i32 0))
  call void @exit(i32 1) #9
  unreachable

if.end6:                                          ; preds = %if.end
  %11 = load i8** %cp, align 8
  ret i8* %11
}

; Function Attrs: nounwind uwtable
define internal void @post_post_garbage_hack(%struct.httpd_conn* %hc) #0 {
entry:
  %hc.addr = alloca %struct.httpd_conn*, align 8
  %buf = alloca [2 x i8], align 1
  store %struct.httpd_conn* %hc, %struct.httpd_conn** %hc.addr, align 8
  %0 = load i32* @sub_process, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd = getelementptr inbounds %struct.httpd_conn* %1, i32 0, i32 60
  %2 = load i32* %conn_fd, align 4
  call void @httpd_set_ndelay(i32 %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.httpd_conn** %hc.addr, align 8
  %conn_fd1 = getelementptr inbounds %struct.httpd_conn* %3, i32 0, i32 60
  %4 = load i32* %conn_fd1, align 4
  %arraydecay = getelementptr inbounds [2 x i8]* %buf, i32 0, i32 0
  %call = call i64 @read(i32 %4, i8* %arraydecay, i64 2)
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @fdwatch_get_nfiles() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %rl = alloca %struct.rlimit, align 8
  %call = call i32 @getdtablesize() #5
  store i32 %call, i32* @nfiles, align 4
  %call1 = call i32 @getrlimit(i32 7, %struct.rlimit* %rl) #5
  %cmp = icmp eq i32 %call1, 0
  br i1 %cmp, label %if.then, label %if.end21

if.then:                                          ; preds = %entry
  %rlim_cur = getelementptr inbounds %struct.rlimit* %rl, i32 0, i32 0
  %0 = load i64* %rlim_cur, align 8
  %conv = trunc i64 %0 to i32
  store i32 %conv, i32* @nfiles, align 4
  %rlim_max = getelementptr inbounds %struct.rlimit* %rl, i32 0, i32 1
  %1 = load i64* %rlim_max, align 8
  %cmp2 = icmp eq i64 %1, -1
  br i1 %cmp2, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.then
  %rlim_cur5 = getelementptr inbounds %struct.rlimit* %rl, i32 0, i32 0
  store i64 8192, i64* %rlim_cur5, align 8
  br label %if.end13

if.else:                                          ; preds = %if.then
  %rlim_max6 = getelementptr inbounds %struct.rlimit* %rl, i32 0, i32 1
  %2 = load i64* %rlim_max6, align 8
  %rlim_cur7 = getelementptr inbounds %struct.rlimit* %rl, i32 0, i32 0
  %3 = load i64* %rlim_cur7, align 8
  %cmp8 = icmp ugt i64 %2, %3
  br i1 %cmp8, label %if.then10, label %if.end

if.then10:                                        ; preds = %if.else
  %rlim_max11 = getelementptr inbounds %struct.rlimit* %rl, i32 0, i32 1
  %4 = load i64* %rlim_max11, align 8
  %rlim_cur12 = getelementptr inbounds %struct.rlimit* %rl, i32 0, i32 0
  store i64 %4, i64* %rlim_cur12, align 8
  br label %if.end

if.end:                                           ; preds = %if.then10, %if.else
  br label %if.end13

if.end13:                                         ; preds = %if.end, %if.then4
  %call14 = call i32 @setrlimit(i32 7, %struct.rlimit* %rl) #5
  %cmp15 = icmp eq i32 %call14, 0
  br i1 %cmp15, label %if.then17, label %if.end20

if.then17:                                        ; preds = %if.end13
  %rlim_cur18 = getelementptr inbounds %struct.rlimit* %rl, i32 0, i32 0
  %5 = load i64* %rlim_cur18, align 8
  %conv19 = trunc i64 %5 to i32
  store i32 %conv19, i32* @nfiles, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.then17, %if.end13
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %entry
  store i64 0, i64* @nwatches, align 8
  %6 = load i32* @nfiles, align 4
  %conv22 = sext i32 %6 to i64
  %mul = mul i64 4, %conv22
  %call23 = call noalias i8* @malloc(i64 %mul) #5
  %7 = bitcast i8* %call23 to i32*
  store i32* %7, i32** @fd_rw, align 8
  %8 = load i32* @nfiles, align 4
  %conv24 = sext i32 %8 to i64
  %mul25 = mul i64 8, %conv24
  %call26 = call noalias i8* @malloc(i64 %mul25) #5
  %9 = bitcast i8* %call26 to i8**
  store i8** %9, i8*** @fd_data, align 8
  %10 = load i32** @fd_rw, align 8
  %cmp27 = icmp eq i32* %10, null
  br i1 %cmp27, label %if.then31, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end21
  %11 = load i8*** @fd_data, align 8
  %cmp29 = icmp eq i8** %11, null
  br i1 %cmp29, label %if.then31, label %if.end32

if.then31:                                        ; preds = %lor.lhs.false, %if.end21
  store i32 -1, i32* %retval
  br label %return

if.end32:                                         ; preds = %lor.lhs.false
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end32
  %12 = load i32* %i, align 4
  %13 = load i32* @nfiles, align 4
  %cmp33 = icmp slt i32 %12, %13
  br i1 %cmp33, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load i32* %i, align 4
  %idxprom = sext i32 %14 to i64
  %15 = load i32** @fd_rw, align 8
  %arrayidx = getelementptr inbounds i32* %15, i64 %idxprom
  store i32 -1, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32* @nfiles, align 4
  %call35 = call i32 @poll_init(i32 %17)
  %cmp36 = icmp eq i32 %call35, -1
  br i1 %cmp36, label %if.then38, label %if.end39

if.then38:                                        ; preds = %for.end
  store i32 -1, i32* %retval
  br label %return

if.end39:                                         ; preds = %for.end
  %18 = load i32* @nfiles, align 4
  store i32 %18, i32* %retval
  br label %return

return:                                           ; preds = %if.end39, %if.then38, %if.then31
  %19 = load i32* %retval
  ret i32 %19
}

; Function Attrs: nounwind
declare i32 @getdtablesize() #3

; Function Attrs: nounwind
declare i32 @getrlimit(i32, %struct.rlimit*) #3

; Function Attrs: nounwind
declare i32 @setrlimit(i32, %struct.rlimit*) #3

; Function Attrs: nounwind uwtable
define internal void @fdwatch_add_fd(i32 %fd, i8* %client_data, i32 %rw) #0 {
entry:
  %fd.addr = alloca i32, align 4
  %client_data.addr = alloca i8*, align 8
  %rw.addr = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  store i8* %client_data, i8** %client_data.addr, align 8
  store i32 %rw, i32* %rw.addr, align 4
  %0 = load i32* %fd.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32* %fd.addr, align 4
  %2 = load i32* @nfiles, align 4
  %cmp1 = icmp sge i32 %1, %2
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load i32* %fd.addr, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load i32** @fd_rw, align 8
  %arrayidx = getelementptr inbounds i32* %4, i64 %idxprom
  %5 = load i32* %arrayidx, align 4
  %cmp3 = icmp ne i32 %5, -1
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  %6 = load i32* %fd.addr, align 4
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([38 x i8]* @.str549, i32 0, i32 0), i32 %6)
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %7 = load i32* %fd.addr, align 4
  %8 = load i32* %rw.addr, align 4
  call void @poll_add_fd(i32 %7, i32 %8)
  %9 = load i32* %rw.addr, align 4
  %10 = load i32* %fd.addr, align 4
  %idxprom4 = sext i32 %10 to i64
  %11 = load i32** @fd_rw, align 8
  %arrayidx5 = getelementptr inbounds i32* %11, i64 %idxprom4
  store i32 %9, i32* %arrayidx5, align 4
  %12 = load i8** %client_data.addr, align 8
  %13 = load i32* %fd.addr, align 4
  %idxprom6 = sext i32 %13 to i64
  %14 = load i8*** @fd_data, align 8
  %arrayidx7 = getelementptr inbounds i8** %14, i64 %idxprom6
  store i8* %12, i8** %arrayidx7, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @fdwatch_del_fd(i32 %fd) #0 {
entry:
  %fd.addr = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  %0 = load i32* %fd.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32* %fd.addr, align 4
  %2 = load i32* @nfiles, align 4
  %cmp1 = icmp sge i32 %1, %2
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load i32* %fd.addr, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load i32** @fd_rw, align 8
  %arrayidx = getelementptr inbounds i32* %4, i64 %idxprom
  %5 = load i32* %arrayidx, align 4
  %cmp3 = icmp eq i32 %5, -1
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  %6 = load i32* %fd.addr, align 4
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([38 x i8]* @.str1550, i32 0, i32 0), i32 %6)
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %7 = load i32* %fd.addr, align 4
  call void @poll_del_fd(i32 %7)
  %8 = load i32* %fd.addr, align 4
  %idxprom4 = sext i32 %8 to i64
  %9 = load i32** @fd_rw, align 8
  %arrayidx5 = getelementptr inbounds i32* %9, i64 %idxprom4
  store i32 -1, i32* %arrayidx5, align 4
  %10 = load i32* %fd.addr, align 4
  %idxprom6 = sext i32 %10 to i64
  %11 = load i8*** @fd_data, align 8
  %arrayidx7 = getelementptr inbounds i8** %11, i64 %idxprom6
  store i8* null, i8** %arrayidx7, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @fdwatch(i64 %timeout_msecs) #0 {
entry:
  %timeout_msecs.addr = alloca i64, align 8
  store i64 %timeout_msecs, i64* %timeout_msecs.addr, align 8
  %0 = load i64* @nwatches, align 8
  %inc = add nsw i64 %0, 1
  store i64 %inc, i64* @nwatches, align 8
  %1 = load i64* %timeout_msecs.addr, align 8
  %call = call i32 @poll_watch(i64 %1)
  store i32 %call, i32* @nreturned, align 4
  store i32 0, i32* @next_ridx, align 4
  %2 = load i32* @nreturned, align 4
  ret i32 %2
}

; Function Attrs: nounwind uwtable
define internal i32 @fdwatch_check_fd(i32 %fd) #0 {
entry:
  %retval = alloca i32, align 4
  %fd.addr = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  %0 = load i32* %fd.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32* %fd.addr, align 4
  %2 = load i32* @nfiles, align 4
  %cmp1 = icmp sge i32 %1, %2
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load i32* %fd.addr, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load i32** @fd_rw, align 8
  %arrayidx = getelementptr inbounds i32* %4, i64 %idxprom
  %5 = load i32* %arrayidx, align 4
  %cmp3 = icmp eq i32 %5, -1
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  %6 = load i32* %fd.addr, align 4
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([40 x i8]* @.str2551, i32 0, i32 0), i32 %6)
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %7 = load i32* %fd.addr, align 4
  %call = call i32 @poll_check_fd(i32 %7)
  store i32 %call, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %8 = load i32* %retval
  ret i32 %8
}

; Function Attrs: nounwind uwtable
define internal i8* @fdwatch_get_next_client_data() #0 {
entry:
  %retval = alloca i8*, align 8
  %fd = alloca i32, align 4
  %0 = load i32* @next_ridx, align 4
  %1 = load i32* @nreturned, align 4
  %cmp = icmp sge i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* inttoptr (i64 -1 to i8*), i8** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32* @next_ridx, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* @next_ridx, align 4
  %call = call i32 @poll_get_fd(i32 %2)
  store i32 %call, i32* %fd, align 4
  %3 = load i32* %fd, align 4
  %cmp1 = icmp slt i32 %3, 0
  br i1 %cmp1, label %if.then3, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %4 = load i32* %fd, align 4
  %5 = load i32* @nfiles, align 4
  %cmp2 = icmp sge i32 %4, %5
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %lor.lhs.false, %if.end
  store i8* null, i8** %retval
  br label %return

if.end4:                                          ; preds = %lor.lhs.false
  %6 = load i32* %fd, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load i8*** @fd_data, align 8
  %arrayidx = getelementptr inbounds i8** %7, i64 %idxprom
  %8 = load i8** %arrayidx, align 8
  store i8* %8, i8** %retval
  br label %return

return:                                           ; preds = %if.end4, %if.then3, %if.then
  %9 = load i8** %retval
  ret i8* %9
}

; Function Attrs: nounwind uwtable
define internal void @fdwatch_logstats(i64 %secs) #0 {
entry:
  %secs.addr = alloca i64, align 8
  store i64 %secs, i64* %secs.addr, align 8
  %0 = load i64* %secs.addr, align 8
  %cmp = icmp sgt i64 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64* @nwatches, align 8
  %2 = load i64* @nwatches, align 8
  %conv = sitofp i64 %2 to float
  %3 = load i64* %secs.addr, align 8
  %conv1 = sitofp i64 %3 to float
  %div = fdiv float %conv, %conv1
  %conv2 = fpext float %div to double
  call void (i32, i8*, ...)* @syslog(i32 5, i8* getelementptr inbounds ([29 x i8]* @.str3552, i32 0, i32 0), i64 %1, i8* getelementptr inbounds ([5 x i8]* @.str4553, i32 0, i32 0), double %conv2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i64 0, i64* @nwatches, align 8
  ret void
}

declare i32 @poll(%struct.pollfd*, i64, i32) #2

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #5

; Function Attrs: nounwind uwtable
define internal i32 @poll_init(i32 %nf) #0 {
entry:
  %retval = alloca i32, align 4
  %nf.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %nf, i32* %nf.addr, align 4
  %0 = load i32* %nf.addr, align 4
  %conv = sext i32 %0 to i64
  %mul = mul i64 8, %conv
  %call = call noalias i8* @malloc(i64 %mul) #5
  %1 = bitcast i8* %call to %struct.pollfd*
  store %struct.pollfd* %1, %struct.pollfd** @pollfds, align 8
  %2 = load i32* %nf.addr, align 4
  %conv1 = sext i32 %2 to i64
  %mul2 = mul i64 4, %conv1
  %call3 = call noalias i8* @malloc(i64 %mul2) #5
  %3 = bitcast i8* %call3 to i32*
  store i32* %3, i32** @poll_fdidx, align 8
  %4 = load i32* %nf.addr, align 4
  %conv4 = sext i32 %4 to i64
  %mul5 = mul i64 4, %conv4
  %call6 = call noalias i8* @malloc(i64 %mul5) #5
  %5 = bitcast i8* %call6 to i32*
  store i32* %5, i32** @poll_rfdidx, align 8
  %6 = load %struct.pollfd** @pollfds, align 8
  %cmp = icmp eq %struct.pollfd* %6, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %7 = load i32** @poll_fdidx, align 8
  %cmp8 = icmp eq i32* %7, null
  br i1 %cmp8, label %if.then, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %lor.lhs.false
  %8 = load i32** @poll_rfdidx, align 8
  %cmp11 = icmp eq i32* %8, null
  br i1 %cmp11, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false10, %lor.lhs.false, %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false10
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i32* %i, align 4
  %10 = load i32* %nf.addr, align 4
  %cmp13 = icmp slt i32 %9, %10
  br i1 %cmp13, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %12 = load i32** @poll_fdidx, align 8
  %arrayidx = getelementptr inbounds i32* %12, i64 %idxprom
  store i32 -1, i32* %arrayidx, align 4
  %13 = load i32* %i, align 4
  %idxprom15 = sext i32 %13 to i64
  %14 = load %struct.pollfd** @pollfds, align 8
  %arrayidx16 = getelementptr inbounds %struct.pollfd* %14, i64 %idxprom15
  %fd = getelementptr inbounds %struct.pollfd* %arrayidx16, i32 0, i32 0
  store i32 -1, i32* %fd, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %16 = load i32* %retval
  ret i32 %16
}

; Function Attrs: nounwind uwtable
define internal void @poll_add_fd(i32 %fd, i32 %rw) #0 {
entry:
  %fd.addr = alloca i32, align 4
  %rw.addr = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  store i32 %rw, i32* %rw.addr, align 4
  %0 = load i32* @npoll_fds, align 4
  %1 = load i32* @nfiles, align 4
  %cmp = icmp sge i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([29 x i8]* @.str8557, i32 0, i32 0))
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32* %fd.addr, align 4
  %3 = load i32* @npoll_fds, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load %struct.pollfd** @pollfds, align 8
  %arrayidx = getelementptr inbounds %struct.pollfd* %4, i64 %idxprom
  %fd1 = getelementptr inbounds %struct.pollfd* %arrayidx, i32 0, i32 0
  store i32 %2, i32* %fd1, align 4
  %5 = load i32* %rw.addr, align 4
  switch i32 %5, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb4
  ]

sw.bb:                                            ; preds = %if.end
  %6 = load i32* @npoll_fds, align 4
  %idxprom2 = sext i32 %6 to i64
  %7 = load %struct.pollfd** @pollfds, align 8
  %arrayidx3 = getelementptr inbounds %struct.pollfd* %7, i64 %idxprom2
  %events = getelementptr inbounds %struct.pollfd* %arrayidx3, i32 0, i32 1
  store i16 1, i16* %events, align 2
  br label %sw.epilog

sw.bb4:                                           ; preds = %if.end
  %8 = load i32* @npoll_fds, align 4
  %idxprom5 = sext i32 %8 to i64
  %9 = load %struct.pollfd** @pollfds, align 8
  %arrayidx6 = getelementptr inbounds %struct.pollfd* %9, i64 %idxprom5
  %events7 = getelementptr inbounds %struct.pollfd* %arrayidx6, i32 0, i32 1
  store i16 4, i16* %events7, align 2
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb4, %sw.bb
  %10 = load i32* @npoll_fds, align 4
  %11 = load i32* %fd.addr, align 4
  %idxprom8 = sext i32 %11 to i64
  %12 = load i32** @poll_fdidx, align 8
  %arrayidx9 = getelementptr inbounds i32* %12, i64 %idxprom8
  store i32 %10, i32* %arrayidx9, align 4
  %13 = load i32* @npoll_fds, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* @npoll_fds, align 4
  br label %return

return:                                           ; preds = %sw.epilog, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @poll_del_fd(i32 %fd) #0 {
entry:
  %fd.addr = alloca i32, align 4
  %idx = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  %0 = load i32* %fd.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load i32** @poll_fdidx, align 8
  %arrayidx = getelementptr inbounds i32* %1, i64 %idxprom
  %2 = load i32* %arrayidx, align 4
  store i32 %2, i32* %idx, align 4
  %3 = load i32* %idx, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load i32* %idx, align 4
  %5 = load i32* @nfiles, align 4
  %cmp1 = icmp sge i32 %4, %5
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %6 = load i32* %idx, align 4
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([29 x i8]* @.str7556, i32 0, i32 0), i32 %6)
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %7 = load i32* @npoll_fds, align 4
  %dec = add nsw i32 %7, -1
  store i32 %dec, i32* @npoll_fds, align 4
  %8 = load i32* %idx, align 4
  %idxprom2 = sext i32 %8 to i64
  %9 = load %struct.pollfd** @pollfds, align 8
  %arrayidx3 = getelementptr inbounds %struct.pollfd* %9, i64 %idxprom2
  %10 = load i32* @npoll_fds, align 4
  %idxprom4 = sext i32 %10 to i64
  %11 = load %struct.pollfd** @pollfds, align 8
  %arrayidx5 = getelementptr inbounds %struct.pollfd* %11, i64 %idxprom4
  %12 = bitcast %struct.pollfd* %arrayidx3 to i8*
  %13 = bitcast %struct.pollfd* %arrayidx5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %13, i64 8, i32 4, i1 false)
  %14 = load i32* %idx, align 4
  %15 = load i32* %idx, align 4
  %idxprom6 = sext i32 %15 to i64
  %16 = load %struct.pollfd** @pollfds, align 8
  %arrayidx7 = getelementptr inbounds %struct.pollfd* %16, i64 %idxprom6
  %fd8 = getelementptr inbounds %struct.pollfd* %arrayidx7, i32 0, i32 0
  %17 = load i32* %fd8, align 4
  %idxprom9 = sext i32 %17 to i64
  %18 = load i32** @poll_fdidx, align 8
  %arrayidx10 = getelementptr inbounds i32* %18, i64 %idxprom9
  store i32 %14, i32* %arrayidx10, align 4
  %19 = load i32* @npoll_fds, align 4
  %idxprom11 = sext i32 %19 to i64
  %20 = load %struct.pollfd** @pollfds, align 8
  %arrayidx12 = getelementptr inbounds %struct.pollfd* %20, i64 %idxprom11
  %fd13 = getelementptr inbounds %struct.pollfd* %arrayidx12, i32 0, i32 0
  store i32 -1, i32* %fd13, align 4
  %21 = load i32* %fd.addr, align 4
  %idxprom14 = sext i32 %21 to i64
  %22 = load i32** @poll_fdidx, align 8
  %arrayidx15 = getelementptr inbounds i32* %22, i64 %idxprom14
  store i32 -1, i32* %arrayidx15, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @poll_watch(i64 %timeout_msecs) #0 {
entry:
  %retval = alloca i32, align 4
  %timeout_msecs.addr = alloca i64, align 8
  %r = alloca i32, align 4
  %ridx = alloca i32, align 4
  %i = alloca i32, align 4
  store i64 %timeout_msecs, i64* %timeout_msecs.addr, align 8
  %0 = load %struct.pollfd** @pollfds, align 8
  %1 = load i32* @npoll_fds, align 4
  %conv = sext i32 %1 to i64
  %2 = load i64* %timeout_msecs.addr, align 8
  %conv1 = trunc i64 %2 to i32
  %call = call i32 @poll(%struct.pollfd* %0, i64 %conv, i32 %conv1)
  store i32 %call, i32* %r, align 4
  %3 = load i32* %r, align 4
  %cmp = icmp sle i32 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i32* %r, align 4
  store i32 %4, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %ridx, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32* %i, align 4
  %6 = load i32* @npoll_fds, align 4
  %cmp3 = icmp slt i32 %5, %6
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32* %i, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load %struct.pollfd** @pollfds, align 8
  %arrayidx = getelementptr inbounds %struct.pollfd* %8, i64 %idxprom
  %revents = getelementptr inbounds %struct.pollfd* %arrayidx, i32 0, i32 2
  %9 = load i16* %revents, align 2
  %conv5 = sext i16 %9 to i32
  %and = and i32 %conv5, 61
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then6, label %if.end15

if.then6:                                         ; preds = %for.body
  %10 = load i32* %i, align 4
  %idxprom7 = sext i32 %10 to i64
  %11 = load %struct.pollfd** @pollfds, align 8
  %arrayidx8 = getelementptr inbounds %struct.pollfd* %11, i64 %idxprom7
  %fd = getelementptr inbounds %struct.pollfd* %arrayidx8, i32 0, i32 0
  %12 = load i32* %fd, align 4
  %13 = load i32* %ridx, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %ridx, align 4
  %idxprom9 = sext i32 %13 to i64
  %14 = load i32** @poll_rfdidx, align 8
  %arrayidx10 = getelementptr inbounds i32* %14, i64 %idxprom9
  store i32 %12, i32* %arrayidx10, align 4
  %15 = load i32* %ridx, align 4
  %16 = load i32* %r, align 4
  %cmp11 = icmp eq i32 %15, %16
  br i1 %cmp11, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.then6
  br label %for.end

if.end14:                                         ; preds = %if.then6
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end15
  %17 = load i32* %i, align 4
  %inc16 = add nsw i32 %17, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then13, %for.cond
  %18 = load i32* %ridx, align 4
  store i32 %18, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %19 = load i32* %retval
  ret i32 %19
}

; Function Attrs: nounwind uwtable
define internal i32 @poll_check_fd(i32 %fd) #0 {
entry:
  %retval = alloca i32, align 4
  %fd.addr = alloca i32, align 4
  %fdidx = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  %0 = load i32* %fd.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load i32** @poll_fdidx, align 8
  %arrayidx = getelementptr inbounds i32* %1, i64 %idxprom
  %2 = load i32* %arrayidx, align 4
  store i32 %2, i32* %fdidx, align 4
  %3 = load i32* %fdidx, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load i32* %fdidx, align 4
  %5 = load i32* @nfiles, align 4
  %cmp1 = icmp sge i32 %4, %5
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %6 = load i32* %fdidx, align 4
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([33 x i8]* @.str6555, i32 0, i32 0), i32 %6)
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %7 = load i32* %fdidx, align 4
  %idxprom2 = sext i32 %7 to i64
  %8 = load %struct.pollfd** @pollfds, align 8
  %arrayidx3 = getelementptr inbounds %struct.pollfd* %8, i64 %idxprom2
  %revents = getelementptr inbounds %struct.pollfd* %arrayidx3, i32 0, i32 2
  %9 = load i16* %revents, align 2
  %conv = sext i16 %9 to i32
  %and = and i32 %conv, 8
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end5:                                          ; preds = %if.end
  %10 = load i32* %fd.addr, align 4
  %idxprom6 = sext i32 %10 to i64
  %11 = load i32** @fd_rw, align 8
  %arrayidx7 = getelementptr inbounds i32* %11, i64 %idxprom6
  %12 = load i32* %arrayidx7, align 4
  switch i32 %12, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb13
  ]

sw.bb:                                            ; preds = %if.end5
  %13 = load i32* %fdidx, align 4
  %idxprom8 = sext i32 %13 to i64
  %14 = load %struct.pollfd** @pollfds, align 8
  %arrayidx9 = getelementptr inbounds %struct.pollfd* %14, i64 %idxprom8
  %revents10 = getelementptr inbounds %struct.pollfd* %arrayidx9, i32 0, i32 2
  %15 = load i16* %revents10, align 2
  %conv11 = sext i16 %15 to i32
  %and12 = and i32 %conv11, 49
  store i32 %and12, i32* %retval
  br label %return

sw.bb13:                                          ; preds = %if.end5
  %16 = load i32* %fdidx, align 4
  %idxprom14 = sext i32 %16 to i64
  %17 = load %struct.pollfd** @pollfds, align 8
  %arrayidx15 = getelementptr inbounds %struct.pollfd* %17, i64 %idxprom14
  %revents16 = getelementptr inbounds %struct.pollfd* %arrayidx15, i32 0, i32 2
  %18 = load i16* %revents16, align 2
  %conv17 = sext i16 %18 to i32
  %and18 = and i32 %conv17, 52
  store i32 %and18, i32* %retval
  br label %return

sw.default:                                       ; preds = %if.end5
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb13, %sw.bb, %if.then4, %if.then
  %19 = load i32* %retval
  ret i32 %19
}

; Function Attrs: nounwind uwtable
define internal i32 @poll_get_fd(i32 %ridx) #0 {
entry:
  %retval = alloca i32, align 4
  %ridx.addr = alloca i32, align 4
  store i32 %ridx, i32* %ridx.addr, align 4
  %0 = load i32* %ridx.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32* %ridx.addr, align 4
  %2 = load i32* @nfiles, align 4
  %cmp1 = icmp sge i32 %1, %2
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load i32* %ridx.addr, align 4
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([30 x i8]* @.str5554, i32 0, i32 0), i32 %3)
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i32* %ridx.addr, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load i32** @poll_rfdidx, align 8
  %arrayidx = getelementptr inbounds i32* %5, i64 %idxprom
  %6 = load i32* %arrayidx, align 4
  store i32 %6, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load i32* %retval
  ret i32 %7
}

; Function Attrs: nounwind uwtable
define internal i8* @mmc_map(i8* %filename, %struct.stat* %sbP, %struct.timeval* %nowP) #0 {
entry:
  %retval = alloca i8*, align 8
  %filename.addr = alloca i8*, align 8
  %sbP.addr = alloca %struct.stat*, align 8
  %nowP.addr = alloca %struct.timeval*, align 8
  %now = alloca i64, align 8
  %sb = alloca %struct.stat, align 8
  %m = alloca %struct.MapStruct*, align 8
  %fd = alloca i32, align 4
  %size_size = alloca i64, align 8
  store i8* %filename, i8** %filename.addr, align 8
  store %struct.stat* %sbP, %struct.stat** %sbP.addr, align 8
  store %struct.timeval* %nowP, %struct.timeval** %nowP.addr, align 8
  %0 = load %struct.stat** %sbP.addr, align 8
  %cmp = icmp ne %struct.stat* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.stat** %sbP.addr, align 8
  %2 = bitcast %struct.stat* %sb to i8*
  %3 = bitcast %struct.stat* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* %3, i64 144, i32 8, i1 false)
  br label %if.end3

if.else:                                          ; preds = %entry
  %4 = load i8** %filename.addr, align 8
  %call = call i32 @stat(i8* %4, %struct.stat* %sb) #5
  %cmp1 = icmp ne i32 %call, 0
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.else
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([10 x i8]* @.str572, i32 0, i32 0))
  store i8* null, i8** %retval
  br label %return

if.end:                                           ; preds = %if.else
  br label %if.end3

if.end3:                                          ; preds = %if.end, %if.then
  %5 = load %struct.timeval** %nowP.addr, align 8
  %cmp4 = icmp ne %struct.timeval* %5, null
  br i1 %cmp4, label %if.then5, label %if.else6

if.then5:                                         ; preds = %if.end3
  %6 = load %struct.timeval** %nowP.addr, align 8
  %tv_sec = getelementptr inbounds %struct.timeval* %6, i32 0, i32 0
  %7 = load i64* %tv_sec, align 8
  store i64 %7, i64* %now, align 8
  br label %if.end8

if.else6:                                         ; preds = %if.end3
  %call7 = call i64 @time(i64* null) #5
  store i64 %call7, i64* %now, align 8
  br label %if.end8

if.end8:                                          ; preds = %if.else6, %if.then5
  %call9 = call i32 @check_hash_size()
  %cmp10 = icmp slt i32 %call9, 0
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end8
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([26 x i8]* @.str1573, i32 0, i32 0))
  store i8* null, i8** %retval
  br label %return

if.end12:                                         ; preds = %if.end8
  %st_ino = getelementptr inbounds %struct.stat* %sb, i32 0, i32 1
  %8 = load i64* %st_ino, align 8
  %st_dev = getelementptr inbounds %struct.stat* %sb, i32 0, i32 0
  %9 = load i64* %st_dev, align 8
  %st_size = getelementptr inbounds %struct.stat* %sb, i32 0, i32 8
  %10 = load i64* %st_size, align 8
  %st_ctim = getelementptr inbounds %struct.stat* %sb, i32 0, i32 13
  %tv_sec13 = getelementptr inbounds %struct.timespec* %st_ctim, i32 0, i32 0
  %11 = load i64* %tv_sec13, align 8
  %call14 = call %struct.MapStruct* @find_hash(i64 %8, i64 %9, i64 %10, i64 %11)
  store %struct.MapStruct* %call14, %struct.MapStruct** %m, align 8
  %12 = load %struct.MapStruct** %m, align 8
  %cmp15 = icmp ne %struct.MapStruct* %12, null
  br i1 %cmp15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.end12
  %13 = load %struct.MapStruct** %m, align 8
  %refcount = getelementptr inbounds %struct.MapStruct* %13, i32 0, i32 4
  %14 = load i32* %refcount, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %refcount, align 4
  %15 = load i64* %now, align 8
  %16 = load %struct.MapStruct** %m, align 8
  %reftime = getelementptr inbounds %struct.MapStruct* %16, i32 0, i32 5
  store i64 %15, i64* %reftime, align 8
  %17 = load %struct.MapStruct** %m, align 8
  %addr = getelementptr inbounds %struct.MapStruct* %17, i32 0, i32 6
  %18 = load i8** %addr, align 8
  store i8* %18, i8** %retval
  br label %return

if.end17:                                         ; preds = %if.end12
  %19 = load i8** %filename.addr, align 8
  %call18 = call i32 (i8*, i32, ...)* @open(i8* %19, i32 0)
  store i32 %call18, i32* %fd, align 4
  %20 = load i32* %fd, align 4
  %cmp19 = icmp slt i32 %20, 0
  br i1 %cmp19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end17
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([10 x i8]* @.str2574, i32 0, i32 0))
  store i8* null, i8** %retval
  br label %return

if.end21:                                         ; preds = %if.end17
  %21 = load %struct.MapStruct** @free_maps, align 8
  %cmp22 = icmp ne %struct.MapStruct* %21, null
  br i1 %cmp22, label %if.then23, label %if.else24

if.then23:                                        ; preds = %if.end21
  %22 = load %struct.MapStruct** @free_maps, align 8
  store %struct.MapStruct* %22, %struct.MapStruct** %m, align 8
  %23 = load %struct.MapStruct** %m, align 8
  %next = getelementptr inbounds %struct.MapStruct* %23, i32 0, i32 9
  %24 = load %struct.MapStruct** %next, align 8
  store %struct.MapStruct* %24, %struct.MapStruct** @free_maps, align 8
  %25 = load i32* @free_count, align 4
  %dec = add nsw i32 %25, -1
  store i32 %dec, i32* @free_count, align 4
  br label %if.end31

if.else24:                                        ; preds = %if.end21
  %call25 = call noalias i8* @malloc(i64 72) #5
  %26 = bitcast i8* %call25 to %struct.MapStruct*
  store %struct.MapStruct* %26, %struct.MapStruct** %m, align 8
  %27 = load %struct.MapStruct** %m, align 8
  %cmp26 = icmp eq %struct.MapStruct* %27, null
  br i1 %cmp26, label %if.then27, label %if.end29

if.then27:                                        ; preds = %if.else24
  %28 = load i32* %fd, align 4
  %call28 = call i32 @close(i32 %28)
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([31 x i8]* @.str3575, i32 0, i32 0))
  store i8* null, i8** %retval
  br label %return

if.end29:                                         ; preds = %if.else24
  %29 = load i32* @alloc_count, align 4
  %inc30 = add nsw i32 %29, 1
  store i32 %inc30, i32* @alloc_count, align 4
  br label %if.end31

if.end31:                                         ; preds = %if.end29, %if.then23
  %st_ino32 = getelementptr inbounds %struct.stat* %sb, i32 0, i32 1
  %30 = load i64* %st_ino32, align 8
  %31 = load %struct.MapStruct** %m, align 8
  %ino = getelementptr inbounds %struct.MapStruct* %31, i32 0, i32 0
  store i64 %30, i64* %ino, align 8
  %st_dev33 = getelementptr inbounds %struct.stat* %sb, i32 0, i32 0
  %32 = load i64* %st_dev33, align 8
  %33 = load %struct.MapStruct** %m, align 8
  %dev = getelementptr inbounds %struct.MapStruct* %33, i32 0, i32 1
  store i64 %32, i64* %dev, align 8
  %st_size34 = getelementptr inbounds %struct.stat* %sb, i32 0, i32 8
  %34 = load i64* %st_size34, align 8
  %35 = load %struct.MapStruct** %m, align 8
  %size = getelementptr inbounds %struct.MapStruct* %35, i32 0, i32 2
  store i64 %34, i64* %size, align 8
  %st_ctim35 = getelementptr inbounds %struct.stat* %sb, i32 0, i32 13
  %tv_sec36 = getelementptr inbounds %struct.timespec* %st_ctim35, i32 0, i32 0
  %36 = load i64* %tv_sec36, align 8
  %37 = load %struct.MapStruct** %m, align 8
  %ct = getelementptr inbounds %struct.MapStruct* %37, i32 0, i32 3
  store i64 %36, i64* %ct, align 8
  %38 = load %struct.MapStruct** %m, align 8
  %refcount37 = getelementptr inbounds %struct.MapStruct* %38, i32 0, i32 4
  store i32 1, i32* %refcount37, align 4
  %39 = load i64* %now, align 8
  %40 = load %struct.MapStruct** %m, align 8
  %reftime38 = getelementptr inbounds %struct.MapStruct* %40, i32 0, i32 5
  store i64 %39, i64* %reftime38, align 8
  %41 = load %struct.MapStruct** %m, align 8
  %size39 = getelementptr inbounds %struct.MapStruct* %41, i32 0, i32 2
  %42 = load i64* %size39, align 8
  %cmp40 = icmp eq i64 %42, 0
  br i1 %cmp40, label %if.then41, label %if.else43

if.then41:                                        ; preds = %if.end31
  %43 = load %struct.MapStruct** %m, align 8
  %addr42 = getelementptr inbounds %struct.MapStruct* %43, i32 0, i32 6
  store i8* inttoptr (i64 1 to i8*), i8** %addr42, align 8
  br label %if.end61

if.else43:                                        ; preds = %if.end31
  %44 = load %struct.MapStruct** %m, align 8
  %size44 = getelementptr inbounds %struct.MapStruct* %44, i32 0, i32 2
  %45 = load i64* %size44, align 8
  store i64 %45, i64* %size_size, align 8
  %46 = load i64* %size_size, align 8
  %47 = load i32* %fd, align 4
  %call45 = call i8* @mmap(i8* null, i64 %46, i32 1, i32 2, i32 %47, i64 0) #5
  %48 = load %struct.MapStruct** %m, align 8
  %addr46 = getelementptr inbounds %struct.MapStruct* %48, i32 0, i32 6
  store i8* %call45, i8** %addr46, align 8
  %49 = load %struct.MapStruct** %m, align 8
  %addr47 = getelementptr inbounds %struct.MapStruct* %49, i32 0, i32 6
  %50 = load i8** %addr47, align 8
  %cmp48 = icmp eq i8* %50, inttoptr (i64 -1 to i8*)
  br i1 %cmp48, label %land.lhs.true, label %if.end54

land.lhs.true:                                    ; preds = %if.else43
  %call49 = call i32* @__errno_location() #10
  %51 = load i32* %call49, align 4
  %cmp50 = icmp eq i32 %51, 12
  br i1 %cmp50, label %if.then51, label %if.end54

if.then51:                                        ; preds = %land.lhs.true
  call void @panic()
  %52 = load i64* %size_size, align 8
  %53 = load i32* %fd, align 4
  %call52 = call i8* @mmap(i8* null, i64 %52, i32 1, i32 2, i32 %53, i64 0) #5
  %54 = load %struct.MapStruct** %m, align 8
  %addr53 = getelementptr inbounds %struct.MapStruct* %54, i32 0, i32 6
  store i8* %call52, i8** %addr53, align 8
  br label %if.end54

if.end54:                                         ; preds = %if.then51, %land.lhs.true, %if.else43
  %55 = load %struct.MapStruct** %m, align 8
  %addr55 = getelementptr inbounds %struct.MapStruct* %55, i32 0, i32 6
  %56 = load i8** %addr55, align 8
  %cmp56 = icmp eq i8* %56, inttoptr (i64 -1 to i8*)
  br i1 %cmp56, label %if.then57, label %if.end60

if.then57:                                        ; preds = %if.end54
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([10 x i8]* @.str4576, i32 0, i32 0))
  %57 = load i32* %fd, align 4
  %call58 = call i32 @close(i32 %57)
  %58 = load %struct.MapStruct** %m, align 8
  %59 = bitcast %struct.MapStruct* %58 to i8*
  call void @free(i8* %59) #5
  %60 = load i32* @alloc_count, align 4
  %dec59 = add nsw i32 %60, -1
  store i32 %dec59, i32* @alloc_count, align 4
  store i8* null, i8** %retval
  br label %return

if.end60:                                         ; preds = %if.end54
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %if.then41
  %61 = load i32* %fd, align 4
  %call62 = call i32 @close(i32 %61)
  %62 = load %struct.MapStruct** %m, align 8
  %call63 = call i32 @add_hash(%struct.MapStruct* %62)
  %cmp64 = icmp slt i32 %call63, 0
  br i1 %cmp64, label %if.then65, label %if.end67

if.then65:                                        ; preds = %if.end61
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([19 x i8]* @.str5577, i32 0, i32 0))
  %63 = load %struct.MapStruct** %m, align 8
  %64 = bitcast %struct.MapStruct* %63 to i8*
  call void @free(i8* %64) #5
  %65 = load i32* @alloc_count, align 4
  %dec66 = add nsw i32 %65, -1
  store i32 %dec66, i32* @alloc_count, align 4
  store i8* null, i8** %retval
  br label %return

if.end67:                                         ; preds = %if.end61
  %66 = load %struct.MapStruct** @maps, align 8
  %67 = load %struct.MapStruct** %m, align 8
  %next68 = getelementptr inbounds %struct.MapStruct* %67, i32 0, i32 9
  store %struct.MapStruct* %66, %struct.MapStruct** %next68, align 8
  %68 = load %struct.MapStruct** %m, align 8
  store %struct.MapStruct* %68, %struct.MapStruct** @maps, align 8
  %69 = load i32* @map_count, align 4
  %inc69 = add nsw i32 %69, 1
  store i32 %inc69, i32* @map_count, align 4
  %70 = load %struct.MapStruct** %m, align 8
  %size70 = getelementptr inbounds %struct.MapStruct* %70, i32 0, i32 2
  %71 = load i64* %size70, align 8
  %72 = load i64* @mapped_bytes, align 8
  %add = add nsw i64 %72, %71
  store i64 %add, i64* @mapped_bytes, align 8
  %73 = load %struct.MapStruct** %m, align 8
  %addr71 = getelementptr inbounds %struct.MapStruct* %73, i32 0, i32 6
  %74 = load i8** %addr71, align 8
  store i8* %74, i8** %retval
  br label %return

return:                                           ; preds = %if.end67, %if.then65, %if.then57, %if.then27, %if.then20, %if.then16, %if.then11, %if.then2
  %75 = load i8** %retval
  ret i8* %75
}

declare i32 @open(i8*, i32, ...) #2

; Function Attrs: nounwind
declare i8* @mmap(i8*, i64, i32, i32, i32, i64) #3

; Function Attrs: nounwind uwtable
define internal void @mmc_unmap(i8* %addr, %struct.stat* %sbP, %struct.timeval* %nowP) #0 {
entry:
  %addr.addr = alloca i8*, align 8
  %sbP.addr = alloca %struct.stat*, align 8
  %nowP.addr = alloca %struct.timeval*, align 8
  %m = alloca %struct.MapStruct*, align 8
  store i8* %addr, i8** %addr.addr, align 8
  store %struct.stat* %sbP, %struct.stat** %sbP.addr, align 8
  store %struct.timeval* %nowP, %struct.timeval** %nowP.addr, align 8
  store %struct.MapStruct* null, %struct.MapStruct** %m, align 8
  %0 = load %struct.stat** %sbP.addr, align 8
  %cmp = icmp ne %struct.stat* %0, null
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %entry
  %1 = load %struct.stat** %sbP.addr, align 8
  %st_ino = getelementptr inbounds %struct.stat* %1, i32 0, i32 1
  %2 = load i64* %st_ino, align 8
  %3 = load %struct.stat** %sbP.addr, align 8
  %st_dev = getelementptr inbounds %struct.stat* %3, i32 0, i32 0
  %4 = load i64* %st_dev, align 8
  %5 = load %struct.stat** %sbP.addr, align 8
  %st_size = getelementptr inbounds %struct.stat* %5, i32 0, i32 8
  %6 = load i64* %st_size, align 8
  %7 = load %struct.stat** %sbP.addr, align 8
  %st_ctim = getelementptr inbounds %struct.stat* %7, i32 0, i32 13
  %tv_sec = getelementptr inbounds %struct.timespec* %st_ctim, i32 0, i32 0
  %8 = load i64* %tv_sec, align 8
  %call = call %struct.MapStruct* @find_hash(i64 %2, i64 %4, i64 %6, i64 %8)
  store %struct.MapStruct* %call, %struct.MapStruct** %m, align 8
  %9 = load %struct.MapStruct** %m, align 8
  %cmp1 = icmp ne %struct.MapStruct* %9, null
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %10 = load %struct.MapStruct** %m, align 8
  %addr2 = getelementptr inbounds %struct.MapStruct* %10, i32 0, i32 6
  %11 = load i8** %addr2, align 8
  %12 = load i8** %addr.addr, align 8
  %cmp3 = icmp ne i8* %11, %12
  br i1 %cmp3, label %if.then4, label %if.end

if.then4:                                         ; preds = %land.lhs.true
  store %struct.MapStruct* null, %struct.MapStruct** %m, align 8
  br label %if.end

if.end:                                           ; preds = %if.then4, %land.lhs.true, %if.then
  br label %if.end5

if.end5:                                          ; preds = %if.end, %entry
  %13 = load %struct.MapStruct** %m, align 8
  %cmp6 = icmp eq %struct.MapStruct* %13, null
  br i1 %cmp6, label %if.then7, label %if.end13

if.then7:                                         ; preds = %if.end5
  %14 = load %struct.MapStruct** @maps, align 8
  store %struct.MapStruct* %14, %struct.MapStruct** %m, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then7
  %15 = load %struct.MapStruct** %m, align 8
  %cmp8 = icmp ne %struct.MapStruct* %15, null
  br i1 %cmp8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load %struct.MapStruct** %m, align 8
  %addr9 = getelementptr inbounds %struct.MapStruct* %16, i32 0, i32 6
  %17 = load i8** %addr9, align 8
  %18 = load i8** %addr.addr, align 8
  %cmp10 = icmp eq i8* %17, %18
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.body
  br label %for.end

if.end12:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end12
  %19 = load %struct.MapStruct** %m, align 8
  %next = getelementptr inbounds %struct.MapStruct* %19, i32 0, i32 9
  %20 = load %struct.MapStruct** %next, align 8
  store %struct.MapStruct* %20, %struct.MapStruct** %m, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then11, %for.cond
  br label %if.end13

if.end13:                                         ; preds = %for.end, %if.end5
  %21 = load %struct.MapStruct** %m, align 8
  %cmp14 = icmp eq %struct.MapStruct* %21, null
  br i1 %cmp14, label %if.then15, label %if.else

if.then15:                                        ; preds = %if.end13
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([32 x i8]* @.str6578, i32 0, i32 0))
  br label %if.end28

if.else:                                          ; preds = %if.end13
  %22 = load %struct.MapStruct** %m, align 8
  %refcount = getelementptr inbounds %struct.MapStruct* %22, i32 0, i32 4
  %23 = load i32* %refcount, align 4
  %cmp16 = icmp sle i32 %23, 0
  br i1 %cmp16, label %if.then17, label %if.else18

if.then17:                                        ; preds = %if.else
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([43 x i8]* @.str7579, i32 0, i32 0))
  br label %if.end27

if.else18:                                        ; preds = %if.else
  %24 = load %struct.MapStruct** %m, align 8
  %refcount19 = getelementptr inbounds %struct.MapStruct* %24, i32 0, i32 4
  %25 = load i32* %refcount19, align 4
  %dec = add nsw i32 %25, -1
  store i32 %dec, i32* %refcount19, align 4
  %26 = load %struct.timeval** %nowP.addr, align 8
  %cmp20 = icmp ne %struct.timeval* %26, null
  br i1 %cmp20, label %if.then21, label %if.else23

if.then21:                                        ; preds = %if.else18
  %27 = load %struct.timeval** %nowP.addr, align 8
  %tv_sec22 = getelementptr inbounds %struct.timeval* %27, i32 0, i32 0
  %28 = load i64* %tv_sec22, align 8
  %29 = load %struct.MapStruct** %m, align 8
  %reftime = getelementptr inbounds %struct.MapStruct* %29, i32 0, i32 5
  store i64 %28, i64* %reftime, align 8
  br label %if.end26

if.else23:                                        ; preds = %if.else18
  %call24 = call i64 @time(i64* null) #5
  %30 = load %struct.MapStruct** %m, align 8
  %reftime25 = getelementptr inbounds %struct.MapStruct* %30, i32 0, i32 5
  store i64 %call24, i64* %reftime25, align 8
  br label %if.end26

if.end26:                                         ; preds = %if.else23, %if.then21
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.then17
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.then15
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @mmc_cleanup(%struct.timeval* %nowP) #0 {
entry:
  %nowP.addr = alloca %struct.timeval*, align 8
  %now = alloca i64, align 8
  %mm = alloca %struct.MapStruct**, align 8
  %m = alloca %struct.MapStruct*, align 8
  store %struct.timeval* %nowP, %struct.timeval** %nowP.addr, align 8
  %0 = load %struct.timeval** %nowP.addr, align 8
  %cmp = icmp ne %struct.timeval* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.timeval** %nowP.addr, align 8
  %tv_sec = getelementptr inbounds %struct.timeval* %1, i32 0, i32 0
  %2 = load i64* %tv_sec, align 8
  store i64 %2, i64* %now, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %call = call i64 @time(i64* null) #5
  store i64 %call, i64* %now, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store %struct.MapStruct** @maps, %struct.MapStruct*** %mm, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end6, %if.end
  %3 = load %struct.MapStruct*** %mm, align 8
  %4 = load %struct.MapStruct** %3, align 8
  %cmp1 = icmp ne %struct.MapStruct* %4, null
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.MapStruct*** %mm, align 8
  %6 = load %struct.MapStruct** %5, align 8
  store %struct.MapStruct* %6, %struct.MapStruct** %m, align 8
  %7 = load %struct.MapStruct** %m, align 8
  %refcount = getelementptr inbounds %struct.MapStruct* %7, i32 0, i32 4
  %8 = load i32* %refcount, align 4
  %cmp2 = icmp eq i32 %8, 0
  br i1 %cmp2, label %land.lhs.true, label %if.else5

land.lhs.true:                                    ; preds = %for.body
  %9 = load i64* %now, align 8
  %10 = load %struct.MapStruct** %m, align 8
  %reftime = getelementptr inbounds %struct.MapStruct* %10, i32 0, i32 5
  %11 = load i64* %reftime, align 8
  %sub = sub nsw i64 %9, %11
  %12 = load i64* @expire_age, align 8
  %cmp3 = icmp sge i64 %sub, %12
  br i1 %cmp3, label %if.then4, label %if.else5

if.then4:                                         ; preds = %land.lhs.true
  %13 = load %struct.MapStruct*** %mm, align 8
  call void @really_unmap(%struct.MapStruct** %13)
  br label %if.end6

if.else5:                                         ; preds = %land.lhs.true, %for.body
  %14 = load %struct.MapStruct*** %mm, align 8
  %15 = load %struct.MapStruct** %14, align 8
  %next = getelementptr inbounds %struct.MapStruct* %15, i32 0, i32 9
  store %struct.MapStruct** %next, %struct.MapStruct*** %mm, align 8
  br label %if.end6

if.end6:                                          ; preds = %if.else5, %if.then4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i64* @mapped_bytes, align 8
  %cmp7 = icmp sgt i64 %16, 1000000000
  br i1 %cmp7, label %if.then8, label %if.else12

if.then8:                                         ; preds = %for.end
  %17 = load i64* @expire_age, align 8
  %mul = mul nsw i64 %17, 2
  %div = sdiv i64 %mul, 3
  %cmp9 = icmp sgt i64 %div, 60
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then8
  %18 = load i64* @expire_age, align 8
  %mul10 = mul nsw i64 %18, 2
  %div11 = sdiv i64 %mul10, 3
  br label %cond.end

cond.false:                                       ; preds = %if.then8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %div11, %cond.true ], [ 60, %cond.false ]
  store i64 %cond, i64* @expire_age, align 8
  br label %if.end38

if.else12:                                        ; preds = %for.end
  %19 = load i32* @map_count, align 4
  %cmp13 = icmp sgt i32 %19, 1000
  br i1 %cmp13, label %if.then14, label %if.else24

if.then14:                                        ; preds = %if.else12
  %20 = load i64* @expire_age, align 8
  %mul15 = mul nsw i64 %20, 2
  %div16 = sdiv i64 %mul15, 3
  %cmp17 = icmp sgt i64 %div16, 60
  br i1 %cmp17, label %cond.true18, label %cond.false21

cond.true18:                                      ; preds = %if.then14
  %21 = load i64* @expire_age, align 8
  %mul19 = mul nsw i64 %21, 2
  %div20 = sdiv i64 %mul19, 3
  br label %cond.end22

cond.false21:                                     ; preds = %if.then14
  br label %cond.end22

cond.end22:                                       ; preds = %cond.false21, %cond.true18
  %cond23 = phi i64 [ %div20, %cond.true18 ], [ 60, %cond.false21 ]
  store i64 %cond23, i64* @expire_age, align 8
  br label %if.end37

if.else24:                                        ; preds = %if.else12
  %22 = load i32* @map_count, align 4
  %cmp25 = icmp slt i32 %22, 500
  br i1 %cmp25, label %if.then26, label %if.end36

if.then26:                                        ; preds = %if.else24
  %23 = load i64* @expire_age, align 8
  %mul27 = mul nsw i64 %23, 5
  %div28 = sdiv i64 %mul27, 4
  %cmp29 = icmp slt i64 %div28, 1800
  br i1 %cmp29, label %cond.true30, label %cond.false33

cond.true30:                                      ; preds = %if.then26
  %24 = load i64* @expire_age, align 8
  %mul31 = mul nsw i64 %24, 5
  %div32 = sdiv i64 %mul31, 4
  br label %cond.end34

cond.false33:                                     ; preds = %if.then26
  br label %cond.end34

cond.end34:                                       ; preds = %cond.false33, %cond.true30
  %cond35 = phi i64 [ %div32, %cond.true30 ], [ 1800, %cond.false33 ]
  store i64 %cond35, i64* @expire_age, align 8
  br label %if.end36

if.end36:                                         ; preds = %cond.end34, %if.else24
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %cond.end22
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %cond.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end38
  %25 = load i32* @free_count, align 4
  %cmp39 = icmp sgt i32 %25, 100
  br i1 %cmp39, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %26 = load %struct.MapStruct** @free_maps, align 8
  store %struct.MapStruct* %26, %struct.MapStruct** %m, align 8
  %27 = load %struct.MapStruct** %m, align 8
  %next40 = getelementptr inbounds %struct.MapStruct* %27, i32 0, i32 9
  %28 = load %struct.MapStruct** %next40, align 8
  store %struct.MapStruct* %28, %struct.MapStruct** @free_maps, align 8
  %29 = load i32* @free_count, align 4
  %dec = add nsw i32 %29, -1
  store i32 %dec, i32* @free_count, align 4
  %30 = load %struct.MapStruct** %m, align 8
  %31 = bitcast %struct.MapStruct* %30 to i8*
  call void @free(i8* %31) #5
  %32 = load i32* @alloc_count, align 4
  %dec41 = add nsw i32 %32, -1
  store i32 %dec41, i32* @alloc_count, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @mmc_term() #0 {
entry:
  %m = alloca %struct.MapStruct*, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.MapStruct** @maps, align 8
  %cmp = icmp ne %struct.MapStruct* %0, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @really_unmap(%struct.MapStruct** @maps)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %while.cond1

while.cond1:                                      ; preds = %while.body3, %while.end
  %1 = load %struct.MapStruct** @free_maps, align 8
  %cmp2 = icmp ne %struct.MapStruct* %1, null
  br i1 %cmp2, label %while.body3, label %while.end5

while.body3:                                      ; preds = %while.cond1
  %2 = load %struct.MapStruct** @free_maps, align 8
  store %struct.MapStruct* %2, %struct.MapStruct** %m, align 8
  %3 = load %struct.MapStruct** %m, align 8
  %next = getelementptr inbounds %struct.MapStruct* %3, i32 0, i32 9
  %4 = load %struct.MapStruct** %next, align 8
  store %struct.MapStruct* %4, %struct.MapStruct** @free_maps, align 8
  %5 = load i32* @free_count, align 4
  %dec = add nsw i32 %5, -1
  store i32 %dec, i32* @free_count, align 4
  %6 = load %struct.MapStruct** %m, align 8
  %7 = bitcast %struct.MapStruct* %6 to i8*
  call void @free(i8* %7) #5
  %8 = load i32* @alloc_count, align 4
  %dec4 = add nsw i32 %8, -1
  store i32 %dec4, i32* @alloc_count, align 4
  br label %while.cond1

while.end5:                                       ; preds = %while.cond1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @mmc_logstats(i64 %secs) #0 {
entry:
  %secs.addr = alloca i64, align 8
  store i64 %secs, i64* %secs.addr, align 8
  %0 = load i32* @alloc_count, align 4
  %1 = load i32* @map_count, align 4
  %2 = load i64* @mapped_bytes, align 8
  %3 = load i32* @free_count, align 4
  %4 = load i32* @hash_size, align 4
  %5 = load i64* @expire_age, align 8
  call void (i32, i8*, ...)* @syslog(i32 5, i8* getelementptr inbounds ([92 x i8]* @.str8580, i32 0, i32 0), i32 %0, i32 %1, i64 %2, i32 %3, i32 %4, i64 %5)
  %6 = load i32* @map_count, align 4
  %7 = load i32* @free_count, align 4
  %add = add nsw i32 %6, %7
  %8 = load i32* @alloc_count, align 4
  %cmp = icmp ne i32 %add, %8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([25 x i8]* @.str9581, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
declare i32 @munmap(i8*, i64) #3

; Function Attrs: nounwind uwtable
define internal i32 @check_hash_size() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %m = alloca %struct.MapStruct*, align 8
  %0 = load %struct.MapStruct*** @hash_table, align 8
  %cmp = icmp eq %struct.MapStruct** %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1024, i32* @hash_size, align 4
  %1 = load i32* @hash_size, align 4
  %sub = sub nsw i32 %1, 1
  store i32 %sub, i32* @hash_mask, align 4
  br label %if.end7

if.else:                                          ; preds = %entry
  %2 = load i32* @hash_size, align 4
  %3 = load i32* @map_count, align 4
  %mul = mul nsw i32 %3, 3
  %cmp1 = icmp sge i32 %2, %mul
  br i1 %cmp1, label %if.then2, label %if.else3

if.then2:                                         ; preds = %if.else
  store i32 0, i32* %retval
  br label %return

if.else3:                                         ; preds = %if.else
  %4 = load %struct.MapStruct*** @hash_table, align 8
  %5 = bitcast %struct.MapStruct** %4 to i8*
  call void @free(i8* %5) #5
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.else3
  %6 = load i32* @hash_size, align 4
  %shl = shl i32 %6, 1
  store i32 %shl, i32* @hash_size, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %7 = load i32* @hash_size, align 4
  %8 = load i32* @map_count, align 4
  %mul4 = mul nsw i32 %8, 6
  %cmp5 = icmp slt i32 %7, %mul4
  br i1 %cmp5, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %9 = load i32* @hash_size, align 4
  %sub6 = sub nsw i32 %9, 1
  store i32 %sub6, i32* @hash_mask, align 4
  br label %if.end

if.end:                                           ; preds = %do.end
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then
  %10 = load i32* @hash_size, align 4
  %conv = sext i32 %10 to i64
  %mul8 = mul i64 %conv, 8
  %call = call noalias i8* @malloc(i64 %mul8) #5
  %11 = bitcast i8* %call to %struct.MapStruct**
  store %struct.MapStruct** %11, %struct.MapStruct*** @hash_table, align 8
  %12 = load %struct.MapStruct*** @hash_table, align 8
  %cmp9 = icmp eq %struct.MapStruct** %12, null
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end7
  store i32 -1, i32* %retval
  br label %return

if.end12:                                         ; preds = %if.end7
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end12
  %13 = load i32* %i, align 4
  %14 = load i32* @hash_size, align 4
  %cmp13 = icmp slt i32 %13, %14
  br i1 %cmp13, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load i32* %i, align 4
  %idxprom = sext i32 %15 to i64
  %16 = load %struct.MapStruct*** @hash_table, align 8
  %arrayidx = getelementptr inbounds %struct.MapStruct** %16, i64 %idxprom
  store %struct.MapStruct* null, %struct.MapStruct** %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load %struct.MapStruct** @maps, align 8
  store %struct.MapStruct* %18, %struct.MapStruct** %m, align 8
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc24, %for.end
  %19 = load %struct.MapStruct** %m, align 8
  %cmp16 = icmp ne %struct.MapStruct* %19, null
  br i1 %cmp16, label %for.body18, label %for.end25

for.body18:                                       ; preds = %for.cond15
  %20 = load %struct.MapStruct** %m, align 8
  %call19 = call i32 @add_hash(%struct.MapStruct* %20)
  %cmp20 = icmp slt i32 %call19, 0
  br i1 %cmp20, label %if.then22, label %if.end23

if.then22:                                        ; preds = %for.body18
  store i32 -1, i32* %retval
  br label %return

if.end23:                                         ; preds = %for.body18
  br label %for.inc24

for.inc24:                                        ; preds = %if.end23
  %21 = load %struct.MapStruct** %m, align 8
  %next = getelementptr inbounds %struct.MapStruct* %21, i32 0, i32 9
  %22 = load %struct.MapStruct** %next, align 8
  store %struct.MapStruct* %22, %struct.MapStruct** %m, align 8
  br label %for.cond15

for.end25:                                        ; preds = %for.cond15
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end25, %if.then22, %if.then11, %if.then2
  %23 = load i32* %retval
  ret i32 %23
}

; Function Attrs: nounwind uwtable
define internal %struct.MapStruct* @find_hash(i64 %ino, i64 %dev, i64 %size, i64 %ct) #0 {
entry:
  %retval = alloca %struct.MapStruct*, align 8
  %ino.addr = alloca i64, align 8
  %dev.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  %ct.addr = alloca i64, align 8
  %h = alloca i32, align 4
  %he = alloca i32, align 4
  %i = alloca i32, align 4
  %m = alloca %struct.MapStruct*, align 8
  store i64 %ino, i64* %ino.addr, align 8
  store i64 %dev, i64* %dev.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i64 %ct, i64* %ct.addr, align 8
  %0 = load i64* %ino.addr, align 8
  %1 = load i64* %dev.addr, align 8
  %2 = load i64* %size.addr, align 8
  %3 = load i64* %ct.addr, align 8
  %call = call i32 @hash(i64 %0, i64 %1, i64 %2, i64 %3)
  store i32 %call, i32* %h, align 4
  %4 = load i32* %h, align 4
  %5 = load i32* @hash_size, align 4
  %add = add i32 %4, %5
  %sub = sub i32 %add, 1
  %6 = load i32* @hash_mask, align 4
  %and = and i32 %sub, %6
  store i32 %and, i32* %he, align 4
  %7 = load i32* %h, align 4
  store i32 %7, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32* %i, align 4
  %idxprom = zext i32 %8 to i64
  %9 = load %struct.MapStruct*** @hash_table, align 8
  %arrayidx = getelementptr inbounds %struct.MapStruct** %9, i64 %idxprom
  %10 = load %struct.MapStruct** %arrayidx, align 8
  store %struct.MapStruct* %10, %struct.MapStruct** %m, align 8
  %11 = load %struct.MapStruct** %m, align 8
  %cmp = icmp eq %struct.MapStruct* %11, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.cond
  br label %for.end

if.end:                                           ; preds = %for.cond
  %12 = load %struct.MapStruct** %m, align 8
  %hash = getelementptr inbounds %struct.MapStruct* %12, i32 0, i32 7
  %13 = load i32* %hash, align 4
  %14 = load i32* %h, align 4
  %cmp1 = icmp eq i32 %13, %14
  br i1 %cmp1, label %land.lhs.true, label %if.end14

land.lhs.true:                                    ; preds = %if.end
  %15 = load %struct.MapStruct** %m, align 8
  %ino2 = getelementptr inbounds %struct.MapStruct* %15, i32 0, i32 0
  %16 = load i64* %ino2, align 8
  %17 = load i64* %ino.addr, align 8
  %cmp3 = icmp eq i64 %16, %17
  br i1 %cmp3, label %land.lhs.true4, label %if.end14

land.lhs.true4:                                   ; preds = %land.lhs.true
  %18 = load %struct.MapStruct** %m, align 8
  %dev5 = getelementptr inbounds %struct.MapStruct* %18, i32 0, i32 1
  %19 = load i64* %dev5, align 8
  %20 = load i64* %dev.addr, align 8
  %cmp6 = icmp eq i64 %19, %20
  br i1 %cmp6, label %land.lhs.true7, label %if.end14

land.lhs.true7:                                   ; preds = %land.lhs.true4
  %21 = load %struct.MapStruct** %m, align 8
  %size8 = getelementptr inbounds %struct.MapStruct* %21, i32 0, i32 2
  %22 = load i64* %size8, align 8
  %23 = load i64* %size.addr, align 8
  %cmp9 = icmp eq i64 %22, %23
  br i1 %cmp9, label %land.lhs.true10, label %if.end14

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %24 = load %struct.MapStruct** %m, align 8
  %ct11 = getelementptr inbounds %struct.MapStruct* %24, i32 0, i32 3
  %25 = load i64* %ct11, align 8
  %26 = load i64* %ct.addr, align 8
  %cmp12 = icmp eq i64 %25, %26
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %land.lhs.true10
  %27 = load %struct.MapStruct** %m, align 8
  store %struct.MapStruct* %27, %struct.MapStruct** %retval
  br label %return

if.end14:                                         ; preds = %land.lhs.true10, %land.lhs.true7, %land.lhs.true4, %land.lhs.true, %if.end
  %28 = load i32* %i, align 4
  %29 = load i32* %he, align 4
  %cmp15 = icmp eq i32 %28, %29
  br i1 %cmp15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.end14
  br label %for.end

if.end17:                                         ; preds = %if.end14
  br label %for.inc

for.inc:                                          ; preds = %if.end17
  %30 = load i32* %i, align 4
  %add18 = add i32 %30, 1
  %31 = load i32* @hash_mask, align 4
  %and19 = and i32 %add18, %31
  store i32 %and19, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then16, %if.then
  store %struct.MapStruct* null, %struct.MapStruct** %retval
  br label %return

return:                                           ; preds = %for.end, %if.then13
  %32 = load %struct.MapStruct** %retval
  ret %struct.MapStruct* %32
}

; Function Attrs: nounwind uwtable
define internal void @panic() #0 {
entry:
  %mm = alloca %struct.MapStruct**, align 8
  %m = alloca %struct.MapStruct*, align 8
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([42 x i8]* @.str11583, i32 0, i32 0))
  store %struct.MapStruct** @maps, %struct.MapStruct*** %mm, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end, %entry
  %0 = load %struct.MapStruct*** %mm, align 8
  %1 = load %struct.MapStruct** %0, align 8
  %cmp = icmp ne %struct.MapStruct* %1, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.MapStruct*** %mm, align 8
  %3 = load %struct.MapStruct** %2, align 8
  store %struct.MapStruct* %3, %struct.MapStruct** %m, align 8
  %4 = load %struct.MapStruct** %m, align 8
  %refcount = getelementptr inbounds %struct.MapStruct* %4, i32 0, i32 4
  %5 = load i32* %refcount, align 4
  %cmp1 = icmp eq i32 %5, 0
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %6 = load %struct.MapStruct*** %mm, align 8
  call void @really_unmap(%struct.MapStruct** %6)
  br label %if.end

if.else:                                          ; preds = %for.body
  %7 = load %struct.MapStruct*** %mm, align 8
  %8 = load %struct.MapStruct** %7, align 8
  %next = getelementptr inbounds %struct.MapStruct* %8, i32 0, i32 9
  store %struct.MapStruct** %next, %struct.MapStruct*** %mm, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @add_hash(%struct.MapStruct* %m) #0 {
entry:
  %retval = alloca i32, align 4
  %m.addr = alloca %struct.MapStruct*, align 8
  %h = alloca i32, align 4
  %he = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.MapStruct* %m, %struct.MapStruct** %m.addr, align 8
  %0 = load %struct.MapStruct** %m.addr, align 8
  %ino = getelementptr inbounds %struct.MapStruct* %0, i32 0, i32 0
  %1 = load i64* %ino, align 8
  %2 = load %struct.MapStruct** %m.addr, align 8
  %dev = getelementptr inbounds %struct.MapStruct* %2, i32 0, i32 1
  %3 = load i64* %dev, align 8
  %4 = load %struct.MapStruct** %m.addr, align 8
  %size = getelementptr inbounds %struct.MapStruct* %4, i32 0, i32 2
  %5 = load i64* %size, align 8
  %6 = load %struct.MapStruct** %m.addr, align 8
  %ct = getelementptr inbounds %struct.MapStruct* %6, i32 0, i32 3
  %7 = load i64* %ct, align 8
  %call = call i32 @hash(i64 %1, i64 %3, i64 %5, i64 %7)
  store i32 %call, i32* %h, align 4
  %8 = load i32* %h, align 4
  %9 = load i32* @hash_size, align 4
  %add = add i32 %8, %9
  %sub = sub i32 %add, 1
  %10 = load i32* @hash_mask, align 4
  %and = and i32 %sub, %10
  store i32 %and, i32* %he, align 4
  %11 = load i32* %h, align 4
  store i32 %11, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %12 = load i32* %i, align 4
  %idxprom = zext i32 %12 to i64
  %13 = load %struct.MapStruct*** @hash_table, align 8
  %arrayidx = getelementptr inbounds %struct.MapStruct** %13, i64 %idxprom
  %14 = load %struct.MapStruct** %arrayidx, align 8
  %cmp = icmp eq %struct.MapStruct* %14, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.cond
  %15 = load %struct.MapStruct** %m.addr, align 8
  %16 = load i32* %i, align 4
  %idxprom1 = zext i32 %16 to i64
  %17 = load %struct.MapStruct*** @hash_table, align 8
  %arrayidx2 = getelementptr inbounds %struct.MapStruct** %17, i64 %idxprom1
  store %struct.MapStruct* %15, %struct.MapStruct** %arrayidx2, align 8
  %18 = load i32* %h, align 4
  %19 = load %struct.MapStruct** %m.addr, align 8
  %hash = getelementptr inbounds %struct.MapStruct* %19, i32 0, i32 7
  store i32 %18, i32* %hash, align 4
  %20 = load i32* %i, align 4
  %21 = load %struct.MapStruct** %m.addr, align 8
  %hash_idx = getelementptr inbounds %struct.MapStruct* %21, i32 0, i32 8
  store i32 %20, i32* %hash_idx, align 4
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %for.cond
  %22 = load i32* %i, align 4
  %23 = load i32* %he, align 4
  %cmp3 = icmp eq i32 %22, %23
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  br label %for.end

if.end5:                                          ; preds = %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end5
  %24 = load i32* %i, align 4
  %add6 = add i32 %24, 1
  %25 = load i32* @hash_mask, align 4
  %and7 = and i32 %add6, %25
  store i32 %and7, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then4
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %26 = load i32* %retval
  ret i32 %26
}

; Function Attrs: nounwind uwtable
define internal void @really_unmap(%struct.MapStruct** %mm) #0 {
entry:
  %mm.addr = alloca %struct.MapStruct**, align 8
  %m = alloca %struct.MapStruct*, align 8
  store %struct.MapStruct** %mm, %struct.MapStruct*** %mm.addr, align 8
  %0 = load %struct.MapStruct*** %mm.addr, align 8
  %1 = load %struct.MapStruct** %0, align 8
  store %struct.MapStruct* %1, %struct.MapStruct** %m, align 8
  %2 = load %struct.MapStruct** %m, align 8
  %size = getelementptr inbounds %struct.MapStruct* %2, i32 0, i32 2
  %3 = load i64* %size, align 8
  %cmp = icmp ne i64 %3, 0
  br i1 %cmp, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  %4 = load %struct.MapStruct** %m, align 8
  %addr = getelementptr inbounds %struct.MapStruct* %4, i32 0, i32 6
  %5 = load i8** %addr, align 8
  %6 = load %struct.MapStruct** %m, align 8
  %size1 = getelementptr inbounds %struct.MapStruct* %6, i32 0, i32 2
  %7 = load i64* %size1, align 8
  %call = call i32 @munmap(i8* %5, i64 %7) #5
  %cmp2 = icmp slt i32 %call, 0
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([12 x i8]* @.str10582, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.then
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %8 = load %struct.MapStruct** %m, align 8
  %size5 = getelementptr inbounds %struct.MapStruct* %8, i32 0, i32 2
  %9 = load i64* %size5, align 8
  %10 = load i64* @mapped_bytes, align 8
  %sub = sub nsw i64 %10, %9
  store i64 %sub, i64* @mapped_bytes, align 8
  %11 = load %struct.MapStruct** %m, align 8
  %next = getelementptr inbounds %struct.MapStruct* %11, i32 0, i32 9
  %12 = load %struct.MapStruct** %next, align 8
  %13 = load %struct.MapStruct*** %mm.addr, align 8
  store %struct.MapStruct* %12, %struct.MapStruct** %13, align 8
  %14 = load i32* @map_count, align 4
  %dec = add nsw i32 %14, -1
  store i32 %dec, i32* @map_count, align 4
  %15 = load %struct.MapStruct** @free_maps, align 8
  %16 = load %struct.MapStruct** %m, align 8
  %next6 = getelementptr inbounds %struct.MapStruct* %16, i32 0, i32 9
  store %struct.MapStruct* %15, %struct.MapStruct** %next6, align 8
  %17 = load %struct.MapStruct** %m, align 8
  store %struct.MapStruct* %17, %struct.MapStruct** @free_maps, align 8
  %18 = load i32* @free_count, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* @free_count, align 4
  %19 = load %struct.MapStruct** %m, align 8
  %hash_idx = getelementptr inbounds %struct.MapStruct* %19, i32 0, i32 8
  %20 = load i32* %hash_idx, align 4
  %idxprom = sext i32 %20 to i64
  %21 = load %struct.MapStruct*** @hash_table, align 8
  %arrayidx = getelementptr inbounds %struct.MapStruct** %21, i64 %idxprom
  store %struct.MapStruct* null, %struct.MapStruct** %arrayidx, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @hash(i64 %ino, i64 %dev, i64 %size, i64 %ct) #0 {
entry:
  %ino.addr = alloca i64, align 8
  %dev.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  %ct.addr = alloca i64, align 8
  %h = alloca i32, align 4
  store i64 %ino, i64* %ino.addr, align 8
  store i64 %dev, i64* %dev.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i64 %ct, i64* %ct.addr, align 8
  store i32 177573, i32* %h, align 4
  %0 = load i64* %ino.addr, align 8
  %1 = load i32* %h, align 4
  %conv = zext i32 %1 to i64
  %xor = xor i64 %conv, %0
  %conv1 = trunc i64 %xor to i32
  store i32 %conv1, i32* %h, align 4
  %2 = load i32* %h, align 4
  %shl = shl i32 %2, 5
  %3 = load i32* %h, align 4
  %add = add i32 %3, %shl
  store i32 %add, i32* %h, align 4
  %4 = load i64* %dev.addr, align 8
  %5 = load i32* %h, align 4
  %conv2 = zext i32 %5 to i64
  %xor3 = xor i64 %conv2, %4
  %conv4 = trunc i64 %xor3 to i32
  store i32 %conv4, i32* %h, align 4
  %6 = load i32* %h, align 4
  %shl5 = shl i32 %6, 5
  %7 = load i32* %h, align 4
  %add6 = add i32 %7, %shl5
  store i32 %add6, i32* %h, align 4
  %8 = load i64* %size.addr, align 8
  %9 = load i32* %h, align 4
  %conv7 = zext i32 %9 to i64
  %xor8 = xor i64 %conv7, %8
  %conv9 = trunc i64 %xor8 to i32
  store i32 %conv9, i32* %h, align 4
  %10 = load i32* %h, align 4
  %shl10 = shl i32 %10, 5
  %11 = load i32* %h, align 4
  %add11 = add i32 %11, %shl10
  store i32 %add11, i32* %h, align 4
  %12 = load i64* %ct.addr, align 8
  %13 = load i32* %h, align 4
  %conv12 = zext i32 %13 to i64
  %xor13 = xor i64 %conv12, %12
  %conv14 = trunc i64 %xor13 to i32
  store i32 %conv14, i32* %h, align 4
  %14 = load i32* %h, align 4
  %15 = load i32* @hash_mask, align 4
  %and = and i32 %14, %15
  ret i32 %and
}

; Function Attrs: nounwind uwtable
define internal void @tmr_init() #0 {
entry:
  %h = alloca i32, align 4
  store i32 0, i32* %h, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %h, align 4
  %cmp = icmp slt i32 %0, 67
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32* %h, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [67 x %struct.TimerStruct*]* @timers, i32 0, i64 %idxprom
  store %struct.TimerStruct* null, %struct.TimerStruct** %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32* %h, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %h, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store %struct.TimerStruct* null, %struct.TimerStruct** @free_timers, align 8
  store i32 0, i32* @free_count594, align 4
  store i32 0, i32* @active_count, align 4
  store i32 0, i32* @alloc_count595, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.TimerStruct* @tmr_create(%struct.timeval* %nowP, void (i8*, %struct.timeval*)* %timer_proc, i8* %client_data.coerce, i64 %msecs, i32 %periodic) #0 {
entry:
  %retval = alloca %struct.TimerStruct*, align 8
  %client_data = alloca %union.ClientData, align 8
  %nowP.addr = alloca %struct.timeval*, align 8
  %timer_proc.addr = alloca void (i8*, %struct.timeval*)*, align 8
  %msecs.addr = alloca i64, align 8
  %periodic.addr = alloca i32, align 4
  %t = alloca %struct.TimerStruct*, align 8
  %coerce.dive = getelementptr %union.ClientData* %client_data, i32 0, i32 0
  store i8* %client_data.coerce, i8** %coerce.dive
  store %struct.timeval* %nowP, %struct.timeval** %nowP.addr, align 8
  store void (i8*, %struct.timeval*)* %timer_proc, void (i8*, %struct.timeval*)** %timer_proc.addr, align 8
  store i64 %msecs, i64* %msecs.addr, align 8
  store i32 %periodic, i32* %periodic.addr, align 4
  %0 = load %struct.TimerStruct** @free_timers, align 8
  %cmp = icmp ne %struct.TimerStruct* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.TimerStruct** @free_timers, align 8
  store %struct.TimerStruct* %1, %struct.TimerStruct** %t, align 8
  %2 = load %struct.TimerStruct** %t, align 8
  %next = getelementptr inbounds %struct.TimerStruct* %2, i32 0, i32 6
  %3 = load %struct.TimerStruct** %next, align 8
  store %struct.TimerStruct* %3, %struct.TimerStruct** @free_timers, align 8
  %4 = load i32* @free_count594, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* @free_count594, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i64 72) #5
  %5 = bitcast i8* %call to %struct.TimerStruct*
  store %struct.TimerStruct* %5, %struct.TimerStruct** %t, align 8
  %6 = load %struct.TimerStruct** %t, align 8
  %cmp1 = icmp eq %struct.TimerStruct* %6, null
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.else
  store %struct.TimerStruct* null, %struct.TimerStruct** %retval
  br label %return

if.end:                                           ; preds = %if.else
  %7 = load i32* @alloc_count595, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* @alloc_count595, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.end, %if.then
  %8 = load void (i8*, %struct.timeval*)** %timer_proc.addr, align 8
  %9 = load %struct.TimerStruct** %t, align 8
  %timer_proc4 = getelementptr inbounds %struct.TimerStruct* %9, i32 0, i32 0
  store void (i8*, %struct.timeval*)* %8, void (i8*, %struct.timeval*)** %timer_proc4, align 8
  %10 = load %struct.TimerStruct** %t, align 8
  %client_data5 = getelementptr inbounds %struct.TimerStruct* %10, i32 0, i32 1
  %11 = bitcast %union.ClientData* %client_data5 to i8*
  %12 = bitcast %union.ClientData* %client_data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* %12, i64 8, i32 8, i1 false)
  %13 = load i64* %msecs.addr, align 8
  %14 = load %struct.TimerStruct** %t, align 8
  %msecs6 = getelementptr inbounds %struct.TimerStruct* %14, i32 0, i32 2
  store i64 %13, i64* %msecs6, align 8
  %15 = load i32* %periodic.addr, align 4
  %16 = load %struct.TimerStruct** %t, align 8
  %periodic7 = getelementptr inbounds %struct.TimerStruct* %16, i32 0, i32 3
  store i32 %15, i32* %periodic7, align 4
  %17 = load %struct.timeval** %nowP.addr, align 8
  %cmp8 = icmp ne %struct.timeval* %17, null
  br i1 %cmp8, label %if.then9, label %if.else10

if.then9:                                         ; preds = %if.end3
  %18 = load %struct.TimerStruct** %t, align 8
  %time = getelementptr inbounds %struct.TimerStruct* %18, i32 0, i32 4
  %19 = load %struct.timeval** %nowP.addr, align 8
  %20 = bitcast %struct.timeval* %time to i8*
  %21 = bitcast %struct.timeval* %19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %20, i8* %21, i64 16, i32 8, i1 false)
  br label %if.end13

if.else10:                                        ; preds = %if.end3
  %22 = load %struct.TimerStruct** %t, align 8
  %time11 = getelementptr inbounds %struct.TimerStruct* %22, i32 0, i32 4
  %call12 = call i32 @gettimeofday(%struct.timeval* %time11, %struct.timezone* null) #5
  br label %if.end13

if.end13:                                         ; preds = %if.else10, %if.then9
  %23 = load i64* %msecs.addr, align 8
  %div = sdiv i64 %23, 1000
  %24 = load %struct.TimerStruct** %t, align 8
  %time14 = getelementptr inbounds %struct.TimerStruct* %24, i32 0, i32 4
  %tv_sec = getelementptr inbounds %struct.timeval* %time14, i32 0, i32 0
  %25 = load i64* %tv_sec, align 8
  %add = add nsw i64 %25, %div
  store i64 %add, i64* %tv_sec, align 8
  %26 = load i64* %msecs.addr, align 8
  %rem = srem i64 %26, 1000
  %mul = mul nsw i64 %rem, 1000
  %27 = load %struct.TimerStruct** %t, align 8
  %time15 = getelementptr inbounds %struct.TimerStruct* %27, i32 0, i32 4
  %tv_usec = getelementptr inbounds %struct.timeval* %time15, i32 0, i32 1
  %28 = load i64* %tv_usec, align 8
  %add16 = add nsw i64 %28, %mul
  store i64 %add16, i64* %tv_usec, align 8
  %29 = load %struct.TimerStruct** %t, align 8
  %time17 = getelementptr inbounds %struct.TimerStruct* %29, i32 0, i32 4
  %tv_usec18 = getelementptr inbounds %struct.timeval* %time17, i32 0, i32 1
  %30 = load i64* %tv_usec18, align 8
  %cmp19 = icmp sge i64 %30, 1000000
  br i1 %cmp19, label %if.then20, label %if.end30

if.then20:                                        ; preds = %if.end13
  %31 = load %struct.TimerStruct** %t, align 8
  %time21 = getelementptr inbounds %struct.TimerStruct* %31, i32 0, i32 4
  %tv_usec22 = getelementptr inbounds %struct.timeval* %time21, i32 0, i32 1
  %32 = load i64* %tv_usec22, align 8
  %div23 = sdiv i64 %32, 1000000
  %33 = load %struct.TimerStruct** %t, align 8
  %time24 = getelementptr inbounds %struct.TimerStruct* %33, i32 0, i32 4
  %tv_sec25 = getelementptr inbounds %struct.timeval* %time24, i32 0, i32 0
  %34 = load i64* %tv_sec25, align 8
  %add26 = add nsw i64 %34, %div23
  store i64 %add26, i64* %tv_sec25, align 8
  %35 = load %struct.TimerStruct** %t, align 8
  %time27 = getelementptr inbounds %struct.TimerStruct* %35, i32 0, i32 4
  %tv_usec28 = getelementptr inbounds %struct.timeval* %time27, i32 0, i32 1
  %36 = load i64* %tv_usec28, align 8
  %rem29 = srem i64 %36, 1000000
  store i64 %rem29, i64* %tv_usec28, align 8
  br label %if.end30

if.end30:                                         ; preds = %if.then20, %if.end13
  %37 = load %struct.TimerStruct** %t, align 8
  %call31 = call i32 @hash616(%struct.TimerStruct* %37)
  %38 = load %struct.TimerStruct** %t, align 8
  %hash = getelementptr inbounds %struct.TimerStruct* %38, i32 0, i32 7
  store i32 %call31, i32* %hash, align 4
  %39 = load %struct.TimerStruct** %t, align 8
  call void @l_add(%struct.TimerStruct* %39)
  %40 = load i32* @active_count, align 4
  %inc32 = add nsw i32 %40, 1
  store i32 %inc32, i32* @active_count, align 4
  %41 = load %struct.TimerStruct** %t, align 8
  store %struct.TimerStruct* %41, %struct.TimerStruct** %retval
  br label %return

return:                                           ; preds = %if.end30, %if.then2
  %42 = load %struct.TimerStruct** %retval
  ret %struct.TimerStruct* %42
}

; Function Attrs: nounwind uwtable
define internal %struct.timeval* @tmr_timeout(%struct.timeval* %nowP) #0 {
entry:
  %retval = alloca %struct.timeval*, align 8
  %nowP.addr = alloca %struct.timeval*, align 8
  %msecs = alloca i64, align 8
  store %struct.timeval* %nowP, %struct.timeval** %nowP.addr, align 8
  %0 = load %struct.timeval** %nowP.addr, align 8
  %call = call i64 @tmr_mstimeout(%struct.timeval* %0)
  store i64 %call, i64* %msecs, align 8
  %1 = load i64* %msecs, align 8
  %cmp = icmp eq i64 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.timeval* null, %struct.timeval** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i64* %msecs, align 8
  %div = sdiv i64 %2, 1000
  store i64 %div, i64* getelementptr inbounds (%struct.timeval* @tmr_timeout.timeout, i32 0, i32 0), align 8
  %3 = load i64* %msecs, align 8
  %rem = srem i64 %3, 1000
  %mul = mul nsw i64 %rem, 1000
  store i64 %mul, i64* getelementptr inbounds (%struct.timeval* @tmr_timeout.timeout, i32 0, i32 1), align 8
  store %struct.timeval* @tmr_timeout.timeout, %struct.timeval** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load %struct.timeval** %retval
  ret %struct.timeval* %4
}

; Function Attrs: nounwind uwtable
define internal i64 @tmr_mstimeout(%struct.timeval* %nowP) #0 {
entry:
  %retval = alloca i64, align 8
  %nowP.addr = alloca %struct.timeval*, align 8
  %h = alloca i32, align 4
  %gotone = alloca i32, align 4
  %msecs = alloca i64, align 8
  %m = alloca i64, align 8
  %t = alloca %struct.TimerStruct*, align 8
  store %struct.timeval* %nowP, %struct.timeval** %nowP.addr, align 8
  store i32 0, i32* %gotone, align 4
  store i64 0, i64* %msecs, align 8
  store i32 0, i32* %h, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %h, align 4
  %cmp = icmp slt i32 %0, 67
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32* %h, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [67 x %struct.TimerStruct*]* @timers, i32 0, i64 %idxprom
  %2 = load %struct.TimerStruct** %arrayidx, align 8
  store %struct.TimerStruct* %2, %struct.TimerStruct** %t, align 8
  %3 = load %struct.TimerStruct** %t, align 8
  %cmp1 = icmp ne %struct.TimerStruct* %3, null
  br i1 %cmp1, label %if.then, label %if.end10

if.then:                                          ; preds = %for.body
  %4 = load %struct.TimerStruct** %t, align 8
  %time = getelementptr inbounds %struct.TimerStruct* %4, i32 0, i32 4
  %tv_sec = getelementptr inbounds %struct.timeval* %time, i32 0, i32 0
  %5 = load i64* %tv_sec, align 8
  %6 = load %struct.timeval** %nowP.addr, align 8
  %tv_sec2 = getelementptr inbounds %struct.timeval* %6, i32 0, i32 0
  %7 = load i64* %tv_sec2, align 8
  %sub = sub nsw i64 %5, %7
  %mul = mul nsw i64 %sub, 1000
  %8 = load %struct.TimerStruct** %t, align 8
  %time3 = getelementptr inbounds %struct.TimerStruct* %8, i32 0, i32 4
  %tv_usec = getelementptr inbounds %struct.timeval* %time3, i32 0, i32 1
  %9 = load i64* %tv_usec, align 8
  %10 = load %struct.timeval** %nowP.addr, align 8
  %tv_usec4 = getelementptr inbounds %struct.timeval* %10, i32 0, i32 1
  %11 = load i64* %tv_usec4, align 8
  %sub5 = sub nsw i64 %9, %11
  %div = sdiv i64 %sub5, 1000
  %add = add nsw i64 %mul, %div
  store i64 %add, i64* %m, align 8
  %12 = load i32* %gotone, align 4
  %tobool = icmp ne i32 %12, 0
  br i1 %tobool, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then
  %13 = load i64* %m, align 8
  store i64 %13, i64* %msecs, align 8
  store i32 1, i32* %gotone, align 4
  br label %if.end9

if.else:                                          ; preds = %if.then
  %14 = load i64* %m, align 8
  %15 = load i64* %msecs, align 8
  %cmp7 = icmp slt i64 %14, %15
  br i1 %cmp7, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.else
  %16 = load i64* %m, align 8
  store i64 %16, i64* %msecs, align 8
  br label %if.end

if.end:                                           ; preds = %if.then8, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then6
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end10
  %17 = load i32* %h, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %h, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load i32* %gotone, align 4
  %tobool11 = icmp ne i32 %18, 0
  br i1 %tobool11, label %if.end13, label %if.then12

if.then12:                                        ; preds = %for.end
  store i64 -1, i64* %retval
  br label %return

if.end13:                                         ; preds = %for.end
  %19 = load i64* %msecs, align 8
  %cmp14 = icmp sle i64 %19, 0
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end13
  store i64 0, i64* %msecs, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %if.end13
  %20 = load i64* %msecs, align 8
  store i64 %20, i64* %retval
  br label %return

return:                                           ; preds = %if.end16, %if.then12
  %21 = load i64* %retval
  ret i64 %21
}

; Function Attrs: nounwind uwtable
define internal void @tmr_run(%struct.timeval* %nowP) #0 {
entry:
  %nowP.addr = alloca %struct.timeval*, align 8
  %h = alloca i32, align 4
  %t = alloca %struct.TimerStruct*, align 8
  %next = alloca %struct.TimerStruct*, align 8
  store %struct.timeval* %nowP, %struct.timeval** %nowP.addr, align 8
  store i32 0, i32* %h, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc36, %entry
  %0 = load i32* %h, align 4
  %cmp = icmp slt i32 %0, 67
  br i1 %cmp, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond
  %1 = load i32* %h, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [67 x %struct.TimerStruct*]* @timers, i32 0, i64 %idxprom
  %2 = load %struct.TimerStruct** %arrayidx, align 8
  store %struct.TimerStruct* %2, %struct.TimerStruct** %t, align 8
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load %struct.TimerStruct** %t, align 8
  %cmp2 = icmp ne %struct.TimerStruct* %3, null
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load %struct.TimerStruct** %t, align 8
  %next4 = getelementptr inbounds %struct.TimerStruct* %4, i32 0, i32 6
  %5 = load %struct.TimerStruct** %next4, align 8
  store %struct.TimerStruct* %5, %struct.TimerStruct** %next, align 8
  %6 = load %struct.TimerStruct** %t, align 8
  %time = getelementptr inbounds %struct.TimerStruct* %6, i32 0, i32 4
  %tv_sec = getelementptr inbounds %struct.timeval* %time, i32 0, i32 0
  %7 = load i64* %tv_sec, align 8
  %8 = load %struct.timeval** %nowP.addr, align 8
  %tv_sec5 = getelementptr inbounds %struct.timeval* %8, i32 0, i32 0
  %9 = load i64* %tv_sec5, align 8
  %cmp6 = icmp sgt i64 %7, %9
  br i1 %cmp6, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body3
  %10 = load %struct.TimerStruct** %t, align 8
  %time7 = getelementptr inbounds %struct.TimerStruct* %10, i32 0, i32 4
  %tv_sec8 = getelementptr inbounds %struct.timeval* %time7, i32 0, i32 0
  %11 = load i64* %tv_sec8, align 8
  %12 = load %struct.timeval** %nowP.addr, align 8
  %tv_sec9 = getelementptr inbounds %struct.timeval* %12, i32 0, i32 0
  %13 = load i64* %tv_sec9, align 8
  %cmp10 = icmp eq i64 %11, %13
  br i1 %cmp10, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %14 = load %struct.TimerStruct** %t, align 8
  %time11 = getelementptr inbounds %struct.TimerStruct* %14, i32 0, i32 4
  %tv_usec = getelementptr inbounds %struct.timeval* %time11, i32 0, i32 1
  %15 = load i64* %tv_usec, align 8
  %16 = load %struct.timeval** %nowP.addr, align 8
  %tv_usec12 = getelementptr inbounds %struct.timeval* %16, i32 0, i32 1
  %17 = load i64* %tv_usec12, align 8
  %cmp13 = icmp sgt i64 %15, %17
  br i1 %cmp13, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %for.body3
  br label %for.end

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %18 = load %struct.TimerStruct** %t, align 8
  %timer_proc = getelementptr inbounds %struct.TimerStruct* %18, i32 0, i32 0
  %19 = load void (i8*, %struct.timeval*)** %timer_proc, align 8
  %20 = load %struct.TimerStruct** %t, align 8
  %client_data = getelementptr inbounds %struct.TimerStruct* %20, i32 0, i32 1
  %21 = load %struct.timeval** %nowP.addr, align 8
  %coerce.dive = getelementptr %union.ClientData* %client_data, i32 0, i32 0
  %22 = load i8** %coerce.dive
  call void %19(i8* %22, %struct.timeval* %21)
  %23 = load %struct.TimerStruct** %t, align 8
  %periodic = getelementptr inbounds %struct.TimerStruct* %23, i32 0, i32 3
  %24 = load i32* %periodic, align 4
  %tobool = icmp ne i32 %24, 0
  br i1 %tobool, label %if.then14, label %if.else

if.then14:                                        ; preds = %if.end
  %25 = load %struct.TimerStruct** %t, align 8
  %msecs = getelementptr inbounds %struct.TimerStruct* %25, i32 0, i32 2
  %26 = load i64* %msecs, align 8
  %div = sdiv i64 %26, 1000
  %27 = load %struct.TimerStruct** %t, align 8
  %time15 = getelementptr inbounds %struct.TimerStruct* %27, i32 0, i32 4
  %tv_sec16 = getelementptr inbounds %struct.timeval* %time15, i32 0, i32 0
  %28 = load i64* %tv_sec16, align 8
  %add = add nsw i64 %28, %div
  store i64 %add, i64* %tv_sec16, align 8
  %29 = load %struct.TimerStruct** %t, align 8
  %msecs17 = getelementptr inbounds %struct.TimerStruct* %29, i32 0, i32 2
  %30 = load i64* %msecs17, align 8
  %rem = srem i64 %30, 1000
  %mul = mul nsw i64 %rem, 1000
  %31 = load %struct.TimerStruct** %t, align 8
  %time18 = getelementptr inbounds %struct.TimerStruct* %31, i32 0, i32 4
  %tv_usec19 = getelementptr inbounds %struct.timeval* %time18, i32 0, i32 1
  %32 = load i64* %tv_usec19, align 8
  %add20 = add nsw i64 %32, %mul
  store i64 %add20, i64* %tv_usec19, align 8
  %33 = load %struct.TimerStruct** %t, align 8
  %time21 = getelementptr inbounds %struct.TimerStruct* %33, i32 0, i32 4
  %tv_usec22 = getelementptr inbounds %struct.timeval* %time21, i32 0, i32 1
  %34 = load i64* %tv_usec22, align 8
  %cmp23 = icmp sge i64 %34, 1000000
  br i1 %cmp23, label %if.then24, label %if.end34

if.then24:                                        ; preds = %if.then14
  %35 = load %struct.TimerStruct** %t, align 8
  %time25 = getelementptr inbounds %struct.TimerStruct* %35, i32 0, i32 4
  %tv_usec26 = getelementptr inbounds %struct.timeval* %time25, i32 0, i32 1
  %36 = load i64* %tv_usec26, align 8
  %div27 = sdiv i64 %36, 1000000
  %37 = load %struct.TimerStruct** %t, align 8
  %time28 = getelementptr inbounds %struct.TimerStruct* %37, i32 0, i32 4
  %tv_sec29 = getelementptr inbounds %struct.timeval* %time28, i32 0, i32 0
  %38 = load i64* %tv_sec29, align 8
  %add30 = add nsw i64 %38, %div27
  store i64 %add30, i64* %tv_sec29, align 8
  %39 = load %struct.TimerStruct** %t, align 8
  %time31 = getelementptr inbounds %struct.TimerStruct* %39, i32 0, i32 4
  %tv_usec32 = getelementptr inbounds %struct.timeval* %time31, i32 0, i32 1
  %40 = load i64* %tv_usec32, align 8
  %rem33 = srem i64 %40, 1000000
  store i64 %rem33, i64* %tv_usec32, align 8
  br label %if.end34

if.end34:                                         ; preds = %if.then24, %if.then14
  %41 = load %struct.TimerStruct** %t, align 8
  call void @l_resort(%struct.TimerStruct* %41)
  br label %if.end35

if.else:                                          ; preds = %if.end
  %42 = load %struct.TimerStruct** %t, align 8
  call void @tmr_cancel(%struct.TimerStruct* %42)
  br label %if.end35

if.end35:                                         ; preds = %if.else, %if.end34
  br label %for.inc

for.inc:                                          ; preds = %if.end35
  %43 = load %struct.TimerStruct** %next, align 8
  store %struct.TimerStruct* %43, %struct.TimerStruct** %t, align 8
  br label %for.cond1

for.end:                                          ; preds = %if.then, %for.cond1
  br label %for.inc36

for.inc36:                                        ; preds = %for.end
  %44 = load i32* %h, align 4
  %inc = add nsw i32 %44, 1
  store i32 %inc, i32* %h, align 4
  br label %for.cond

for.end37:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @tmr_cancel(%struct.TimerStruct* %t) #0 {
entry:
  %t.addr = alloca %struct.TimerStruct*, align 8
  store %struct.TimerStruct* %t, %struct.TimerStruct** %t.addr, align 8
  %0 = load %struct.TimerStruct** %t.addr, align 8
  call void @l_remove(%struct.TimerStruct* %0)
  %1 = load i32* @active_count, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* @active_count, align 4
  %2 = load %struct.TimerStruct** @free_timers, align 8
  %3 = load %struct.TimerStruct** %t.addr, align 8
  %next = getelementptr inbounds %struct.TimerStruct* %3, i32 0, i32 6
  store %struct.TimerStruct* %2, %struct.TimerStruct** %next, align 8
  %4 = load %struct.TimerStruct** %t.addr, align 8
  store %struct.TimerStruct* %4, %struct.TimerStruct** @free_timers, align 8
  %5 = load i32* @free_count594, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* @free_count594, align 4
  %6 = load %struct.TimerStruct** %t.addr, align 8
  %prev = getelementptr inbounds %struct.TimerStruct* %6, i32 0, i32 5
  store %struct.TimerStruct* null, %struct.TimerStruct** %prev, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @tmr_reset(%struct.timeval* %nowP, %struct.TimerStruct* %t) #0 {
entry:
  %nowP.addr = alloca %struct.timeval*, align 8
  %t.addr = alloca %struct.TimerStruct*, align 8
  store %struct.timeval* %nowP, %struct.timeval** %nowP.addr, align 8
  store %struct.TimerStruct* %t, %struct.TimerStruct** %t.addr, align 8
  %0 = load %struct.TimerStruct** %t.addr, align 8
  %time = getelementptr inbounds %struct.TimerStruct* %0, i32 0, i32 4
  %1 = load %struct.timeval** %nowP.addr, align 8
  %2 = bitcast %struct.timeval* %time to i8*
  %3 = bitcast %struct.timeval* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* %3, i64 16, i32 8, i1 false)
  %4 = load %struct.TimerStruct** %t.addr, align 8
  %msecs = getelementptr inbounds %struct.TimerStruct* %4, i32 0, i32 2
  %5 = load i64* %msecs, align 8
  %div = sdiv i64 %5, 1000
  %6 = load %struct.TimerStruct** %t.addr, align 8
  %time1 = getelementptr inbounds %struct.TimerStruct* %6, i32 0, i32 4
  %tv_sec = getelementptr inbounds %struct.timeval* %time1, i32 0, i32 0
  %7 = load i64* %tv_sec, align 8
  %add = add nsw i64 %7, %div
  store i64 %add, i64* %tv_sec, align 8
  %8 = load %struct.TimerStruct** %t.addr, align 8
  %msecs2 = getelementptr inbounds %struct.TimerStruct* %8, i32 0, i32 2
  %9 = load i64* %msecs2, align 8
  %rem = srem i64 %9, 1000
  %mul = mul nsw i64 %rem, 1000
  %10 = load %struct.TimerStruct** %t.addr, align 8
  %time3 = getelementptr inbounds %struct.TimerStruct* %10, i32 0, i32 4
  %tv_usec = getelementptr inbounds %struct.timeval* %time3, i32 0, i32 1
  %11 = load i64* %tv_usec, align 8
  %add4 = add nsw i64 %11, %mul
  store i64 %add4, i64* %tv_usec, align 8
  %12 = load %struct.TimerStruct** %t.addr, align 8
  %time5 = getelementptr inbounds %struct.TimerStruct* %12, i32 0, i32 4
  %tv_usec6 = getelementptr inbounds %struct.timeval* %time5, i32 0, i32 1
  %13 = load i64* %tv_usec6, align 8
  %cmp = icmp sge i64 %13, 1000000
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %14 = load %struct.TimerStruct** %t.addr, align 8
  %time7 = getelementptr inbounds %struct.TimerStruct* %14, i32 0, i32 4
  %tv_usec8 = getelementptr inbounds %struct.timeval* %time7, i32 0, i32 1
  %15 = load i64* %tv_usec8, align 8
  %div9 = sdiv i64 %15, 1000000
  %16 = load %struct.TimerStruct** %t.addr, align 8
  %time10 = getelementptr inbounds %struct.TimerStruct* %16, i32 0, i32 4
  %tv_sec11 = getelementptr inbounds %struct.timeval* %time10, i32 0, i32 0
  %17 = load i64* %tv_sec11, align 8
  %add12 = add nsw i64 %17, %div9
  store i64 %add12, i64* %tv_sec11, align 8
  %18 = load %struct.TimerStruct** %t.addr, align 8
  %time13 = getelementptr inbounds %struct.TimerStruct* %18, i32 0, i32 4
  %tv_usec14 = getelementptr inbounds %struct.timeval* %time13, i32 0, i32 1
  %19 = load i64* %tv_usec14, align 8
  %rem15 = srem i64 %19, 1000000
  store i64 %rem15, i64* %tv_usec14, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %20 = load %struct.TimerStruct** %t.addr, align 8
  call void @l_resort(%struct.TimerStruct* %20)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @tmr_cleanup() #0 {
entry:
  %t = alloca %struct.TimerStruct*, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.TimerStruct** @free_timers, align 8
  %cmp = icmp ne %struct.TimerStruct* %0, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load %struct.TimerStruct** @free_timers, align 8
  store %struct.TimerStruct* %1, %struct.TimerStruct** %t, align 8
  %2 = load %struct.TimerStruct** %t, align 8
  %next = getelementptr inbounds %struct.TimerStruct* %2, i32 0, i32 6
  %3 = load %struct.TimerStruct** %next, align 8
  store %struct.TimerStruct* %3, %struct.TimerStruct** @free_timers, align 8
  %4 = load i32* @free_count594, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* @free_count594, align 4
  %5 = load %struct.TimerStruct** %t, align 8
  %6 = bitcast %struct.TimerStruct* %5 to i8*
  call void @free(i8* %6) #5
  %7 = load i32* @alloc_count595, align 4
  %dec1 = add nsw i32 %7, -1
  store i32 %dec1, i32* @alloc_count595, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @tmr_term() #0 {
entry:
  %h = alloca i32, align 4
  store i32 0, i32* %h, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %h, align 4
  %cmp = icmp slt i32 %0, 67
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %1 = load i32* %h, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [67 x %struct.TimerStruct*]* @timers, i32 0, i64 %idxprom
  %2 = load %struct.TimerStruct** %arrayidx, align 8
  %cmp1 = icmp ne %struct.TimerStruct* %2, null
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32* %h, align 4
  %idxprom2 = sext i32 %3 to i64
  %arrayidx3 = getelementptr inbounds [67 x %struct.TimerStruct*]* @timers, i32 0, i64 %idxprom2
  %4 = load %struct.TimerStruct** %arrayidx3, align 8
  call void @tmr_cancel(%struct.TimerStruct* %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %5 = load i32* %h, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %h, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @tmr_cleanup()
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @tmr_logstats(i64 %secs) #0 {
entry:
  %secs.addr = alloca i64, align 8
  store i64 %secs, i64* %secs.addr, align 8
  %0 = load i32* @alloc_count595, align 4
  %1 = load i32* @active_count, align 4
  %2 = load i32* @free_count594, align 4
  call void (i32, i8*, ...)* @syslog(i32 5, i8* getelementptr inbounds ([44 x i8]* @.str596, i32 0, i32 0), i32 %0, i32 %1, i32 %2)
  %3 = load i32* @active_count, align 4
  %4 = load i32* @free_count594, align 4
  %add = add nsw i32 %3, %4
  %5 = load i32* @alloc_count595, align 4
  %cmp = icmp ne i32 %add, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void (i32, i8*, ...)* @syslog(i32 3, i8* getelementptr inbounds ([27 x i8]* @.str1597, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @hash616(%struct.TimerStruct* %t) #0 {
entry:
  %t.addr = alloca %struct.TimerStruct*, align 8
  store %struct.TimerStruct* %t, %struct.TimerStruct** %t.addr, align 8
  %0 = load %struct.TimerStruct** %t.addr, align 8
  %time = getelementptr inbounds %struct.TimerStruct* %0, i32 0, i32 4
  %tv_sec = getelementptr inbounds %struct.timeval* %time, i32 0, i32 0
  %1 = load i64* %tv_sec, align 8
  %conv = trunc i64 %1 to i32
  %2 = load %struct.TimerStruct** %t.addr, align 8
  %time1 = getelementptr inbounds %struct.TimerStruct* %2, i32 0, i32 4
  %tv_usec = getelementptr inbounds %struct.timeval* %time1, i32 0, i32 1
  %3 = load i64* %tv_usec, align 8
  %conv2 = trunc i64 %3 to i32
  %xor = xor i32 %conv, %conv2
  %rem = urem i32 %xor, 67
  ret i32 %rem
}

; Function Attrs: nounwind uwtable
define internal void @l_add(%struct.TimerStruct* %t) #0 {
entry:
  %t.addr = alloca %struct.TimerStruct*, align 8
  %h = alloca i32, align 4
  %t2 = alloca %struct.TimerStruct*, align 8
  %t2prev = alloca %struct.TimerStruct*, align 8
  store %struct.TimerStruct* %t, %struct.TimerStruct** %t.addr, align 8
  %0 = load %struct.TimerStruct** %t.addr, align 8
  %hash = getelementptr inbounds %struct.TimerStruct* %0, i32 0, i32 7
  %1 = load i32* %hash, align 4
  store i32 %1, i32* %h, align 4
  %2 = load i32* %h, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [67 x %struct.TimerStruct*]* @timers, i32 0, i64 %idxprom
  %3 = load %struct.TimerStruct** %arrayidx, align 8
  store %struct.TimerStruct* %3, %struct.TimerStruct** %t2, align 8
  %4 = load %struct.TimerStruct** %t2, align 8
  %cmp = icmp eq %struct.TimerStruct* %4, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %5 = load %struct.TimerStruct** %t.addr, align 8
  %6 = load i32* %h, align 4
  %idxprom1 = sext i32 %6 to i64
  %arrayidx2 = getelementptr inbounds [67 x %struct.TimerStruct*]* @timers, i32 0, i64 %idxprom1
  store %struct.TimerStruct* %5, %struct.TimerStruct** %arrayidx2, align 8
  %7 = load %struct.TimerStruct** %t.addr, align 8
  %next = getelementptr inbounds %struct.TimerStruct* %7, i32 0, i32 6
  store %struct.TimerStruct* null, %struct.TimerStruct** %next, align 8
  %8 = load %struct.TimerStruct** %t.addr, align 8
  %prev = getelementptr inbounds %struct.TimerStruct* %8, i32 0, i32 5
  store %struct.TimerStruct* null, %struct.TimerStruct** %prev, align 8
  br label %if.end51

if.else:                                          ; preds = %entry
  %9 = load %struct.TimerStruct** %t.addr, align 8
  %time = getelementptr inbounds %struct.TimerStruct* %9, i32 0, i32 4
  %tv_sec = getelementptr inbounds %struct.timeval* %time, i32 0, i32 0
  %10 = load i64* %tv_sec, align 8
  %11 = load %struct.TimerStruct** %t2, align 8
  %time3 = getelementptr inbounds %struct.TimerStruct* %11, i32 0, i32 4
  %tv_sec4 = getelementptr inbounds %struct.timeval* %time3, i32 0, i32 0
  %12 = load i64* %tv_sec4, align 8
  %cmp5 = icmp slt i64 %10, %12
  br i1 %cmp5, label %if.then15, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %13 = load %struct.TimerStruct** %t.addr, align 8
  %time6 = getelementptr inbounds %struct.TimerStruct* %13, i32 0, i32 4
  %tv_sec7 = getelementptr inbounds %struct.timeval* %time6, i32 0, i32 0
  %14 = load i64* %tv_sec7, align 8
  %15 = load %struct.TimerStruct** %t2, align 8
  %time8 = getelementptr inbounds %struct.TimerStruct* %15, i32 0, i32 4
  %tv_sec9 = getelementptr inbounds %struct.timeval* %time8, i32 0, i32 0
  %16 = load i64* %tv_sec9, align 8
  %cmp10 = icmp eq i64 %14, %16
  br i1 %cmp10, label %land.lhs.true, label %if.else21

land.lhs.true:                                    ; preds = %lor.lhs.false
  %17 = load %struct.TimerStruct** %t.addr, align 8
  %time11 = getelementptr inbounds %struct.TimerStruct* %17, i32 0, i32 4
  %tv_usec = getelementptr inbounds %struct.timeval* %time11, i32 0, i32 1
  %18 = load i64* %tv_usec, align 8
  %19 = load %struct.TimerStruct** %t2, align 8
  %time12 = getelementptr inbounds %struct.TimerStruct* %19, i32 0, i32 4
  %tv_usec13 = getelementptr inbounds %struct.timeval* %time12, i32 0, i32 1
  %20 = load i64* %tv_usec13, align 8
  %cmp14 = icmp sle i64 %18, %20
  br i1 %cmp14, label %if.then15, label %if.else21

if.then15:                                        ; preds = %land.lhs.true, %if.else
  %21 = load %struct.TimerStruct** %t.addr, align 8
  %22 = load i32* %h, align 4
  %idxprom16 = sext i32 %22 to i64
  %arrayidx17 = getelementptr inbounds [67 x %struct.TimerStruct*]* @timers, i32 0, i64 %idxprom16
  store %struct.TimerStruct* %21, %struct.TimerStruct** %arrayidx17, align 8
  %23 = load %struct.TimerStruct** %t.addr, align 8
  %prev18 = getelementptr inbounds %struct.TimerStruct* %23, i32 0, i32 5
  store %struct.TimerStruct* null, %struct.TimerStruct** %prev18, align 8
  %24 = load %struct.TimerStruct** %t2, align 8
  %25 = load %struct.TimerStruct** %t.addr, align 8
  %next19 = getelementptr inbounds %struct.TimerStruct* %25, i32 0, i32 6
  store %struct.TimerStruct* %24, %struct.TimerStruct** %next19, align 8
  %26 = load %struct.TimerStruct** %t.addr, align 8
  %27 = load %struct.TimerStruct** %t2, align 8
  %prev20 = getelementptr inbounds %struct.TimerStruct* %27, i32 0, i32 5
  store %struct.TimerStruct* %26, %struct.TimerStruct** %prev20, align 8
  br label %if.end50

if.else21:                                        ; preds = %land.lhs.true, %lor.lhs.false
  %28 = load %struct.TimerStruct** %t2, align 8
  store %struct.TimerStruct* %28, %struct.TimerStruct** %t2prev, align 8
  %29 = load %struct.TimerStruct** %t2, align 8
  %next22 = getelementptr inbounds %struct.TimerStruct* %29, i32 0, i32 6
  %30 = load %struct.TimerStruct** %next22, align 8
  store %struct.TimerStruct* %30, %struct.TimerStruct** %t2, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else21
  %31 = load %struct.TimerStruct** %t2, align 8
  %cmp23 = icmp ne %struct.TimerStruct* %31, null
  br i1 %cmp23, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %32 = load %struct.TimerStruct** %t.addr, align 8
  %time24 = getelementptr inbounds %struct.TimerStruct* %32, i32 0, i32 4
  %tv_sec25 = getelementptr inbounds %struct.timeval* %time24, i32 0, i32 0
  %33 = load i64* %tv_sec25, align 8
  %34 = load %struct.TimerStruct** %t2, align 8
  %time26 = getelementptr inbounds %struct.TimerStruct* %34, i32 0, i32 4
  %tv_sec27 = getelementptr inbounds %struct.timeval* %time26, i32 0, i32 0
  %35 = load i64* %tv_sec27, align 8
  %cmp28 = icmp slt i64 %33, %35
  br i1 %cmp28, label %if.then41, label %lor.lhs.false29

lor.lhs.false29:                                  ; preds = %for.body
  %36 = load %struct.TimerStruct** %t.addr, align 8
  %time30 = getelementptr inbounds %struct.TimerStruct* %36, i32 0, i32 4
  %tv_sec31 = getelementptr inbounds %struct.timeval* %time30, i32 0, i32 0
  %37 = load i64* %tv_sec31, align 8
  %38 = load %struct.TimerStruct** %t2, align 8
  %time32 = getelementptr inbounds %struct.TimerStruct* %38, i32 0, i32 4
  %tv_sec33 = getelementptr inbounds %struct.timeval* %time32, i32 0, i32 0
  %39 = load i64* %tv_sec33, align 8
  %cmp34 = icmp eq i64 %37, %39
  br i1 %cmp34, label %land.lhs.true35, label %if.end

land.lhs.true35:                                  ; preds = %lor.lhs.false29
  %40 = load %struct.TimerStruct** %t.addr, align 8
  %time36 = getelementptr inbounds %struct.TimerStruct* %40, i32 0, i32 4
  %tv_usec37 = getelementptr inbounds %struct.timeval* %time36, i32 0, i32 1
  %41 = load i64* %tv_usec37, align 8
  %42 = load %struct.TimerStruct** %t2, align 8
  %time38 = getelementptr inbounds %struct.TimerStruct* %42, i32 0, i32 4
  %tv_usec39 = getelementptr inbounds %struct.timeval* %time38, i32 0, i32 1
  %43 = load i64* %tv_usec39, align 8
  %cmp40 = icmp sle i64 %41, %43
  br i1 %cmp40, label %if.then41, label %if.end

if.then41:                                        ; preds = %land.lhs.true35, %for.body
  %44 = load %struct.TimerStruct** %t.addr, align 8
  %45 = load %struct.TimerStruct** %t2prev, align 8
  %next42 = getelementptr inbounds %struct.TimerStruct* %45, i32 0, i32 6
  store %struct.TimerStruct* %44, %struct.TimerStruct** %next42, align 8
  %46 = load %struct.TimerStruct** %t2prev, align 8
  %47 = load %struct.TimerStruct** %t.addr, align 8
  %prev43 = getelementptr inbounds %struct.TimerStruct* %47, i32 0, i32 5
  store %struct.TimerStruct* %46, %struct.TimerStruct** %prev43, align 8
  %48 = load %struct.TimerStruct** %t2, align 8
  %49 = load %struct.TimerStruct** %t.addr, align 8
  %next44 = getelementptr inbounds %struct.TimerStruct* %49, i32 0, i32 6
  store %struct.TimerStruct* %48, %struct.TimerStruct** %next44, align 8
  %50 = load %struct.TimerStruct** %t.addr, align 8
  %51 = load %struct.TimerStruct** %t2, align 8
  %prev45 = getelementptr inbounds %struct.TimerStruct* %51, i32 0, i32 5
  store %struct.TimerStruct* %50, %struct.TimerStruct** %prev45, align 8
  br label %if.end51

if.end:                                           ; preds = %land.lhs.true35, %lor.lhs.false29
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %52 = load %struct.TimerStruct** %t2, align 8
  store %struct.TimerStruct* %52, %struct.TimerStruct** %t2prev, align 8
  %53 = load %struct.TimerStruct** %t2, align 8
  %next46 = getelementptr inbounds %struct.TimerStruct* %53, i32 0, i32 6
  %54 = load %struct.TimerStruct** %next46, align 8
  store %struct.TimerStruct* %54, %struct.TimerStruct** %t2, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %55 = load %struct.TimerStruct** %t.addr, align 8
  %56 = load %struct.TimerStruct** %t2prev, align 8
  %next47 = getelementptr inbounds %struct.TimerStruct* %56, i32 0, i32 6
  store %struct.TimerStruct* %55, %struct.TimerStruct** %next47, align 8
  %57 = load %struct.TimerStruct** %t2prev, align 8
  %58 = load %struct.TimerStruct** %t.addr, align 8
  %prev48 = getelementptr inbounds %struct.TimerStruct* %58, i32 0, i32 5
  store %struct.TimerStruct* %57, %struct.TimerStruct** %prev48, align 8
  %59 = load %struct.TimerStruct** %t.addr, align 8
  %next49 = getelementptr inbounds %struct.TimerStruct* %59, i32 0, i32 6
  store %struct.TimerStruct* null, %struct.TimerStruct** %next49, align 8
  br label %if.end50

if.end50:                                         ; preds = %for.end, %if.then15
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then41, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @l_resort(%struct.TimerStruct* %t) #0 {
entry:
  %t.addr = alloca %struct.TimerStruct*, align 8
  store %struct.TimerStruct* %t, %struct.TimerStruct** %t.addr, align 8
  %0 = load %struct.TimerStruct** %t.addr, align 8
  call void @l_remove(%struct.TimerStruct* %0)
  %1 = load %struct.TimerStruct** %t.addr, align 8
  %call = call i32 @hash616(%struct.TimerStruct* %1)
  %2 = load %struct.TimerStruct** %t.addr, align 8
  %hash = getelementptr inbounds %struct.TimerStruct* %2, i32 0, i32 7
  store i32 %call, i32* %hash, align 4
  %3 = load %struct.TimerStruct** %t.addr, align 8
  call void @l_add(%struct.TimerStruct* %3)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @l_remove(%struct.TimerStruct* %t) #0 {
entry:
  %t.addr = alloca %struct.TimerStruct*, align 8
  %h = alloca i32, align 4
  store %struct.TimerStruct* %t, %struct.TimerStruct** %t.addr, align 8
  %0 = load %struct.TimerStruct** %t.addr, align 8
  %hash = getelementptr inbounds %struct.TimerStruct* %0, i32 0, i32 7
  %1 = load i32* %hash, align 4
  store i32 %1, i32* %h, align 4
  %2 = load %struct.TimerStruct** %t.addr, align 8
  %prev = getelementptr inbounds %struct.TimerStruct* %2, i32 0, i32 5
  %3 = load %struct.TimerStruct** %prev, align 8
  %cmp = icmp eq %struct.TimerStruct* %3, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load %struct.TimerStruct** %t.addr, align 8
  %next = getelementptr inbounds %struct.TimerStruct* %4, i32 0, i32 6
  %5 = load %struct.TimerStruct** %next, align 8
  %6 = load i32* %h, align 4
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds [67 x %struct.TimerStruct*]* @timers, i32 0, i64 %idxprom
  store %struct.TimerStruct* %5, %struct.TimerStruct** %arrayidx, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load %struct.TimerStruct** %t.addr, align 8
  %next1 = getelementptr inbounds %struct.TimerStruct* %7, i32 0, i32 6
  %8 = load %struct.TimerStruct** %next1, align 8
  %9 = load %struct.TimerStruct** %t.addr, align 8
  %prev2 = getelementptr inbounds %struct.TimerStruct* %9, i32 0, i32 5
  %10 = load %struct.TimerStruct** %prev2, align 8
  %next3 = getelementptr inbounds %struct.TimerStruct* %10, i32 0, i32 6
  store %struct.TimerStruct* %8, %struct.TimerStruct** %next3, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %struct.TimerStruct** %t.addr, align 8
  %next4 = getelementptr inbounds %struct.TimerStruct* %11, i32 0, i32 6
  %12 = load %struct.TimerStruct** %next4, align 8
  %cmp5 = icmp ne %struct.TimerStruct* %12, null
  br i1 %cmp5, label %if.then6, label %if.end10

if.then6:                                         ; preds = %if.end
  %13 = load %struct.TimerStruct** %t.addr, align 8
  %prev7 = getelementptr inbounds %struct.TimerStruct* %13, i32 0, i32 5
  %14 = load %struct.TimerStruct** %prev7, align 8
  %15 = load %struct.TimerStruct** %t.addr, align 8
  %next8 = getelementptr inbounds %struct.TimerStruct* %15, i32 0, i32 6
  %16 = load %struct.TimerStruct** %next8, align 8
  %prev9 = getelementptr inbounds %struct.TimerStruct* %16, i32 0, i32 5
  store %struct.TimerStruct* %14, %struct.TimerStruct** %prev9, align 8
  br label %if.end10

if.end10:                                         ; preds = %if.then6, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @match(i8* %pattern, i8* %string) #0 {
entry:
  %retval = alloca i32, align 4
  %pattern.addr = alloca i8*, align 8
  %string.addr = alloca i8*, align 8
  %or = alloca i8*, align 8
  store i8* %pattern, i8** %pattern.addr, align 8
  store i8* %string, i8** %string.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end6, %entry
  %0 = load i8** %pattern.addr, align 8
  %call = call i8* @strchr(i8* %0, i32 124) #8
  store i8* %call, i8** %or, align 8
  %1 = load i8** %or, align 8
  %cmp = icmp eq i8* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.cond
  %2 = load i8** %pattern.addr, align 8
  %3 = load i8** %pattern.addr, align 8
  %call1 = call i64 @strlen(i8* %3) #8
  %conv = trunc i64 %call1 to i32
  %4 = load i8** %string.addr, align 8
  %call2 = call i32 @match_one(i8* %2, i32 %conv, i8* %4)
  store i32 %call2, i32* %retval
  br label %return

if.end:                                           ; preds = %for.cond
  %5 = load i8** %pattern.addr, align 8
  %6 = load i8** %or, align 8
  %7 = load i8** %pattern.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %6 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %7 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv3 = trunc i64 %sub.ptr.sub to i32
  %8 = load i8** %string.addr, align 8
  %call4 = call i32 @match_one(i8* %5, i32 %conv3, i8* %8)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

if.end6:                                          ; preds = %if.end
  %9 = load i8** %or, align 8
  %add.ptr = getelementptr inbounds i8* %9, i64 1
  store i8* %add.ptr, i8** %pattern.addr, align 8
  br label %for.cond

return:                                           ; preds = %if.then5, %if.then
  %10 = load i32* %retval
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define internal i32 @match_one(i8* %pattern, i32 %patternlen, i8* %string) #0 {
entry:
  %retval = alloca i32, align 4
  %pattern.addr = alloca i8*, align 8
  %patternlen.addr = alloca i32, align 4
  %string.addr = alloca i8*, align 8
  %p = alloca i8*, align 8
  %i = alloca i32, align 4
  %pl = alloca i32, align 4
  store i8* %pattern, i8** %pattern.addr, align 8
  store i32 %patternlen, i32* %patternlen.addr, align 4
  store i8* %string, i8** %string.addr, align 8
  %0 = load i8** %pattern.addr, align 8
  store i8* %0, i8** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc40, %entry
  %1 = load i8** %p, align 8
  %2 = load i8** %pattern.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %3 = load i32* %patternlen.addr, align 4
  %conv = sext i32 %3 to i64
  %cmp = icmp slt i64 %sub.ptr.sub, %conv
  br i1 %cmp, label %for.body, label %for.end43

for.body:                                         ; preds = %for.cond
  %4 = load i8** %p, align 8
  %5 = load i8* %4, align 1
  %conv2 = sext i8 %5 to i32
  %cmp3 = icmp eq i32 %conv2, 63
  br i1 %cmp3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %6 = load i8** %string.addr, align 8
  %7 = load i8* %6, align 1
  %conv5 = sext i8 %7 to i32
  %cmp6 = icmp ne i32 %conv5, 0
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %for.inc40

if.end:                                           ; preds = %land.lhs.true, %for.body
  %8 = load i8** %p, align 8
  %9 = load i8* %8, align 1
  %conv8 = sext i8 %9 to i32
  %cmp9 = icmp eq i32 %conv8, 42
  br i1 %cmp9, label %if.then11, label %if.end33

if.then11:                                        ; preds = %if.end
  %10 = load i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8* %10, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  %11 = load i8** %p, align 8
  %12 = load i8* %11, align 1
  %conv12 = sext i8 %12 to i32
  %cmp13 = icmp eq i32 %conv12, 42
  br i1 %cmp13, label %if.then15, label %if.else

if.then15:                                        ; preds = %if.then11
  %13 = load i8** %p, align 8
  %incdec.ptr16 = getelementptr inbounds i8* %13, i32 1
  store i8* %incdec.ptr16, i8** %p, align 8
  %14 = load i8** %string.addr, align 8
  %call = call i64 @strlen(i8* %14) #8
  %conv17 = trunc i64 %call to i32
  store i32 %conv17, i32* %i, align 4
  br label %if.end20

if.else:                                          ; preds = %if.then11
  %15 = load i8** %string.addr, align 8
  %call18 = call i64 @strcspn(i8* %15, i8* getelementptr inbounds ([2 x i8]* @.str617, i32 0, i32 0)) #8
  %conv19 = trunc i64 %call18 to i32
  store i32 %conv19, i32* %i, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.else, %if.then15
  %16 = load i32* %patternlen.addr, align 4
  %conv21 = sext i32 %16 to i64
  %17 = load i8** %p, align 8
  %18 = load i8** %pattern.addr, align 8
  %sub.ptr.lhs.cast22 = ptrtoint i8* %17 to i64
  %sub.ptr.rhs.cast23 = ptrtoint i8* %18 to i64
  %sub.ptr.sub24 = sub i64 %sub.ptr.lhs.cast22, %sub.ptr.rhs.cast23
  %sub = sub nsw i64 %conv21, %sub.ptr.sub24
  %conv25 = trunc i64 %sub to i32
  store i32 %conv25, i32* %pl, align 4
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc, %if.end20
  %19 = load i32* %i, align 4
  %cmp27 = icmp sge i32 %19, 0
  br i1 %cmp27, label %for.body29, label %for.end

for.body29:                                       ; preds = %for.cond26
  %20 = load i8** %p, align 8
  %21 = load i32* %pl, align 4
  %22 = load i32* %i, align 4
  %idxprom = sext i32 %22 to i64
  %23 = load i8** %string.addr, align 8
  %arrayidx = getelementptr inbounds i8* %23, i64 %idxprom
  %call30 = call i32 @match_one(i8* %20, i32 %21, i8* %arrayidx)
  %tobool = icmp ne i32 %call30, 0
  br i1 %tobool, label %if.then31, label %if.end32

if.then31:                                        ; preds = %for.body29
  store i32 1, i32* %retval
  br label %return

if.end32:                                         ; preds = %for.body29
  br label %for.inc

for.inc:                                          ; preds = %if.end32
  %24 = load i32* %i, align 4
  %dec = add nsw i32 %24, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond26

for.end:                                          ; preds = %for.cond26
  store i32 0, i32* %retval
  br label %return

if.end33:                                         ; preds = %if.end
  %25 = load i8** %p, align 8
  %26 = load i8* %25, align 1
  %conv34 = sext i8 %26 to i32
  %27 = load i8** %string.addr, align 8
  %28 = load i8* %27, align 1
  %conv35 = sext i8 %28 to i32
  %cmp36 = icmp ne i32 %conv34, %conv35
  br i1 %cmp36, label %if.then38, label %if.end39

if.then38:                                        ; preds = %if.end33
  store i32 0, i32* %retval
  br label %return

if.end39:                                         ; preds = %if.end33
  br label %for.inc40

for.inc40:                                        ; preds = %if.end39, %if.then
  %29 = load i8** %p, align 8
  %incdec.ptr41 = getelementptr inbounds i8* %29, i32 1
  store i8* %incdec.ptr41, i8** %p, align 8
  %30 = load i8** %string.addr, align 8
  %incdec.ptr42 = getelementptr inbounds i8* %30, i32 1
  store i8* %incdec.ptr42, i8** %string.addr, align 8
  br label %for.cond

for.end43:                                        ; preds = %for.cond
  %31 = load i8** %string.addr, align 8
  %32 = load i8* %31, align 1
  %conv44 = sext i8 %32 to i32
  %cmp45 = icmp eq i32 %conv44, 0
  br i1 %cmp45, label %if.then47, label %if.end48

if.then47:                                        ; preds = %for.end43
  store i32 1, i32* %retval
  br label %return

if.end48:                                         ; preds = %for.end43
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end48, %if.then47, %if.then38, %for.end, %if.then31
  %33 = load i32* %retval
  ret i32 %33
}

; Function Attrs: nounwind uwtable
define internal i64 @tdate_parse(i8* %str) #0 {
entry:
  %retval = alloca i64, align 8
  %str.addr = alloca i8*, align 8
  %tm = alloca %struct.tm, align 8
  %cp = alloca i8*, align 8
  %str_mon = alloca [500 x i8], align 16
  %str_wday = alloca [500 x i8], align 16
  %tm_sec = alloca i32, align 4
  %tm_min = alloca i32, align 4
  %tm_hour = alloca i32, align 4
  %tm_mday = alloca i32, align 4
  %tm_year = alloca i32, align 4
  %tm_mon = alloca i64, align 8
  %tm_wday = alloca i64, align 8
  %t = alloca i64, align 8
  store i8* %str, i8** %str.addr, align 8
  %0 = bitcast %struct.tm* %tm to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 56, i32 1, i1 false)
  %1 = load i8** %str.addr, align 8
  store i8* %1, i8** %cp, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8** %cp, align 8
  %3 = load i8* %2, align 1
  %conv = sext i8 %3 to i32
  %cmp = icmp eq i32 %conv, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %for.cond
  %4 = load i8** %cp, align 8
  %5 = load i8* %4, align 1
  %conv2 = sext i8 %5 to i32
  %cmp3 = icmp eq i32 %conv2, 9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %for.cond
  %6 = phi i1 [ true, %for.cond ], [ %cmp3, %lor.rhs ]
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %lor.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i8** %cp, align 8
  %incdec.ptr = getelementptr inbounds i8* %7, i32 1
  store i8* %incdec.ptr, i8** %cp, align 8
  br label %for.cond

for.end:                                          ; preds = %lor.end
  %8 = load i8** %cp, align 8
  %arraydecay = getelementptr inbounds [500 x i8]* %str_mon, i32 0, i32 0
  %call = call i32 (i8*, i8*, ...)* @__isoc99_sscanf(i8* %8, i8* getelementptr inbounds ([32 x i8]* @.str620, i32 0, i32 0), i32* %tm_mday, i8* %arraydecay, i32* %tm_year, i32* %tm_hour, i32* %tm_min, i32* %tm_sec) #5
  %cmp5 = icmp eq i32 %call, 6
  br i1 %cmp5, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.end
  %arraydecay7 = getelementptr inbounds [500 x i8]* %str_mon, i32 0, i32 0
  %call8 = call i32 @scan_mon(i8* %arraydecay7, i64* %tm_mon)
  %tobool = icmp ne i32 %call8, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %9 = load i32* %tm_mday, align 4
  %tm_mday9 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 3
  store i32 %9, i32* %tm_mday9, align 4
  %10 = load i64* %tm_mon, align 8
  %conv10 = trunc i64 %10 to i32
  %tm_mon11 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 4
  store i32 %conv10, i32* %tm_mon11, align 4
  %11 = load i32* %tm_year, align 4
  %tm_year12 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 5
  store i32 %11, i32* %tm_year12, align 4
  %12 = load i32* %tm_hour, align 4
  %tm_hour13 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 2
  store i32 %12, i32* %tm_hour13, align 4
  %13 = load i32* %tm_min, align 4
  %tm_min14 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 1
  store i32 %13, i32* %tm_min14, align 4
  %14 = load i32* %tm_sec, align 4
  %tm_sec15 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 0
  store i32 %14, i32* %tm_sec15, align 4
  br label %if.end144

if.else:                                          ; preds = %land.lhs.true, %for.end
  %15 = load i8** %cp, align 8
  %arraydecay16 = getelementptr inbounds [500 x i8]* %str_mon, i32 0, i32 0
  %call17 = call i32 (i8*, i8*, ...)* @__isoc99_sscanf(i8* %15, i8* getelementptr inbounds ([32 x i8]* @.str1621, i32 0, i32 0), i32* %tm_mday, i8* %arraydecay16, i32* %tm_year, i32* %tm_hour, i32* %tm_min, i32* %tm_sec) #5
  %cmp18 = icmp eq i32 %call17, 6
  br i1 %cmp18, label %land.lhs.true20, label %if.else32

land.lhs.true20:                                  ; preds = %if.else
  %arraydecay21 = getelementptr inbounds [500 x i8]* %str_mon, i32 0, i32 0
  %call22 = call i32 @scan_mon(i8* %arraydecay21, i64* %tm_mon)
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %if.then24, label %if.else32

if.then24:                                        ; preds = %land.lhs.true20
  %16 = load i32* %tm_mday, align 4
  %tm_mday25 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 3
  store i32 %16, i32* %tm_mday25, align 4
  %17 = load i64* %tm_mon, align 8
  %conv26 = trunc i64 %17 to i32
  %tm_mon27 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 4
  store i32 %conv26, i32* %tm_mon27, align 4
  %18 = load i32* %tm_year, align 4
  %tm_year28 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 5
  store i32 %18, i32* %tm_year28, align 4
  %19 = load i32* %tm_hour, align 4
  %tm_hour29 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 2
  store i32 %19, i32* %tm_hour29, align 4
  %20 = load i32* %tm_min, align 4
  %tm_min30 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 1
  store i32 %20, i32* %tm_min30, align 4
  %21 = load i32* %tm_sec, align 4
  %tm_sec31 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 0
  store i32 %21, i32* %tm_sec31, align 4
  br label %if.end143

if.else32:                                        ; preds = %land.lhs.true20, %if.else
  %22 = load i8** %cp, align 8
  %arraydecay33 = getelementptr inbounds [500 x i8]* %str_mon, i32 0, i32 0
  %call34 = call i32 (i8*, i8*, ...)* @__isoc99_sscanf(i8* %22, i8* getelementptr inbounds ([32 x i8]* @.str2622, i32 0, i32 0), i32* %tm_hour, i32* %tm_min, i32* %tm_sec, i32* %tm_mday, i8* %arraydecay33, i32* %tm_year) #5
  %cmp35 = icmp eq i32 %call34, 6
  br i1 %cmp35, label %land.lhs.true37, label %if.else49

land.lhs.true37:                                  ; preds = %if.else32
  %arraydecay38 = getelementptr inbounds [500 x i8]* %str_mon, i32 0, i32 0
  %call39 = call i32 @scan_mon(i8* %arraydecay38, i64* %tm_mon)
  %tobool40 = icmp ne i32 %call39, 0
  br i1 %tobool40, label %if.then41, label %if.else49

if.then41:                                        ; preds = %land.lhs.true37
  %23 = load i32* %tm_hour, align 4
  %tm_hour42 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 2
  store i32 %23, i32* %tm_hour42, align 4
  %24 = load i32* %tm_min, align 4
  %tm_min43 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 1
  store i32 %24, i32* %tm_min43, align 4
  %25 = load i32* %tm_sec, align 4
  %tm_sec44 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 0
  store i32 %25, i32* %tm_sec44, align 4
  %26 = load i32* %tm_mday, align 4
  %tm_mday45 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 3
  store i32 %26, i32* %tm_mday45, align 4
  %27 = load i64* %tm_mon, align 8
  %conv46 = trunc i64 %27 to i32
  %tm_mon47 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 4
  store i32 %conv46, i32* %tm_mon47, align 4
  %28 = load i32* %tm_year, align 4
  %tm_year48 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 5
  store i32 %28, i32* %tm_year48, align 4
  br label %if.end142

if.else49:                                        ; preds = %land.lhs.true37, %if.else32
  %29 = load i8** %cp, align 8
  %arraydecay50 = getelementptr inbounds [500 x i8]* %str_mon, i32 0, i32 0
  %call51 = call i32 (i8*, i8*, ...)* @__isoc99_sscanf(i8* %29, i8* getelementptr inbounds ([32 x i8]* @.str3623, i32 0, i32 0), i32* %tm_hour, i32* %tm_min, i32* %tm_sec, i32* %tm_mday, i8* %arraydecay50, i32* %tm_year) #5
  %cmp52 = icmp eq i32 %call51, 6
  br i1 %cmp52, label %land.lhs.true54, label %if.else66

land.lhs.true54:                                  ; preds = %if.else49
  %arraydecay55 = getelementptr inbounds [500 x i8]* %str_mon, i32 0, i32 0
  %call56 = call i32 @scan_mon(i8* %arraydecay55, i64* %tm_mon)
  %tobool57 = icmp ne i32 %call56, 0
  br i1 %tobool57, label %if.then58, label %if.else66

if.then58:                                        ; preds = %land.lhs.true54
  %30 = load i32* %tm_hour, align 4
  %tm_hour59 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 2
  store i32 %30, i32* %tm_hour59, align 4
  %31 = load i32* %tm_min, align 4
  %tm_min60 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 1
  store i32 %31, i32* %tm_min60, align 4
  %32 = load i32* %tm_sec, align 4
  %tm_sec61 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 0
  store i32 %32, i32* %tm_sec61, align 4
  %33 = load i32* %tm_mday, align 4
  %tm_mday62 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 3
  store i32 %33, i32* %tm_mday62, align 4
  %34 = load i64* %tm_mon, align 8
  %conv63 = trunc i64 %34 to i32
  %tm_mon64 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 4
  store i32 %conv63, i32* %tm_mon64, align 4
  %35 = load i32* %tm_year, align 4
  %tm_year65 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 5
  store i32 %35, i32* %tm_year65, align 4
  br label %if.end141

if.else66:                                        ; preds = %land.lhs.true54, %if.else49
  %36 = load i8** %cp, align 8
  %arraydecay67 = getelementptr inbounds [500 x i8]* %str_wday, i32 0, i32 0
  %arraydecay68 = getelementptr inbounds [500 x i8]* %str_mon, i32 0, i32 0
  %call69 = call i32 (i8*, i8*, ...)* @__isoc99_sscanf(i8* %36, i8* getelementptr inbounds ([46 x i8]* @.str4624, i32 0, i32 0), i8* %arraydecay67, i32* %tm_mday, i8* %arraydecay68, i32* %tm_year, i32* %tm_hour, i32* %tm_min, i32* %tm_sec) #5
  %cmp70 = icmp eq i32 %call69, 7
  br i1 %cmp70, label %land.lhs.true72, label %if.else90

land.lhs.true72:                                  ; preds = %if.else66
  %arraydecay73 = getelementptr inbounds [500 x i8]* %str_wday, i32 0, i32 0
  %call74 = call i32 @scan_wday(i8* %arraydecay73, i64* %tm_wday)
  %tobool75 = icmp ne i32 %call74, 0
  br i1 %tobool75, label %land.lhs.true76, label %if.else90

land.lhs.true76:                                  ; preds = %land.lhs.true72
  %arraydecay77 = getelementptr inbounds [500 x i8]* %str_mon, i32 0, i32 0
  %call78 = call i32 @scan_mon(i8* %arraydecay77, i64* %tm_mon)
  %tobool79 = icmp ne i32 %call78, 0
  br i1 %tobool79, label %if.then80, label %if.else90

if.then80:                                        ; preds = %land.lhs.true76
  %37 = load i64* %tm_wday, align 8
  %conv81 = trunc i64 %37 to i32
  %tm_wday82 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 6
  store i32 %conv81, i32* %tm_wday82, align 4
  %38 = load i32* %tm_mday, align 4
  %tm_mday83 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 3
  store i32 %38, i32* %tm_mday83, align 4
  %39 = load i64* %tm_mon, align 8
  %conv84 = trunc i64 %39 to i32
  %tm_mon85 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 4
  store i32 %conv84, i32* %tm_mon85, align 4
  %40 = load i32* %tm_year, align 4
  %tm_year86 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 5
  store i32 %40, i32* %tm_year86, align 4
  %41 = load i32* %tm_hour, align 4
  %tm_hour87 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 2
  store i32 %41, i32* %tm_hour87, align 4
  %42 = load i32* %tm_min, align 4
  %tm_min88 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 1
  store i32 %42, i32* %tm_min88, align 4
  %43 = load i32* %tm_sec, align 4
  %tm_sec89 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 0
  store i32 %43, i32* %tm_sec89, align 4
  br label %if.end140

if.else90:                                        ; preds = %land.lhs.true76, %land.lhs.true72, %if.else66
  %44 = load i8** %cp, align 8
  %arraydecay91 = getelementptr inbounds [500 x i8]* %str_wday, i32 0, i32 0
  %arraydecay92 = getelementptr inbounds [500 x i8]* %str_mon, i32 0, i32 0
  %call93 = call i32 (i8*, i8*, ...)* @__isoc99_sscanf(i8* %44, i8* getelementptr inbounds ([46 x i8]* @.str5625, i32 0, i32 0), i8* %arraydecay91, i32* %tm_mday, i8* %arraydecay92, i32* %tm_year, i32* %tm_hour, i32* %tm_min, i32* %tm_sec) #5
  %cmp94 = icmp eq i32 %call93, 7
  br i1 %cmp94, label %land.lhs.true96, label %if.else114

land.lhs.true96:                                  ; preds = %if.else90
  %arraydecay97 = getelementptr inbounds [500 x i8]* %str_wday, i32 0, i32 0
  %call98 = call i32 @scan_wday(i8* %arraydecay97, i64* %tm_wday)
  %tobool99 = icmp ne i32 %call98, 0
  br i1 %tobool99, label %land.lhs.true100, label %if.else114

land.lhs.true100:                                 ; preds = %land.lhs.true96
  %arraydecay101 = getelementptr inbounds [500 x i8]* %str_mon, i32 0, i32 0
  %call102 = call i32 @scan_mon(i8* %arraydecay101, i64* %tm_mon)
  %tobool103 = icmp ne i32 %call102, 0
  br i1 %tobool103, label %if.then104, label %if.else114

if.then104:                                       ; preds = %land.lhs.true100
  %45 = load i64* %tm_wday, align 8
  %conv105 = trunc i64 %45 to i32
  %tm_wday106 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 6
  store i32 %conv105, i32* %tm_wday106, align 4
  %46 = load i32* %tm_mday, align 4
  %tm_mday107 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 3
  store i32 %46, i32* %tm_mday107, align 4
  %47 = load i64* %tm_mon, align 8
  %conv108 = trunc i64 %47 to i32
  %tm_mon109 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 4
  store i32 %conv108, i32* %tm_mon109, align 4
  %48 = load i32* %tm_year, align 4
  %tm_year110 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 5
  store i32 %48, i32* %tm_year110, align 4
  %49 = load i32* %tm_hour, align 4
  %tm_hour111 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 2
  store i32 %49, i32* %tm_hour111, align 4
  %50 = load i32* %tm_min, align 4
  %tm_min112 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 1
  store i32 %50, i32* %tm_min112, align 4
  %51 = load i32* %tm_sec, align 4
  %tm_sec113 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 0
  store i32 %51, i32* %tm_sec113, align 4
  br label %if.end139

if.else114:                                       ; preds = %land.lhs.true100, %land.lhs.true96, %if.else90
  %52 = load i8** %cp, align 8
  %arraydecay115 = getelementptr inbounds [500 x i8]* %str_wday, i32 0, i32 0
  %arraydecay116 = getelementptr inbounds [500 x i8]* %str_mon, i32 0, i32 0
  %call117 = call i32 (i8*, i8*, ...)* @__isoc99_sscanf(i8* %52, i8* getelementptr inbounds ([45 x i8]* @.str6626, i32 0, i32 0), i8* %arraydecay115, i8* %arraydecay116, i32* %tm_mday, i32* %tm_hour, i32* %tm_min, i32* %tm_sec, i32* %tm_year) #5
  %cmp118 = icmp eq i32 %call117, 7
  br i1 %cmp118, label %land.lhs.true120, label %if.else138

land.lhs.true120:                                 ; preds = %if.else114
  %arraydecay121 = getelementptr inbounds [500 x i8]* %str_wday, i32 0, i32 0
  %call122 = call i32 @scan_wday(i8* %arraydecay121, i64* %tm_wday)
  %tobool123 = icmp ne i32 %call122, 0
  br i1 %tobool123, label %land.lhs.true124, label %if.else138

land.lhs.true124:                                 ; preds = %land.lhs.true120
  %arraydecay125 = getelementptr inbounds [500 x i8]* %str_mon, i32 0, i32 0
  %call126 = call i32 @scan_mon(i8* %arraydecay125, i64* %tm_mon)
  %tobool127 = icmp ne i32 %call126, 0
  br i1 %tobool127, label %if.then128, label %if.else138

if.then128:                                       ; preds = %land.lhs.true124
  %53 = load i64* %tm_wday, align 8
  %conv129 = trunc i64 %53 to i32
  %tm_wday130 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 6
  store i32 %conv129, i32* %tm_wday130, align 4
  %54 = load i64* %tm_mon, align 8
  %conv131 = trunc i64 %54 to i32
  %tm_mon132 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 4
  store i32 %conv131, i32* %tm_mon132, align 4
  %55 = load i32* %tm_mday, align 4
  %tm_mday133 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 3
  store i32 %55, i32* %tm_mday133, align 4
  %56 = load i32* %tm_hour, align 4
  %tm_hour134 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 2
  store i32 %56, i32* %tm_hour134, align 4
  %57 = load i32* %tm_min, align 4
  %tm_min135 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 1
  store i32 %57, i32* %tm_min135, align 4
  %58 = load i32* %tm_sec, align 4
  %tm_sec136 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 0
  store i32 %58, i32* %tm_sec136, align 4
  %59 = load i32* %tm_year, align 4
  %tm_year137 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 5
  store i32 %59, i32* %tm_year137, align 4
  br label %if.end

if.else138:                                       ; preds = %land.lhs.true124, %land.lhs.true120, %if.else114
  store i64 -1, i64* %retval
  br label %return

if.end:                                           ; preds = %if.then128
  br label %if.end139

if.end139:                                        ; preds = %if.end, %if.then104
  br label %if.end140

if.end140:                                        ; preds = %if.end139, %if.then80
  br label %if.end141

if.end141:                                        ; preds = %if.end140, %if.then58
  br label %if.end142

if.end142:                                        ; preds = %if.end141, %if.then41
  br label %if.end143

if.end143:                                        ; preds = %if.end142, %if.then24
  br label %if.end144

if.end144:                                        ; preds = %if.end143, %if.then
  %tm_year145 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 5
  %60 = load i32* %tm_year145, align 4
  %cmp146 = icmp sgt i32 %60, 1900
  br i1 %cmp146, label %if.then148, label %if.else150

if.then148:                                       ; preds = %if.end144
  %tm_year149 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 5
  %61 = load i32* %tm_year149, align 4
  %sub = sub nsw i32 %61, 1900
  store i32 %sub, i32* %tm_year149, align 4
  br label %if.end157

if.else150:                                       ; preds = %if.end144
  %tm_year151 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 5
  %62 = load i32* %tm_year151, align 4
  %cmp152 = icmp slt i32 %62, 70
  br i1 %cmp152, label %if.then154, label %if.end156

if.then154:                                       ; preds = %if.else150
  %tm_year155 = getelementptr inbounds %struct.tm* %tm, i32 0, i32 5
  %63 = load i32* %tm_year155, align 4
  %add = add nsw i32 %63, 100
  store i32 %add, i32* %tm_year155, align 4
  br label %if.end156

if.end156:                                        ; preds = %if.then154, %if.else150
  br label %if.end157

if.end157:                                        ; preds = %if.end156, %if.then148
  %call158 = call i64 @tm_to_time(%struct.tm* %tm)
  store i64 %call158, i64* %t, align 8
  %64 = load i64* %t, align 8
  store i64 %64, i64* %retval
  br label %return

return:                                           ; preds = %if.end157, %if.else138
  %65 = load i64* %retval
  ret i64 %65
}

; Function Attrs: nounwind uwtable
define internal i32 @scan_mon(i8* %str_mon, i64* %tm_monP) #0 {
entry:
  %str_mon.addr = alloca i8*, align 8
  %tm_monP.addr = alloca i64*, align 8
  store i8* %str_mon, i8** %str_mon.addr, align 8
  store i64* %tm_monP, i64** %tm_monP.addr, align 8
  %0 = load i32* @scan_mon.sorted, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @qsort(i8* bitcast ([23 x %struct.strlong]* @scan_mon.mon_tab to i8*), i64 23, i64 16, i32 (i8*, i8*)* @strlong_compare)
  store i32 1, i32* @scan_mon.sorted, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i8** %str_mon.addr, align 8
  call void @pound_case(i8* %1)
  %2 = load i8** %str_mon.addr, align 8
  %3 = load i64** %tm_monP.addr, align 8
  %call = call i32 @strlong_search(i8* %2, %struct.strlong* getelementptr inbounds ([23 x %struct.strlong]* @scan_mon.mon_tab, i32 0, i32 0), i32 23, i64* %3)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal i32 @scan_wday(i8* %str_wday, i64* %tm_wdayP) #0 {
entry:
  %str_wday.addr = alloca i8*, align 8
  %tm_wdayP.addr = alloca i64*, align 8
  store i8* %str_wday, i8** %str_wday.addr, align 8
  store i64* %tm_wdayP, i64** %tm_wdayP.addr, align 8
  %0 = load i32* @scan_wday.sorted, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @qsort(i8* bitcast ([14 x %struct.strlong]* @scan_wday.wday_tab to i8*), i64 14, i64 16, i32 (i8*, i8*)* @strlong_compare)
  store i32 1, i32* @scan_wday.sorted, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i8** %str_wday.addr, align 8
  call void @pound_case(i8* %1)
  %2 = load i8** %str_wday.addr, align 8
  %3 = load i64** %tm_wdayP.addr, align 8
  %call = call i32 @strlong_search(i8* %2, %struct.strlong* getelementptr inbounds ([14 x %struct.strlong]* @scan_wday.wday_tab, i32 0, i32 0), i32 14, i64* %3)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal i64 @tm_to_time(%struct.tm* %tmP) #0 {
entry:
  %tmP.addr = alloca %struct.tm*, align 8
  %t = alloca i64, align 8
  store %struct.tm* %tmP, %struct.tm** %tmP.addr, align 8
  %0 = load %struct.tm** %tmP.addr, align 8
  %tm_year = getelementptr inbounds %struct.tm* %0, i32 0, i32 5
  %1 = load i32* %tm_year, align 4
  %sub = sub nsw i32 %1, 70
  %mul = mul nsw i32 %sub, 365
  %conv = sext i32 %mul to i64
  store i64 %conv, i64* %t, align 8
  %2 = load %struct.tm** %tmP.addr, align 8
  %tm_year1 = getelementptr inbounds %struct.tm* %2, i32 0, i32 5
  %3 = load i32* %tm_year1, align 4
  %sub2 = sub nsw i32 %3, 69
  %div = sdiv i32 %sub2, 4
  %conv3 = sext i32 %div to i64
  %4 = load i64* %t, align 8
  %add = add nsw i64 %4, %conv3
  store i64 %add, i64* %t, align 8
  %5 = load %struct.tm** %tmP.addr, align 8
  %tm_mon = getelementptr inbounds %struct.tm* %5, i32 0, i32 4
  %6 = load i32* %tm_mon, align 4
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds [12 x i32]* @tm_to_time.monthtab, i32 0, i64 %idxprom
  %7 = load i32* %arrayidx, align 4
  %conv4 = sext i32 %7 to i64
  %8 = load i64* %t, align 8
  %add5 = add nsw i64 %8, %conv4
  store i64 %add5, i64* %t, align 8
  %9 = load %struct.tm** %tmP.addr, align 8
  %tm_mon6 = getelementptr inbounds %struct.tm* %9, i32 0, i32 4
  %10 = load i32* %tm_mon6, align 4
  %cmp = icmp sge i32 %10, 2
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %11 = load %struct.tm** %tmP.addr, align 8
  %tm_year8 = getelementptr inbounds %struct.tm* %11, i32 0, i32 5
  %12 = load i32* %tm_year8, align 4
  %add9 = add nsw i32 %12, 1900
  %call = call i32 @is_leap(i32 %add9)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %13 = load i64* %t, align 8
  %inc = add nsw i64 %13, 1
  store i64 %inc, i64* %t, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %14 = load %struct.tm** %tmP.addr, align 8
  %tm_mday = getelementptr inbounds %struct.tm* %14, i32 0, i32 3
  %15 = load i32* %tm_mday, align 4
  %sub10 = sub nsw i32 %15, 1
  %conv11 = sext i32 %sub10 to i64
  %16 = load i64* %t, align 8
  %add12 = add nsw i64 %16, %conv11
  store i64 %add12, i64* %t, align 8
  %17 = load i64* %t, align 8
  %mul13 = mul nsw i64 %17, 24
  %18 = load %struct.tm** %tmP.addr, align 8
  %tm_hour = getelementptr inbounds %struct.tm* %18, i32 0, i32 2
  %19 = load i32* %tm_hour, align 4
  %conv14 = sext i32 %19 to i64
  %add15 = add nsw i64 %mul13, %conv14
  store i64 %add15, i64* %t, align 8
  %20 = load i64* %t, align 8
  %mul16 = mul nsw i64 %20, 60
  %21 = load %struct.tm** %tmP.addr, align 8
  %tm_min = getelementptr inbounds %struct.tm* %21, i32 0, i32 1
  %22 = load i32* %tm_min, align 4
  %conv17 = sext i32 %22 to i64
  %add18 = add nsw i64 %mul16, %conv17
  store i64 %add18, i64* %t, align 8
  %23 = load i64* %t, align 8
  %mul19 = mul nsw i64 %23, 60
  %24 = load %struct.tm** %tmP.addr, align 8
  %tm_sec = getelementptr inbounds %struct.tm* %24, i32 0, i32 0
  %25 = load i32* %tm_sec, align 4
  %conv20 = sext i32 %25 to i64
  %add21 = add nsw i64 %mul19, %conv20
  store i64 %add21, i64* %t, align 8
  %26 = load i64* %t, align 8
  ret i64 %26
}

; Function Attrs: nounwind uwtable
define internal i32 @strlong_compare(i8* %v1, i8* %v2) #0 {
entry:
  %v1.addr = alloca i8*, align 8
  %v2.addr = alloca i8*, align 8
  %s1 = alloca %struct.strlong*, align 8
  %s2 = alloca %struct.strlong*, align 8
  store i8* %v1, i8** %v1.addr, align 8
  store i8* %v2, i8** %v2.addr, align 8
  %0 = load i8** %v1.addr, align 8
  %1 = bitcast i8* %0 to %struct.strlong*
  store %struct.strlong* %1, %struct.strlong** %s1, align 8
  %2 = load i8** %v2.addr, align 8
  %3 = bitcast i8* %2 to %struct.strlong*
  store %struct.strlong* %3, %struct.strlong** %s2, align 8
  %4 = load %struct.strlong** %s1, align 8
  %s = getelementptr inbounds %struct.strlong* %4, i32 0, i32 0
  %5 = load i8** %s, align 8
  %6 = load %struct.strlong** %s2, align 8
  %s3 = getelementptr inbounds %struct.strlong* %6, i32 0, i32 0
  %7 = load i8** %s3, align 8
  %call = call i32 @strcmp(i8* %5, i8* %7) #8
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal void @pound_case(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8** %str.addr, align 8
  %1 = load i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8** %str.addr, align 8
  %3 = load i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %idxprom = sext i32 %conv2 to i64
  %call = call i16** @__ctype_b_loc() #10
  %4 = load i16** %call, align 8
  %arrayidx = getelementptr inbounds i16* %4, i64 %idxprom
  %5 = load i16* %arrayidx, align 2
  %conv3 = zext i16 %5 to i32
  %and = and i32 %conv3, 256
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %6 = load i8** %str.addr, align 8
  %7 = load i8* %6, align 1
  %conv4 = sext i8 %7 to i32
  %call5 = call i32 @tolower(i32 %conv4) #5
  %conv6 = trunc i32 %call5 to i8
  %8 = load i8** %str.addr, align 8
  store i8 %conv6, i8* %8, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i8** %str.addr, align 8
  %incdec.ptr = getelementptr inbounds i8* %9, i32 1
  store i8* %incdec.ptr, i8** %str.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @strlong_search(i8* %str, %struct.strlong* %tab, i32 %n, i64* %lP) #0 {
entry:
  %retval = alloca i32, align 4
  %str.addr = alloca i8*, align 8
  %tab.addr = alloca %struct.strlong*, align 8
  %n.addr = alloca i32, align 4
  %lP.addr = alloca i64*, align 8
  %i = alloca i32, align 4
  %h = alloca i32, align 4
  %l = alloca i32, align 4
  %r = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 8
  store %struct.strlong* %tab, %struct.strlong** %tab.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  store i64* %lP, i64** %lP.addr, align 8
  store i32 0, i32* %l, align 4
  %0 = load i32* %n.addr, align 4
  %sub = sub nsw i32 %0, 1
  store i32 %sub, i32* %h, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end12, %entry
  %1 = load i32* %h, align 4
  %2 = load i32* %l, align 4
  %add = add nsw i32 %1, %2
  %div = sdiv i32 %add, 2
  store i32 %div, i32* %i, align 4
  %3 = load i8** %str.addr, align 8
  %4 = load i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load %struct.strlong** %tab.addr, align 8
  %arrayidx = getelementptr inbounds %struct.strlong* %5, i64 %idxprom
  %s = getelementptr inbounds %struct.strlong* %arrayidx, i32 0, i32 0
  %6 = load i8** %s, align 8
  %call = call i32 @strcmp(i8* %3, i8* %6) #8
  store i32 %call, i32* %r, align 4
  %7 = load i32* %r, align 4
  %cmp = icmp slt i32 %7, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %for.cond
  %8 = load i32* %i, align 4
  %sub1 = sub nsw i32 %8, 1
  store i32 %sub1, i32* %h, align 4
  br label %if.end9

if.else:                                          ; preds = %for.cond
  %9 = load i32* %r, align 4
  %cmp2 = icmp sgt i32 %9, 0
  br i1 %cmp2, label %if.then3, label %if.else5

if.then3:                                         ; preds = %if.else
  %10 = load i32* %i, align 4
  %add4 = add nsw i32 %10, 1
  store i32 %add4, i32* %l, align 4
  br label %if.end

if.else5:                                         ; preds = %if.else
  %11 = load i32* %i, align 4
  %idxprom6 = sext i32 %11 to i64
  %12 = load %struct.strlong** %tab.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.strlong* %12, i64 %idxprom6
  %l8 = getelementptr inbounds %struct.strlong* %arrayidx7, i32 0, i32 1
  %13 = load i64* %l8, align 8
  %14 = load i64** %lP.addr, align 8
  store i64 %13, i64* %14, align 8
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then3
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then
  %15 = load i32* %h, align 4
  %16 = load i32* %l, align 4
  %cmp10 = icmp slt i32 %15, %16
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end9
  store i32 0, i32* %retval
  br label %return

if.end12:                                         ; preds = %if.end9
  br label %for.cond

return:                                           ; preds = %if.then11, %if.else5
  %17 = load i32* %retval
  ret i32 %17
}

; Function Attrs: nounwind uwtable
define internal i32 @is_leap(i32 %year) #0 {
entry:
  %year.addr = alloca i32, align 4
  store i32 %year, i32* %year.addr, align 4
  %0 = load i32* %year.addr, align 4
  %rem = srem i32 %0, 400
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %cond.true, label %cond.false7

cond.true:                                        ; preds = %entry
  %1 = load i32* %year.addr, align 4
  %rem1 = srem i32 %1, 100
  %tobool2 = icmp ne i32 %rem1, 0
  br i1 %tobool2, label %cond.true3, label %cond.false

cond.true3:                                       ; preds = %cond.true
  %2 = load i32* %year.addr, align 4
  %rem4 = srem i32 %2, 4
  %tobool5 = icmp ne i32 %rem4, 0
  %cond = select i1 %tobool5, i32 0, i32 1
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true3
  %cond6 = phi i32 [ %cond, %cond.true3 ], [ 0, %cond.false ]
  br label %cond.end8

cond.false7:                                      ; preds = %entry
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false7, %cond.end
  %cond9 = phi i32 [ %cond6, %cond.end ], [ 1, %cond.false7 ]
  ret i32 %cond9
}

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readnone "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readonly }
attributes #9 = { noreturn nounwind }
attributes #10 = { nounwind readnone }
attributes #11 = { noreturn }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0}

!0 = metadata !{metadata !"clang version 3.5.0 (tags/RELEASE_350/final)"}
